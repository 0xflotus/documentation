{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Lightrun \u00b6 Lightrun provides granular code-level observability in real-time directly from the environment in which the app is running. With this perspective into your code, you can troubleshoot, test and debug your application by investigating issues directly from the environments in which they're running, while they're running, including the development, staging and production environments. Add Lightrun actions into the relevant lines of code, on-the-fly. Lightrun actions include: Logs Metrics Snapshots - virtual breakpoints that don't stop the app Use these Lightrun actions to get the relevant runtime logs for your live application, based on the issue you're investigating and to view and analyze actual performance metrics. The rest of this topic covers: Lightrun architecture System requirements Next steps Lightrun architecture \u00b6 Lightrun comprises these parts: Management Server - this is the Lightrun server, responsible for service management; this is the fundamental \"backbone\" of the platform. With our SaaS deployment, Lightrun manages this side of things; all you need to do is install and run the Lightrun agents within your live apps. Java Agent - the JVMTI agent that runs alongside the application on your application servers; this agent dynamically inserts the logs, metrics and snapshots in the code based on the Lightrun actions you run. Client - the IDE plugin and command line utility; you can use either to add, remove and modify actions - whichever is part of your natural workflow. Whenever you run a command to insert an action, the agent receives your request and adds those actions accordingly. These three components communicate with one another as illustrated in the following diagram: System requirements \u00b6 Lightrun requires the following system components: Agent installation \u00b6 JDK/OpenJDK 1.7 or newer Linux with GLIBCXX_3.4.19 or newer (Ubuntu 14+, Centos 7+ or equivalent) IntelliJ plugin installation \u00b6 JDK/OpenJDK 1.8 or newer IntelliJ Idea 2018.3 / 2019.3 / 2020.1 Next steps \u00b6 Install the agent on the relevant application servers. Install the plugin in your IDE.","title":"Introduction"},{"location":"#welcome-to-lightrun","text":"Lightrun provides granular code-level observability in real-time directly from the environment in which the app is running. With this perspective into your code, you can troubleshoot, test and debug your application by investigating issues directly from the environments in which they're running, while they're running, including the development, staging and production environments. Add Lightrun actions into the relevant lines of code, on-the-fly. Lightrun actions include: Logs Metrics Snapshots - virtual breakpoints that don't stop the app Use these Lightrun actions to get the relevant runtime logs for your live application, based on the issue you're investigating and to view and analyze actual performance metrics. The rest of this topic covers: Lightrun architecture System requirements Next steps","title":"Welcome to Lightrun"},{"location":"#lightrun-architecture","text":"Lightrun comprises these parts: Management Server - this is the Lightrun server, responsible for service management; this is the fundamental \"backbone\" of the platform. With our SaaS deployment, Lightrun manages this side of things; all you need to do is install and run the Lightrun agents within your live apps. Java Agent - the JVMTI agent that runs alongside the application on your application servers; this agent dynamically inserts the logs, metrics and snapshots in the code based on the Lightrun actions you run. Client - the IDE plugin and command line utility; you can use either to add, remove and modify actions - whichever is part of your natural workflow. Whenever you run a command to insert an action, the agent receives your request and adds those actions accordingly. These three components communicate with one another as illustrated in the following diagram:","title":"Lightrun architecture"},{"location":"#system-requirements","text":"Lightrun requires the following system components:","title":"System requirements"},{"location":"#agent-installation","text":"JDK/OpenJDK 1.7 or newer Linux with GLIBCXX_3.4.19 or newer (Ubuntu 14+, Centos 7+ or equivalent)","title":"Agent installation"},{"location":"#intellij-plugin-installation","text":"JDK/OpenJDK 1.8 or newer IntelliJ Idea 2018.3 / 2019.3 / 2020.1","title":"IntelliJ plugin installation"},{"location":"#next-steps","text":"Install the agent on the relevant application servers. Install the plugin in your IDE.","title":"Next steps"},{"location":"LightrunActions%202/","text":"Lightrun actions \u00b6 Actions are any of the snapshots, logs or metrics that you add to your applications directly from specific lines of code. From the IDE, you can: add the Lightrun action you need directly inline from your code configure logs create snapshots (breakpoints) configure metrics Note A system quota controls use of CPU, Networking, Memory, excessively long strings, too many instructions printing out, protection from infinite loops and the like Prerequisites To use the plugin, make sure: You've attached at least one agent to your app You install the plugin in your local IntelliJ instance) You authenticate IntelliJ with your Lightrun account To add a Lightrun action Go to the line in your code that you need to debug. Right-click to open the IntelliJ context menu: Hover over the Lightrun option at the top of the menu to open the sub-menu: Now, choose your action: configure logs create snapshots (breakpoints) configure metrics Logs \u00b6 You can add logs directly to your application while it's running. To add a log Go to the line of your source code at which you'd like to insert the log. Right-click to open the IntelliJ context menu: Open the Lightrun context menu: Select Log from the Lightrun context menu. The Create Log dialog opens: Complete the fields in the dialog as follows: Agent bind the action to a specific agent or tag from the available options in this dropdown list File this is the source code file into which you're inserting the action Format - the actual log string; use expressions such as My variable is {var} including even method invocations such as: Method value: {myMethod() + 5} Log Level - Debug, Info, Warning or Error; once configured, logs can also be filtered by this attribute Condition an expression that limits the action; this is the condition of an if statement used to limit the execution of the action !!! example ` myVar % 7 == 0 ` limits the log so it only prints for variables that are divisible by 7 Click Advanced to configure the following additional fields: Ignore quotas the quota (rate limit) is configured in the agent configuration file. Ignore Quotas defaults to off. Only users assigned the IGNORE-QUOTA role can perform this configuration; the checkbox is disabled for other users. Expiry the time after which Lightrun ceases to track this action; defaults to 1 hour if not configured Click OK to add the log. A marker is also added to the area above the line: Tip Customize your profile picture as it appeers in the marker at gravatar.com Click from the log marker to delete or edit the log configuration. Snapshots \u00b6 A snapshot is a one-time \"breakpoint\" that doesn't block your code from running; as opposed to a traditional breakpoint, snapshots collect the stack trace and variables without interrupting the application at all. To add a snapshot Go to the line of your source code at which you'd like to insert the snapshot. Right-click to open the context menu: Select Snapshot : The Create Snapshot dialog opens: Complete the fields in the dialog as follows: Agent bind the action to a specific agent or tag from the available options in this dropdown list File this is the source code file into which you're inserting the action Expression variables or method results to be displayed in the stack trace of the snapshot; click + to enter additional expressions Condition an expression that limits the action; this is the condition of an if statement used to limit the execution of the action !!! example ` myVar % 7 == 0 ` limits the log so it only prints for variables that are divisible by 7 Click Advanced to configure the following additional fields: Max Hit Count the maximum number of times the snapshot should be taken during the lifetime of the action; default == 1. Ignore quotas the quota (rate limit) is configured in the agent configuration file. Ignore Quotas defaults to off. Only users assigned the IGNORE-QUOTA role can perform this configuration; the checkbox is disabled for other users. Expiry the time after which Lightrun ceases to track this action; defaults to 1 hour if not configured Click OK to add the log. A marker is also added to the area above the line: The snapshot is added and displayed in the bottom sidebar, and an icon is added to the margins of the code on the line where it was added. The Snapshot view is further detailed here Click from the log marker to delete or edit the log configuration. Metrics \u00b6 You can add the following metrics to be tracked per line in your code: Counters and time measures - count the number of times a specific line of code throws an exception Measure Duration Custom Metrics Counters and time measures \u00b6 The counter action counts every time the given line was reached and periodically logs that information to the standard logger. Similarly, you can add a time duration metric to measure the amount of time the specified code block runs, and then use this data to help investigate issues, track performance trouble or compare to other lines of code. To add a counter Go to the line of your source code at which you'd like to insert the snapshot. Right-click to open the context menu: Hover over Metrics and then click Counter or Time Measure (tictoc) from its sub-menu. The Create Counter appears as follows: The Create Time Duration (tictoc) appears as follows: Complete the fields in the dialog as follows: Agent bind the action to a specific agent or tag from the available options in this dropdown list File this is the source code file into which you're inserting the action Name a unique name used to distinguish between this and other counters in the printouts Condition an expression that limits the action; this is the condition of an if statement used to limit the execution of the action !!! example ` myVar % 7 == 0 ` limits the log so it only prints for variables that are divisible by 7 Click Advanced to configure the following additional fields: Aggregate By (Counters only) - collect and aggregate data only for the referenced string Ignore quotas the quota (rate limit) is configured in the agent configuration file. Ignore Quotas defaults to off. Only users assigned the IGNORE-QUOTA role can perform this configuration; the checkbox is disabled for other users. Expiry the time after which Lightrun ceases to track this action; defaults to 1 hour if not configured Click OK to add the metric. A marker is also added to the margins of the code on the line where it was inserted. Click to delete or edit the counter configuration. Click to delete or edit the time measure metric configuration. // : # ### Set value {#_set_value} // : # One trick in debugging is to set a variable to a different value and force a specific code path. This can be particularly useful when patching broken behavior. // : # !!! example // : # If a feature fails and it's surrounded by an if statement, you might be able to disable that feature by forcing the value of a variable. // : # !!! warning // : # This is an extremely risky action, and as such only users with the set-value role can execute it. // : # ###### To add a set value action // : # 1. Go to the line of your source code at which you'd like to set a value. // : # 2. Right-click to open the context menu: // : # // : # 3. Hover over Metrics and then click Set Value . // : # 4. Enter the relevant variable name for the left-side argument. Please notice that the left hand side must be a variable in context and can't be a method. // : # 5. In the right-side field, enter the assigned value. Valid values include any Java expression, including a method invocation. // : # 6. You can use the + button to add additional assignments // : # 7. Click Ok to set the action. // : # !!! important // : # Quotas aren't imposed on set-value operations and as such the performance impact can be significant. Measure duration \u00b6 Go to the line of your source code for which you'd like to measure duration. Right-click to open the context menu: Hover over Metrics and then click Method Duration . The Create Measure Duration dialog opens: Complete the fields in the dialog as follows: Agent bind the action to a specific agent or tag from the available options in this dropdown list Method - Name a unique name used to distinguish between this and other counters in the printouts Condition an expression that limits the action; this is the condition of an if statement used to limit the execution of the action !!! example ` myVar % 7 == 0 ` limits the log so it only prints for variables that are divisible by 7 Click Advanced to configure the following additional fields: Ignore quotas the quota (rate limit) is configured in the agent configuration file. Ignore Quotas defaults to off. Only users assigned the IGNORE-QUOTA role can perform this configuration; the checkbox is disabled for other users. Expiry the time after which Lightrun ceases to track this action; defaults to 1 hour if not configured Click OK to add the metric. An icon is added to the margins of the code on the line where it was added. Click from the log marker to delete or edit the log configuration. Custom metrics \u00b6 You can insert your own customized metrics using regular expressions. To insert a custom metric Go to the line of your source code at which you'd like to insert custom metrics. Right-click to open the context menu: Hover over Metrics and then click Custom Metric . The Create Custom Metric dialog opens: Complete the fields in the dialog as follows: Agent bind the action to a specific agent or tag from the available options in this dropdown list File this is the source code file into which you're inserting the action Name a unique name used to distinguish between this and other counters in the printouts Expression variables or method results to be displayed in the stack trace of the snapshot; click + to enter additional expressions Condition an expression that limits the action; this is the condition of an if statement used to limit the execution of the action !!! example ` myVar % 7 == 0 ` limits the log so it only prints for variables that are divisible by 7 Click Advanced to configure the following additional fields: Ignore quotas the quota (rate limit) is configured in the agent configuration file. Ignore Quotas defaults to off. Only users assigned the IGNORE-QUOTA role can perform this configuration; the checkbox is disabled for other users. Expiry the time after which Lightrun ceases to track this action; defaults to 1 hour if not configured Click OK to add the log. An icon is added to the margins of the code on the line where it was added. Click to delete or edit the counter configuration. Edit and delete actions \u00b6 Once you create an action, the relevant icon appears in the gutter of your code, similar to the following: Hover over the relevant icon to read its tooltip. Right-click the icon for other relevant options. To view notifications, errors, etc., select Info to learn more. To update or change the action, click Edit . To remove the action, click Delete .","title":"Lightrun actions"},{"location":"LightrunActions%202/#lightrun-actions","text":"Actions are any of the snapshots, logs or metrics that you add to your applications directly from specific lines of code. From the IDE, you can: add the Lightrun action you need directly inline from your code configure logs create snapshots (breakpoints) configure metrics Note A system quota controls use of CPU, Networking, Memory, excessively long strings, too many instructions printing out, protection from infinite loops and the like","title":"Lightrun actions"},{"location":"LightrunActions%202/#configure-logs","text":"You can add logs directly to your application while it's running.","title":"Logs"},{"location":"LightrunActions%202/#_snapshot_breakpoint","text":"A snapshot is a one-time \"breakpoint\" that doesn't block your code from running; as opposed to a traditional breakpoint, snapshots collect the stack trace and variables without interrupting the application at all.","title":"Snapshots"},{"location":"LightrunActions%202/#configure-metrics","text":"You can add the following metrics to be tracked per line in your code: Counters and time measures - count the number of times a specific line of code throws an exception Measure Duration Custom Metrics","title":"Metrics"},{"location":"LightrunActions%202/#_counter","text":"The counter action counts every time the given line was reached and periodically logs that information to the standard logger. Similarly, you can add a time duration metric to measure the amount of time the specified code block runs, and then use this data to help investigate issues, track performance trouble or compare to other lines of code.","title":"Counters and time measures"},{"location":"LightrunActions%202/#duration","text":"Go to the line of your source code for which you'd like to measure duration. Right-click to open the context menu: Hover over Metrics and then click Method Duration . The Create Measure Duration dialog opens: Complete the fields in the dialog as follows: Agent bind the action to a specific agent or tag from the available options in this dropdown list Method - Name a unique name used to distinguish between this and other counters in the printouts Condition an expression that limits the action; this is the condition of an if statement used to limit the execution of the action !!! example ` myVar % 7 == 0 ` limits the log so it only prints for variables that are divisible by 7 Click Advanced to configure the following additional fields: Ignore quotas the quota (rate limit) is configured in the agent configuration file. Ignore Quotas defaults to off. Only users assigned the IGNORE-QUOTA role can perform this configuration; the checkbox is disabled for other users. Expiry the time after which Lightrun ceases to track this action; defaults to 1 hour if not configured Click OK to add the metric. An icon is added to the margins of the code on the line where it was added. Click from the log marker to delete or edit the log configuration.","title":"Measure duration"},{"location":"LightrunActions%202/#custom","text":"You can insert your own customized metrics using regular expressions.","title":"Custom metrics"},{"location":"LightrunActions%202/#edit-and-delete-actions","text":"Once you create an action, the relevant icon appears in the gutter of your code, similar to the following: Hover over the relevant icon to read its tooltip. Right-click the icon for other relevant options. To view notifications, errors, etc., select Info to learn more. To update or change the action, click Edit . To remove the action, click Delete .","title":"Edit and delete actions"},{"location":"LightrunActions/","text":"Lightrun actions \u00b6 Actions are any of the snapshots, logs or metrics that you add to your applications directly from specific lines of code. From the IDE, you can: add the Lightrun action you need directly inline from your code configure logs create snapshots (breakpoints) configure metrics Note A system quota controls use of CPU, Networking, Memory, excessively long strings, too many instructions printing out, protection from infinite loops and the like Prerequisites To use the plugin, make sure: You've attached at least one agent to your app You install the plugin in your local IntelliJ instance) You authenticate IntelliJ with your Lightrun account To add a Lightrun action Go to the line in your code that you need to debug. Right-click to open the IntelliJ context menu: Hover over the Lightrun option at the top of the menu to open the sub-menu: Now, choose your action: configure logs create snapshots (breakpoints) configure metrics Logs \u00b6 You can add logs directly to your application while it's running. To add a log Go to the line of your source code at which you'd like to insert the log. Right-click to open the IntelliJ context menu: Open the Lightrun context menu: Select Log from the Lightrun context menu. The Create Log dialog opens: Complete the fields in the dialog as follows: Agent bind the action to a specific agent or tag from the available options in this dropdown list File this is the source code file into which you're inserting the action Format - the actual log string; use expressions such as My variable is {var} including even method invocations such as: Method value: {myMethod() + 5} Log Level - Debug, Info, Warning or Error; once configured, logs can also be filtered by this attribute Condition an expression that limits the action; this is the condition of an if statement used to limit the execution of the action !!! example ` myVar % 7 == 0 ` limits the log so it only prints for variables that are divisible by 7 Click Advanced to configure the following additional fields: Ignore quotas the quota (rate limit) is configured in the agent configuration file. Ignore Quotas defaults to off. Only users assigned the IGNORE-QUOTA role can perform this configuration; the checkbox is disabled for other users. Expiry the time after which Lightrun ceases to track this action; defaults to 1 hour if not configured Click OK to add the log. A marker is also added to the area above the line: Tip Customize your profile picture as it appeers in the marker at gravatar.com Click from the log marker to delete or edit the log configuration. Snapshots \u00b6 A snapshot is a one-time \"breakpoint\" that doesn't block your code from running; as opposed to a traditional breakpoint, snapshots collect the stack trace and variables without interrupting the application at all. To add a snapshot Go to the line of your source code at which you'd like to insert the snapshot. Right-click to open the context menu: Select Snapshot : The Create Snapshot dialog opens: Complete the fields in the dialog as follows: Agent bind the action to a specific agent or tag from the available options in this dropdown list File this is the source code file into which you're inserting the action Expression variables or method results to be displayed in the stack trace of the snapshot; click + to enter additional expressions Condition an expression that limits the action; this is the condition of an if statement used to limit the execution of the action !!! example ` myVar % 7 == 0 ` limits the log so it only prints for variables that are divisible by 7 Click Advanced to configure the following additional fields: Max Hit Count the maximum number of times the snapshot should be taken during the lifetime of the action; default == 1. Ignore quotas the quota (rate limit) is configured in the agent configuration file. Ignore Quotas defaults to off. Only users assigned the IGNORE-QUOTA role can perform this configuration; the checkbox is disabled for other users. Expiry the time after which Lightrun ceases to track this action; defaults to 1 hour if not configured Click OK to add the log. A marker is also added to the area above the line: The snapshot is added and displayed in the bottom sidebar, and an icon is added to the margins of the code on the line where it was added. The Snapshot view is further detailed here Click from the log marker to delete or edit the log configuration. Metrics \u00b6 You can add the following metrics to be tracked per line in your code: Counters and time measures - count the number of times a specific line of code throws an exception Measure Duration Custom Metrics Counters and time measures \u00b6 The counter action counts every time the given line was reached and periodically logs that information to the standard logger. Similarly, you can add a time duration metric to measure the amount of time the specified code block runs, and then use this data to help investigate issues, track performance trouble or compare to other lines of code. To add a counter Go to the line of your source code at which you'd like to insert the snapshot. Right-click to open the context menu: Hover over Metrics and then click Counter or Time Measure (tictoc) from its sub-menu. The Create Counter appears as follows: The Create Time Duration (tictoc) appears as follows: Complete the fields in the dialog as follows: Agent bind the action to a specific agent or tag from the available options in this dropdown list File this is the source code file into which you're inserting the action Name a unique name used to distinguish between this and other counters in the printouts Condition an expression that limits the action; this is the condition of an if statement used to limit the execution of the action !!! example ` myVar % 7 == 0 ` limits the log so it only prints for variables that are divisible by 7 Click Advanced to configure the following additional fields: Aggregate By (Counters only) - collect and aggregate data only for the referenced string Ignore quotas the quota (rate limit) is configured in the agent configuration file. Ignore Quotas defaults to off. Only users assigned the IGNORE-QUOTA role can perform this configuration; the checkbox is disabled for other users. Expiry the time after which Lightrun ceases to track this action; defaults to 1 hour if not configured Click OK to add the metric. A marker is also added to the margins of the code on the line where it was inserted. Click to delete or edit the counter configuration. Click to delete or edit the time measure metric configuration. // : # ### Set value {#_set_value} // : # One trick in debugging is to set a variable to a different value and force a specific code path. This can be particularly useful when patching broken behavior. // : # !!! example // : # If a feature fails and it's surrounded by an if statement, you might be able to disable that feature by forcing the value of a variable. // : # !!! warning // : # This is an extremely risky action, and as such only users with the set-value role can execute it. // : # ###### To add a set value action // : # 1. Go to the line of your source code at which you'd like to set a value. // : # 2. Right-click to open the context menu: // : # // : # 3. Hover over Metrics and then click Set Value . // : # 4. Enter the relevant variable name for the left-side argument. Please notice that the left hand side must be a variable in context and can't be a method. // : # 5. In the right-side field, enter the assigned value. Valid values include any Java expression, including a method invocation. // : # 6. You can use the + button to add additional assignments // : # 7. Click Ok to set the action. // : # !!! important // : # Quotas aren't imposed on set-value operations and as such the performance impact can be significant. Measure duration \u00b6 Go to the line of your source code for which you'd like to measure duration. Right-click to open the context menu: Hover over Metrics and then click Method Duration . The Create Measure Duration dialog opens: Complete the fields in the dialog as follows: Agent bind the action to a specific agent or tag from the available options in this dropdown list Method - Name a unique name used to distinguish between this and other counters in the printouts Condition an expression that limits the action; this is the condition of an if statement used to limit the execution of the action !!! example ` myVar % 7 == 0 ` limits the log so it only prints for variables that are divisible by 7 Click Advanced to configure the following additional fields: Ignore quotas the quota (rate limit) is configured in the agent configuration file. Ignore Quotas defaults to off. Only users assigned the IGNORE-QUOTA role can perform this configuration; the checkbox is disabled for other users. Expiry the time after which Lightrun ceases to track this action; defaults to 1 hour if not configured Click OK to add the metric. An icon is added to the margins of the code on the line where it was added. Click from the log marker to delete or edit the log configuration. Custom metrics \u00b6 You can insert your own customized metrics using regular expressions. To insert a custom metric Go to the line of your source code at which you'd like to insert custom metrics. Right-click to open the context menu: Hover over Metrics and then click Custom Metric . The Create Custom Metric dialog opens: Complete the fields in the dialog as follows: Agent bind the action to a specific agent or tag from the available options in this dropdown list File this is the source code file into which you're inserting the action Name a unique name used to distinguish between this and other counters in the printouts Expression variables or method results to be displayed in the stack trace of the snapshot; click + to enter additional expressions Condition an expression that limits the action; this is the condition of an if statement used to limit the execution of the action !!! example ` myVar % 7 == 0 ` limits the log so it only prints for variables that are divisible by 7 Click Advanced to configure the following additional fields: Ignore quotas the quota (rate limit) is configured in the agent configuration file. Ignore Quotas defaults to off. Only users assigned the IGNORE-QUOTA role can perform this configuration; the checkbox is disabled for other users. Expiry the time after which Lightrun ceases to track this action; defaults to 1 hour if not configured Click OK to add the log. An icon is added to the margins of the code on the line where it was added. Click to delete or edit the counter configuration. Edit and delete actions \u00b6 Once you create an action, the relevant icon appears in the gutter of your code, similar to the following: Hover over the relevant icon to read its tooltip. Right-click the icon for other relevant options. To view notifications, errors, etc., select Info to learn more. To update or change the action, click Edit . To remove the action, click Delete .","title":"Actions"},{"location":"LightrunActions/#lightrun-actions","text":"Actions are any of the snapshots, logs or metrics that you add to your applications directly from specific lines of code. From the IDE, you can: add the Lightrun action you need directly inline from your code configure logs create snapshots (breakpoints) configure metrics Note A system quota controls use of CPU, Networking, Memory, excessively long strings, too many instructions printing out, protection from infinite loops and the like","title":"Lightrun actions"},{"location":"LightrunActions/#configure-logs","text":"You can add logs directly to your application while it's running.","title":"Logs"},{"location":"LightrunActions/#_snapshot_breakpoint","text":"A snapshot is a one-time \"breakpoint\" that doesn't block your code from running; as opposed to a traditional breakpoint, snapshots collect the stack trace and variables without interrupting the application at all.","title":"Snapshots"},{"location":"LightrunActions/#configure-metrics","text":"You can add the following metrics to be tracked per line in your code: Counters and time measures - count the number of times a specific line of code throws an exception Measure Duration Custom Metrics","title":"Metrics"},{"location":"LightrunActions/#_counter","text":"The counter action counts every time the given line was reached and periodically logs that information to the standard logger. Similarly, you can add a time duration metric to measure the amount of time the specified code block runs, and then use this data to help investigate issues, track performance trouble or compare to other lines of code.","title":"Counters and time measures"},{"location":"LightrunActions/#duration","text":"Go to the line of your source code for which you'd like to measure duration. Right-click to open the context menu: Hover over Metrics and then click Method Duration . The Create Measure Duration dialog opens: Complete the fields in the dialog as follows: Agent bind the action to a specific agent or tag from the available options in this dropdown list Method - Name a unique name used to distinguish between this and other counters in the printouts Condition an expression that limits the action; this is the condition of an if statement used to limit the execution of the action !!! example ` myVar % 7 == 0 ` limits the log so it only prints for variables that are divisible by 7 Click Advanced to configure the following additional fields: Ignore quotas the quota (rate limit) is configured in the agent configuration file. Ignore Quotas defaults to off. Only users assigned the IGNORE-QUOTA role can perform this configuration; the checkbox is disabled for other users. Expiry the time after which Lightrun ceases to track this action; defaults to 1 hour if not configured Click OK to add the metric. An icon is added to the margins of the code on the line where it was added. Click from the log marker to delete or edit the log configuration.","title":"Measure duration"},{"location":"LightrunActions/#custom","text":"You can insert your own customized metrics using regular expressions.","title":"Custom metrics"},{"location":"LightrunActions/#edit-and-delete-actions","text":"Once you create an action, the relevant icon appears in the gutter of your code, similar to the following: Hover over the relevant icon to read its tooltip. Right-click the icon for other relevant options. To view notifications, errors, etc., select Info to learn more. To update or change the action, click Edit . To remove the action, click Delete .","title":"Edit and delete actions"},{"location":"LightrunConsole%202/","text":"Data views in the IDE \u00b6 The Console and Snapshot views enable you to view log, metric and snapshot data in real time directly from the IDE, depending on what you've added . To use the plugin, make sure: You've attached at least one agent to your app You install the plugin in your local IntelliJ instance) You authenticate IntelliJ with your Lightrun account From the IDE, you can: configure log piping to view data directly from the IDE view logs and metrics view the stacktrace based on the snapshots you added To configure piping Navigate to the Lightrun right-hand sidebar: From the relevant agent, click to open the Piping menu: Set the Plugin or the Both option to view logs from the IDE. There are three levels of log piping: - App - the logs appear only in the Java application as they do by default. They just go to the standard logger. - Plugin - that logs won't show in the app. Instead they will display within the Lightrun Console below. - Both - that logs wll appear both in the app and in the plugin. Note In order to pipe the logs they need to go from the agent to the Management server and to the plugin. This process is batched so logs appear in batches and with some delay View logs and metrics \u00b6 Lightrun logs and metrics are normally printed into the standard logging framework. This is quite valuable as logs can be seen in the context of pre-existing log statements, which might provide further clues towards solving issues. At the same time, a developer might want to see the log output and search and filter directly from the IDE as they work. To do this, first configure log piping per-agent. Once configured, all relevant information from any Lightrun actions that are added to the agents appears in the developers' consoles. To view log data from IntelliJ Once you configure piping for the plugin and add at least one log to the code , logs and metrics start updating in real time in the Lightrun Console at the bottom sidebar in IntelliJ: Use the filters at the top right of the Console data to filter for the logs relevant to your investigation. Use the search bar at the top left to start typing and search dynamically for logs by name. To free memory or remove items already viewed, click Clear to remove logs that have already been displayed. View snapshot data \u00b6 Every time you add a snapshot to the code, it appears in the bottom sidebar of IntelliJ in the Lightrun Snapshots tab. The layout of the data that prints out is similar to the debugger interface, designed to be familiar to you. The name that was assigned to the snapshot when it was added appears at the top of the sidebar. The left column lists all of the stack trace frames from the relevant snapshot. Click the row of a specific frame to view the variables related to the exception that was thrown.","title":"Data views in the IDE"},{"location":"LightrunConsole%202/#data-views-in-the-ide","text":"The Console and Snapshot views enable you to view log, metric and snapshot data in real time directly from the IDE, depending on what you've added . To use the plugin, make sure: You've attached at least one agent to your app You install the plugin in your local IntelliJ instance) You authenticate IntelliJ with your Lightrun account From the IDE, you can: configure log piping to view data directly from the IDE view logs and metrics view the stacktrace based on the snapshots you added","title":"Data views in the IDE"},{"location":"LightrunConsole%202/#view","text":"Lightrun logs and metrics are normally printed into the standard logging framework. This is quite valuable as logs can be seen in the context of pre-existing log statements, which might provide further clues towards solving issues. At the same time, a developer might want to see the log output and search and filter directly from the IDE as they work. To do this, first configure log piping per-agent. Once configured, all relevant information from any Lightrun actions that are added to the agents appears in the developers' consoles.","title":"View logs and metrics"},{"location":"LightrunConsole%202/#snapshot","text":"Every time you add a snapshot to the code, it appears in the bottom sidebar of IntelliJ in the Lightrun Snapshots tab. The layout of the data that prints out is similar to the debugger interface, designed to be familiar to you. The name that was assigned to the snapshot when it was added appears at the top of the sidebar. The left column lists all of the stack trace frames from the relevant snapshot. Click the row of a specific frame to view the variables related to the exception that was thrown.","title":"View snapshot data"},{"location":"LightrunConsole/","text":"Data views in the IDE \u00b6 The Console and Snapshot views enable you to view log, metric and snapshot data in real time directly from the IDE, depending on what you've added . To use the plugin, make sure: You've attached at least one agent to your app You install the plugin in your local IntelliJ instance) You authenticate IntelliJ with your Lightrun account From the IDE, you can: configure log piping to view data directly from the IDE view logs and metrics view the stacktrace based on the snapshots you added To configure piping Navigate to the Lightrun right-hand sidebar: From the relevant agent, click to open the Piping menu: Set the Plugin or the Both option to view logs from the IDE. There are three levels of log piping: - App - the logs appear only in the Java application as they do by default. They just go to the standard logger. - Plugin - that logs won't show in the app. Instead they will display within the Lightrun Console below. - Both - that logs wll appear both in the app and in the plugin. Note In order to pipe the logs they need to go from the agent to the Management server and to the plugin. This process is batched so logs appear in batches and with some delay View logs and metrics \u00b6 Lightrun logs and metrics are normally printed into the standard logging framework. This is quite valuable as logs can be seen in the context of pre-existing log statements, which might provide further clues towards solving issues. At the same time, a developer might want to see the log output and search and filter directly from the IDE as they work. To do this, first configure log piping per-agent. Once configured, all relevant information from any Lightrun actions that are added to the agents appears in the developers' consoles. To view log data from IntelliJ Once you configure piping for the plugin and add at least one log to the code , logs and metrics start updating in real time in the Lightrun Console at the bottom sidebar in IntelliJ: Use the filters at the top right of the Console data to filter for the logs relevant to your investigation. Use the search bar at the top left to start typing and search dynamically for logs by name. To free memory or remove items already viewed, click Clear to remove logs that have already been displayed. View snapshot data \u00b6 Every time you add a snapshot to the code, it appears in the bottom sidebar of IntelliJ in the Lightrun Snapshots tab. The layout of the data that prints out is similar to the debugger interface, designed to be familiar to you. The name that was assigned to the snapshot when it was added appears at the top of the sidebar. The left column lists all of the stack trace frames from the relevant snapshot. Click the row of a specific frame to view the variables related to the exception that was thrown.","title":"Console & Snapshot Views"},{"location":"LightrunConsole/#data-views-in-the-ide","text":"The Console and Snapshot views enable you to view log, metric and snapshot data in real time directly from the IDE, depending on what you've added . To use the plugin, make sure: You've attached at least one agent to your app You install the plugin in your local IntelliJ instance) You authenticate IntelliJ with your Lightrun account From the IDE, you can: configure log piping to view data directly from the IDE view logs and metrics view the stacktrace based on the snapshots you added","title":"Data views in the IDE"},{"location":"LightrunConsole/#view","text":"Lightrun logs and metrics are normally printed into the standard logging framework. This is quite valuable as logs can be seen in the context of pre-existing log statements, which might provide further clues towards solving issues. At the same time, a developer might want to see the log output and search and filter directly from the IDE as they work. To do this, first configure log piping per-agent. Once configured, all relevant information from any Lightrun actions that are added to the agents appears in the developers' consoles.","title":"View logs and metrics"},{"location":"LightrunConsole/#snapshot","text":"Every time you add a snapshot to the code, it appears in the bottom sidebar of IntelliJ in the Lightrun Snapshots tab. The layout of the data that prints out is similar to the debugger interface, designed to be familiar to you. The name that was assigned to the snapshot when it was added appears at the top of the sidebar. The left column lists all of the stack trace frames from the relevant snapshot. Click the row of a specific frame to view the variables related to the exception that was thrown.","title":"View snapshot data"},{"location":"actions%202/","text":"Manage team actions \u00b6 Every time any user adds an action from their plugin or from the CLI, that action is stored and can be viewed from the app. Users with the Manager role can view and manage all actions from this view. Managing actions \u00b6 You can view action details and delete actions as well. Login to your Lightrun account and navigate to Entities->Actions . The Actions screen loads and appears similar to the following: The following details can be viewed: Column Description ID The unique ID assigned to this action by the system. Create time The timestamp for when the action was added to the code. Update time The timestamp for the last time changes were made to this action. Action type The type of action. Can be: CAPTURE (snapshot), TICTOC, LOG, COUNTER, SET_VALUE, CUSTOM_METRIC Condition The condition configured for this action. File name The name of the file where this action was inserted. Line # The line number in the file where this action was inserted. Error messages All error messages on the action whenever there is an error preventing the action from running or from running correctly. Agent ID The ID of the agent or the name of the tag to which the action is attached. Owner user The name of the user who added and manages this action. To delete the action, click Delete from the end of the row for the relevant action.","title":"Manage team actions"},{"location":"actions%202/#manage-team-actions","text":"Every time any user adds an action from their plugin or from the CLI, that action is stored and can be viewed from the app. Users with the Manager role can view and manage all actions from this view.","title":"Manage team actions"},{"location":"actions%202/#managing-actions","text":"You can view action details and delete actions as well. Login to your Lightrun account and navigate to Entities->Actions . The Actions screen loads and appears similar to the following: The following details can be viewed: Column Description ID The unique ID assigned to this action by the system. Create time The timestamp for when the action was added to the code. Update time The timestamp for the last time changes were made to this action. Action type The type of action. Can be: CAPTURE (snapshot), TICTOC, LOG, COUNTER, SET_VALUE, CUSTOM_METRIC Condition The condition configured for this action. File name The name of the file where this action was inserted. Line # The line number in the file where this action was inserted. Error messages All error messages on the action whenever there is an error preventing the action from running or from running correctly. Agent ID The ID of the agent or the name of the tag to which the action is attached. Owner user The name of the user who added and manages this action. To delete the action, click Delete from the end of the row for the relevant action.","title":"Managing actions"},{"location":"actions/","text":"Manage team actions \u00b6 Every time any user adds an action from their plugin or from the CLI, that action is stored and can be viewed from the app. Users with the Manager role can view and manage all actions from this view. Managing actions \u00b6 You can view action details and delete actions as well. Login to your Lightrun account and navigate to Entities->Actions . The Actions screen loads and appears similar to the following: The following details can be viewed: Column Description ID The unique ID assigned to this action by the system. Create time The timestamp for when the action was added to the code. Update time The timestamp for the last time changes were made to this action. Action type The type of action. Can be: CAPTURE (snapshot), TICTOC, LOG, COUNTER, SET_VALUE, CUSTOM_METRIC Condition The condition configured for this action. File name The name of the file where this action was inserted. Line # The line number in the file where this action was inserted. Error messages All error messages on the action whenever there is an error preventing the action from running or from running correctly. Agent ID The ID of the agent or the name of the tag to which the action is attached. Owner user The name of the user who added and manages this action. To delete the action, click Delete from the end of the row for the relevant action.","title":"Actions"},{"location":"actions/#manage-team-actions","text":"Every time any user adds an action from their plugin or from the CLI, that action is stored and can be viewed from the app. Users with the Manager role can view and manage all actions from this view.","title":"Manage team actions"},{"location":"actions/#managing-actions","text":"You can view action details and delete actions as well. Login to your Lightrun account and navigate to Entities->Actions . The Actions screen loads and appears similar to the following: The following details can be viewed: Column Description ID The unique ID assigned to this action by the system. Create time The timestamp for when the action was added to the code. Update time The timestamp for the last time changes were made to this action. Action type The type of action. Can be: CAPTURE (snapshot), TICTOC, LOG, COUNTER, SET_VALUE, CUSTOM_METRIC Condition The condition configured for this action. File name The name of the file where this action was inserted. Line # The line number in the file where this action was inserted. Error messages All error messages on the action whenever there is an error preventing the action from running or from running correctly. Agent ID The ID of the agent or the name of the tag to which the action is attached. Owner user The name of the user who added and manages this action. To delete the action, click Delete from the end of the row for the relevant action.","title":"Managing actions"},{"location":"adminexceptions%202/","text":"Monitor and handle exceptions \u00b6 Lightrun can monitor all exceptions that are thrown in the application, and then offer insights about those exceptions. You can: configure the agent for exceptions view exceptions from the browser view exceptions from the IDE Note By default, every exception in the application is reported, including those caught by your exception handler.","title":"Monitor and handle exceptions"},{"location":"adminexceptions%202/#monitor-and-handle-exceptions","text":"Lightrun can monitor all exceptions that are thrown in the application, and then offer insights about those exceptions. You can: configure the agent for exceptions view exceptions from the browser view exceptions from the IDE Note By default, every exception in the application is reported, including those caught by your exception handler.","title":"Monitor and handle exceptions"},{"location":"adminexceptions-configure%202/","text":"Configure exception handling \u00b6 Use the agent.config properties to set exception reporting based on your needs. This is a global file, meaning that once you update the file, all applications attached to the same agent are updated accordingly. The configuration file is located at the following path: <install_dir>/agent/agent.config Note Read more about advanced agent configuration here To start receiving exceptions and insights, and to enable your team to view exceptions as well, configure the agent as follows: From the relevant application server, go to the folder where you stored the agent zip and extracted its files when you downloaded it. Open the agent.config file. Find the exceptions_monitoring_enabled property and set it to 1 so that it looks like this: exceptions_monitoring_enabled=1 To configure the agent to ignore exceptions that your exceptions handler catches along the way, set the exceptions_should_report_caught property to 0 . It should look like this: exceptions_should_report_caught=0 Restart the relevant applications and their installed agents to apply the changes.","title":"Configure exception handling"},{"location":"adminexceptions-configure%202/#configure-exception-handling","text":"Use the agent.config properties to set exception reporting based on your needs. This is a global file, meaning that once you update the file, all applications attached to the same agent are updated accordingly. The configuration file is located at the following path: <install_dir>/agent/agent.config Note Read more about advanced agent configuration here To start receiving exceptions and insights, and to enable your team to view exceptions as well, configure the agent as follows: From the relevant application server, go to the folder where you stored the agent zip and extracted its files when you downloaded it. Open the agent.config file. Find the exceptions_monitoring_enabled property and set it to 1 so that it looks like this: exceptions_monitoring_enabled=1 To configure the agent to ignore exceptions that your exceptions handler catches along the way, set the exceptions_should_report_caught property to 0 . It should look like this: exceptions_should_report_caught=0 Restart the relevant applications and their installed agents to apply the changes.","title":"Configure exception handling"},{"location":"adminexceptions-configure/","text":"Configure exception handling \u00b6 Use the agent.config properties to set exception reporting based on your needs. This is a global file, meaning that once you update the file, all applications attached to the same agent are updated accordingly. The configuration file is located at the following path: <install_dir>/agent/agent.config Note Read more about advanced agent configuration here To start receiving exceptions and insights, and to enable your team to view exceptions as well, configure the agent as follows: From the relevant application server, go to the folder where you stored the agent zip and extracted its files when you downloaded it. Open the agent.config file. Find the exceptions_monitoring_enabled property and set it to 1 so that it looks like this: exceptions_monitoring_enabled=1 To configure the agent to ignore exceptions that your exceptions handler catches along the way, set the exceptions_should_report_caught property to 0 . It should look like this: exceptions_should_report_caught=0 Restart the relevant applications and their installed agents to apply the changes.","title":"Configure the Agent"},{"location":"adminexceptions-configure/#configure-exception-handling","text":"Use the agent.config properties to set exception reporting based on your needs. This is a global file, meaning that once you update the file, all applications attached to the same agent are updated accordingly. The configuration file is located at the following path: <install_dir>/agent/agent.config Note Read more about advanced agent configuration here To start receiving exceptions and insights, and to enable your team to view exceptions as well, configure the agent as follows: From the relevant application server, go to the folder where you stored the agent zip and extracted its files when you downloaded it. Open the agent.config file. Find the exceptions_monitoring_enabled property and set it to 1 so that it looks like this: exceptions_monitoring_enabled=1 To configure the agent to ignore exceptions that your exceptions handler catches along the way, set the exceptions_should_report_caught property to 0 . It should look like this: exceptions_should_report_caught=0 Restart the relevant applications and their installed agents to apply the changes.","title":"Configure exception handling"},{"location":"adminexceptions/","text":"Monitor and handle exceptions \u00b6 Lightrun can monitor all exceptions that are thrown in the application, and then offer insights about those exceptions. You can: configure the agent for exceptions view exceptions from the browser view exceptions from the IDE Note By default, every exception in the application is reported, including those caught by your exception handler.","title":"Exceptions: Overview"},{"location":"adminexceptions/#monitor-and-handle-exceptions","text":"Lightrun can monitor all exceptions that are thrown in the application, and then offer insights about those exceptions. You can: configure the agent for exceptions view exceptions from the browser view exceptions from the IDE Note By default, every exception in the application is reported, including those caught by your exception handler.","title":"Monitor and handle exceptions"},{"location":"agent-theory%202/","text":"The Lightrun agent is the core of how the platform collects and displays relevant data for you. Prerequisites for installing the agent vary depending on the application server you're using. Every application server has its own distinct set of JVM customization arguments.","title":"Agent theory 2"},{"location":"agent-theory/","text":"The Lightrun agent is the core of how the platform collects and displays relevant data for you. Prerequisites for installing the agent vary depending on the application server you're using. Every application server has its own distinct set of JVM customization arguments.","title":"Agent theory"},{"location":"agentadmin%202/","text":"Agent administration: overview \u00b6 It's best to calibrate agent configurations and related settings in order to maximize Lightrun functionality. Once you add the agent to your app , you can: Customize Maven and Gradle configurations to maximize the data delivered by Lightrun Customize agent configuration - by adjusting any of the available multiple properties Manage tags - in order to group agents together based on meaningful taxonomies Manage services - service configurations Manage data security - blocklisting and data redaction","title":"Agent administration: overview"},{"location":"agentadmin%202/#agent-administration-overview","text":"It's best to calibrate agent configurations and related settings in order to maximize Lightrun functionality. Once you add the agent to your app , you can: Customize Maven and Gradle configurations to maximize the data delivered by Lightrun Customize agent configuration - by adjusting any of the available multiple properties Manage tags - in order to group agents together based on meaningful taxonomies Manage services - service configurations Manage data security - blocklisting and data redaction","title":"Agent administration: overview"},{"location":"agentadmin-agentprops%202/","text":"Manage agents \u00b6 Users with the Manager role can administer agents as follows: Configure agent properties View active agents and their details Agent properties \u00b6 You can configure the agent in order to calibrate its behavior by setting the properties in the agent.config file (per agent). The configuration file is located at the following path: <install_dir>/agent/agent.config You can set these properties from the: agent.config file Configure properties from the terminal Agent.config file \u00b6 To manually set the properties, navigate to the config file on the relevant server: <install_dir>/agent/agent.config The following table describes the properties that you can customize: Parameter name Explanation max_dynamic_log_rate Number of log prints per second max_dynamic_log_bytes_rate Number of bytes per second (on log_stats_time_micros How often to log debugger max_condition_cost Maximum cost in percentage of CPU max_log_cpu_cost Maximum cost of dynamic logging max_snapshot_buffer_size The total size in bytes we allow max_snapshot_frame_count Max frame count we allow to breakpoint_expiration_sec Breakpoint \\ Dynamic log dynamic_log_quota_recovery_ms Time to pause dynamic log after no_check_certificate Disable certificate pinning when ignore_quota Disable all performance safe exceptions_monitoring_enabled Enable the capturing of the exceptions_monitoring_stdout Print all of the captured exceptions_report_percentage Process and report only this percentage of the exceptions thrown by the debuggee (A float between 0 and 1.0). exceptions_should_report_caught Report exceptions that were caught by the application as well as exceptions that remained uncaught exceptions_max_buffer_size The total size in bytes we allow to evaluate when capturing an exception (Same as snapshot) exceptions_stack_trace_frame_count Max frame count we allow to collect data from when capturing an excpetion (Same as snapshot) exit_after_report_all Agent empties queues before the application exits. enable_pii_redaction Enable personally identifiable information (PII) redaction in the agent's side (may have an effect on the application's performance) Command line arguments \u00b6 Agent configurations can be changed with a command line argument. The command line arguments should be inserted after the path of the agent and they should be separated by a comma. Synopsis \u00b6 -agentpath:<path-to-agent>/lightrun_agent.so=--<parameter>=<value>,--<parameter>=<value>... Agent parameters \u00b6 Following are the parameters that can be configured from the terminal. Parameter name Explanation Type hub_retry_delay_ms amount of time in milliseconds to sleep before retrying failed requests to Management server int32 debuggee_disabled_delay_ms amount of time in milliseconds to sleep before checking whether the debugger was enabled back int32 lightrun_extra_class_path additional directories and files containing resolvable binaries string lightrun_init_wait_time_ms timeout for wait iflightrun_wait_for_init is set int32 lightrun_wait_for_init ck application until first time of fetching breakpoints from the server bool enable_safe_caller allows any method without side effects in expressions bool extra_blocked_methods additional methods to block for testing purposes string extra_allowed_methods additional methods allowed for testing purposes string extra_whitelisted_classes internal names of additional classes to allow for testing purposes string expression_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while evaluating a single breakpoint expression int32 expression_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while evaluating a single breakpoint expression int32 pretty_printers_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while formatting some well known data structures int32 pretty_printers_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while formatting some well-known data structures int32 dynamic_log_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while evaluating all expressions in a single dynamic log statement int32 dynamic_log_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while evaluating all expressions in a single dynamic log int32 safe_caller_max_array_elements maximum allowed size of the array to copy or allocate in safe caller (copying or allocating larger arrays is considered to be too expensive MISSING int32 safe_caller_max_interpreter_stack_depth maximum stack depth that safe caller will allow int32 cdbg_description_suffix additional text to be appended to debug description string cdbg_class_files_cache_size cache size for class files used in safe method caller int32 cdbg_max_instructions_high use this value when ignoring quota int32 cdbg_max_stack_depth maximum number of stack frames to unwind int32 Example -agentpath:<pathtoagent>/lightrun_agent.so=--enable_safe_caller,--lightrun_init_wait_time_ms=999 View active agents \u00b6 Whenever an agent is running, you can view its details directly from the browser. Log in to your Lightrun account and navigate to Entities->Agents . The Agents screen loads, and appears similar to the following: The following table describes the data: Column Description Id The unique agent ID Host The host name of the server on which the agent is running ApiVersion The Lightrun API version currently implemented Pid The unique process identifier StartTime The time at which the agent was started UpdateTime The last time the agent fetched actions from the server PipeLogs The current configuration for log piping Labels Tags attached to this agent","title":"Manage agents"},{"location":"agentadmin-agentprops%202/#manage-agents","text":"Users with the Manager role can administer agents as follows: Configure agent properties View active agents and their details","title":"Manage agents"},{"location":"agentadmin-agentprops%202/#agent-properties","text":"You can configure the agent in order to calibrate its behavior by setting the properties in the agent.config file (per agent). The configuration file is located at the following path: <install_dir>/agent/agent.config You can set these properties from the: agent.config file Configure properties from the terminal","title":"Agent properties"},{"location":"agentadmin-agentprops%202/#agentconfig-file","text":"To manually set the properties, navigate to the config file on the relevant server: <install_dir>/agent/agent.config The following table describes the properties that you can customize: Parameter name Explanation max_dynamic_log_rate Number of log prints per second max_dynamic_log_bytes_rate Number of bytes per second (on log_stats_time_micros How often to log debugger max_condition_cost Maximum cost in percentage of CPU max_log_cpu_cost Maximum cost of dynamic logging max_snapshot_buffer_size The total size in bytes we allow max_snapshot_frame_count Max frame count we allow to breakpoint_expiration_sec Breakpoint \\ Dynamic log dynamic_log_quota_recovery_ms Time to pause dynamic log after no_check_certificate Disable certificate pinning when ignore_quota Disable all performance safe exceptions_monitoring_enabled Enable the capturing of the exceptions_monitoring_stdout Print all of the captured exceptions_report_percentage Process and report only this percentage of the exceptions thrown by the debuggee (A float between 0 and 1.0). exceptions_should_report_caught Report exceptions that were caught by the application as well as exceptions that remained uncaught exceptions_max_buffer_size The total size in bytes we allow to evaluate when capturing an exception (Same as snapshot) exceptions_stack_trace_frame_count Max frame count we allow to collect data from when capturing an excpetion (Same as snapshot) exit_after_report_all Agent empties queues before the application exits. enable_pii_redaction Enable personally identifiable information (PII) redaction in the agent's side (may have an effect on the application's performance)","title":"Agent.config file"},{"location":"agentadmin-agentprops%202/#cli","text":"Agent configurations can be changed with a command line argument. The command line arguments should be inserted after the path of the agent and they should be separated by a comma.","title":"Command line arguments"},{"location":"agentadmin-agentprops%202/#synopsis","text":"-agentpath:<path-to-agent>/lightrun_agent.so=--<parameter>=<value>,--<parameter>=<value>...","title":"Synopsis"},{"location":"agentadmin-agentprops%202/#agent-parameters","text":"Following are the parameters that can be configured from the terminal. Parameter name Explanation Type hub_retry_delay_ms amount of time in milliseconds to sleep before retrying failed requests to Management server int32 debuggee_disabled_delay_ms amount of time in milliseconds to sleep before checking whether the debugger was enabled back int32 lightrun_extra_class_path additional directories and files containing resolvable binaries string lightrun_init_wait_time_ms timeout for wait iflightrun_wait_for_init is set int32 lightrun_wait_for_init ck application until first time of fetching breakpoints from the server bool enable_safe_caller allows any method without side effects in expressions bool extra_blocked_methods additional methods to block for testing purposes string extra_allowed_methods additional methods allowed for testing purposes string extra_whitelisted_classes internal names of additional classes to allow for testing purposes string expression_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while evaluating a single breakpoint expression int32 expression_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while evaluating a single breakpoint expression int32 pretty_printers_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while formatting some well known data structures int32 pretty_printers_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while formatting some well-known data structures int32 dynamic_log_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while evaluating all expressions in a single dynamic log statement int32 dynamic_log_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while evaluating all expressions in a single dynamic log int32 safe_caller_max_array_elements maximum allowed size of the array to copy or allocate in safe caller (copying or allocating larger arrays is considered to be too expensive MISSING int32 safe_caller_max_interpreter_stack_depth maximum stack depth that safe caller will allow int32 cdbg_description_suffix additional text to be appended to debug description string cdbg_class_files_cache_size cache size for class files used in safe method caller int32 cdbg_max_instructions_high use this value when ignoring quota int32 cdbg_max_stack_depth maximum number of stack frames to unwind int32 Example -agentpath:<pathtoagent>/lightrun_agent.so=--enable_safe_caller,--lightrun_init_wait_time_ms=999","title":"Agent parameters"},{"location":"agentadmin-agentprops%202/#view-active-agents","text":"Whenever an agent is running, you can view its details directly from the browser. Log in to your Lightrun account and navigate to Entities->Agents . The Agents screen loads, and appears similar to the following: The following table describes the data: Column Description Id The unique agent ID Host The host name of the server on which the agent is running ApiVersion The Lightrun API version currently implemented Pid The unique process identifier StartTime The time at which the agent was started UpdateTime The last time the agent fetched actions from the server PipeLogs The current configuration for log piping Labels Tags attached to this agent","title":"View active agents"},{"location":"agentadmin-agentprops/","text":"Manage agents \u00b6 Users with the Manager role can administer agents as follows: Configure agent properties View active agents and their details Agent properties \u00b6 You can configure the agent in order to calibrate its behavior by setting the properties in the agent.config file (per agent). The configuration file is located at the following path: <install_dir>/agent/agent.config You can set these properties from the: agent.config file Configure properties from the terminal Agent.config file \u00b6 To manually set the properties, navigate to the config file on the relevant server: <install_dir>/agent/agent.config The following table describes the properties that you can customize: Parameter name Explanation max_dynamic_log_rate Number of log prints per second max_dynamic_log_bytes_rate Number of bytes per second (on log_stats_time_micros How often to log debugger max_condition_cost Maximum cost in percentage of CPU max_log_cpu_cost Maximum cost of dynamic logging max_snapshot_buffer_size The total size in bytes we allow max_snapshot_frame_count Max frame count we allow to breakpoint_expiration_sec Breakpoint \\ Dynamic log dynamic_log_quota_recovery_ms Time to pause dynamic log after no_check_certificate Disable certificate pinning when ignore_quota Disable all performance safe exceptions_monitoring_enabled Enable the capturing of the exceptions_monitoring_stdout Print all of the captured exceptions_report_percentage Process and report only this percentage of the exceptions thrown by the debuggee (A float between 0 and 1.0). exceptions_should_report_caught Report exceptions that were caught by the application as well as exceptions that remained uncaught exceptions_max_buffer_size The total size in bytes we allow to evaluate when capturing an exception (Same as snapshot) exceptions_stack_trace_frame_count Max frame count we allow to collect data from when capturing an excpetion (Same as snapshot) exit_after_report_all Agent empties queues before the application exits. enable_pii_redaction Enable personally identifiable information (PII) redaction in the agent's side (may have an effect on the application's performance) Command line arguments \u00b6 Agent configurations can be changed with a command line argument. The command line arguments should be inserted after the path of the agent and they should be separated by a comma. Synopsis \u00b6 -agentpath:<path-to-agent>/lightrun_agent.so=--<parameter>=<value>,--<parameter>=<value>... Agent parameters \u00b6 Following are the parameters that can be configured from the terminal. Parameter name Explanation Type hub_retry_delay_ms amount of time in milliseconds to sleep before retrying failed requests to Management server int32 debuggee_disabled_delay_ms amount of time in milliseconds to sleep before checking whether the debugger was enabled back int32 lightrun_extra_class_path additional directories and files containing resolvable binaries string lightrun_init_wait_time_ms timeout for wait iflightrun_wait_for_init is set int32 lightrun_wait_for_init ck application until first time of fetching breakpoints from the server bool enable_safe_caller allows any method without side effects in expressions bool extra_blocked_methods additional methods to block for testing purposes string extra_allowed_methods additional methods allowed for testing purposes string extra_whitelisted_classes internal names of additional classes to allow for testing purposes string expression_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while evaluating a single breakpoint expression int32 expression_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while evaluating a single breakpoint expression int32 pretty_printers_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while formatting some well known data structures int32 pretty_printers_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while formatting some well-known data structures int32 dynamic_log_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while evaluating all expressions in a single dynamic log statement int32 dynamic_log_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while evaluating all expressions in a single dynamic log int32 safe_caller_max_array_elements maximum allowed size of the array to copy or allocate in safe caller (copying or allocating larger arrays is considered to be too expensive MISSING int32 safe_caller_max_interpreter_stack_depth maximum stack depth that safe caller will allow int32 cdbg_description_suffix additional text to be appended to debug description string cdbg_class_files_cache_size cache size for class files used in safe method caller int32 cdbg_max_instructions_high use this value when ignoring quota int32 cdbg_max_stack_depth maximum number of stack frames to unwind int32 Example -agentpath:<pathtoagent>/lightrun_agent.so=--enable_safe_caller,--lightrun_init_wait_time_ms=999 View active agents \u00b6 Whenever an agent is running, you can view its details directly from the browser. Log in to your Lightrun account and navigate to Entities->Agents . The Agents screen loads, and appears similar to the following: The following table describes the data: Column Description Id The unique agent ID Host The host name of the server on which the agent is running ApiVersion The Lightrun API version currently implemented Pid The unique process identifier StartTime The time at which the agent was started UpdateTime The last time the agent fetched actions from the server PipeLogs The current configuration for log piping Labels Tags attached to this agent","title":"Agents"},{"location":"agentadmin-agentprops/#manage-agents","text":"Users with the Manager role can administer agents as follows: Configure agent properties View active agents and their details","title":"Manage agents"},{"location":"agentadmin-agentprops/#agent-properties","text":"You can configure the agent in order to calibrate its behavior by setting the properties in the agent.config file (per agent). The configuration file is located at the following path: <install_dir>/agent/agent.config You can set these properties from the: agent.config file Configure properties from the terminal","title":"Agent properties"},{"location":"agentadmin-agentprops/#agentconfig-file","text":"To manually set the properties, navigate to the config file on the relevant server: <install_dir>/agent/agent.config The following table describes the properties that you can customize: Parameter name Explanation max_dynamic_log_rate Number of log prints per second max_dynamic_log_bytes_rate Number of bytes per second (on log_stats_time_micros How often to log debugger max_condition_cost Maximum cost in percentage of CPU max_log_cpu_cost Maximum cost of dynamic logging max_snapshot_buffer_size The total size in bytes we allow max_snapshot_frame_count Max frame count we allow to breakpoint_expiration_sec Breakpoint \\ Dynamic log dynamic_log_quota_recovery_ms Time to pause dynamic log after no_check_certificate Disable certificate pinning when ignore_quota Disable all performance safe exceptions_monitoring_enabled Enable the capturing of the exceptions_monitoring_stdout Print all of the captured exceptions_report_percentage Process and report only this percentage of the exceptions thrown by the debuggee (A float between 0 and 1.0). exceptions_should_report_caught Report exceptions that were caught by the application as well as exceptions that remained uncaught exceptions_max_buffer_size The total size in bytes we allow to evaluate when capturing an exception (Same as snapshot) exceptions_stack_trace_frame_count Max frame count we allow to collect data from when capturing an excpetion (Same as snapshot) exit_after_report_all Agent empties queues before the application exits. enable_pii_redaction Enable personally identifiable information (PII) redaction in the agent's side (may have an effect on the application's performance)","title":"Agent.config file"},{"location":"agentadmin-agentprops/#cli","text":"Agent configurations can be changed with a command line argument. The command line arguments should be inserted after the path of the agent and they should be separated by a comma.","title":"Command line arguments"},{"location":"agentadmin-agentprops/#synopsis","text":"-agentpath:<path-to-agent>/lightrun_agent.so=--<parameter>=<value>,--<parameter>=<value>...","title":"Synopsis"},{"location":"agentadmin-agentprops/#agent-parameters","text":"Following are the parameters that can be configured from the terminal. Parameter name Explanation Type hub_retry_delay_ms amount of time in milliseconds to sleep before retrying failed requests to Management server int32 debuggee_disabled_delay_ms amount of time in milliseconds to sleep before checking whether the debugger was enabled back int32 lightrun_extra_class_path additional directories and files containing resolvable binaries string lightrun_init_wait_time_ms timeout for wait iflightrun_wait_for_init is set int32 lightrun_wait_for_init ck application until first time of fetching breakpoints from the server bool enable_safe_caller allows any method without side effects in expressions bool extra_blocked_methods additional methods to block for testing purposes string extra_allowed_methods additional methods allowed for testing purposes string extra_whitelisted_classes internal names of additional classes to allow for testing purposes string expression_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while evaluating a single breakpoint expression int32 expression_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while evaluating a single breakpoint expression int32 pretty_printers_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while formatting some well known data structures int32 pretty_printers_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while formatting some well-known data structures int32 dynamic_log_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while evaluating all expressions in a single dynamic log statement int32 dynamic_log_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while evaluating all expressions in a single dynamic log int32 safe_caller_max_array_elements maximum allowed size of the array to copy or allocate in safe caller (copying or allocating larger arrays is considered to be too expensive MISSING int32 safe_caller_max_interpreter_stack_depth maximum stack depth that safe caller will allow int32 cdbg_description_suffix additional text to be appended to debug description string cdbg_class_files_cache_size cache size for class files used in safe method caller int32 cdbg_max_instructions_high use this value when ignoring quota int32 cdbg_max_stack_depth maximum number of stack frames to unwind int32 Example -agentpath:<pathtoagent>/lightrun_agent.so=--enable_safe_caller,--lightrun_init_wait_time_ms=999","title":"Agent parameters"},{"location":"agentadmin-agentprops/#view-active-agents","text":"Whenever an agent is running, you can view its details directly from the browser. Log in to your Lightrun account and navigate to Entities->Agents . The Agents screen loads, and appears similar to the following: The following table describes the data: Column Description Id The unique agent ID Host The host name of the server on which the agent is running ApiVersion The Lightrun API version currently implemented Pid The unique process identifier StartTime The time at which the agent was started UpdateTime The last time the agent fetched actions from the server PipeLogs The current configuration for log piping Labels Tags attached to this agent","title":"View active agents"},{"location":"agentadmin-dlogs%202/","text":"Dynamic agent logs \u00b6 As your team works with Lightrun, they can dynamically insert logs to track information based on a variety of conditions. Once a log is inserted into the application, it is printed with the help of the java.util.logging logger. By printing into the standard logging framework, you can view the logs in the context of pre-existing log statements, which might provide further clues towards solving issues. At the same time, a developer might want to see the log output and search and filter directly from the IDE as they work, while other users might want to see the list of logs from the app in table format. Users can control the piping of the output from the plugin. Depending on configuration, all relevant information from any Lightrun actions that are added to the agents appears in the developers' consoles, in the app or in both. Dynamic log data \u00b6 Prerequisites To view logs from the app, first ensure you've configured piping from the plugin. Only data that has been configured to pipe to the app or to the app and the IDE appears in the app, meaning that if developers add actions with plugin piping only, that data does not appear here. You can customize log prints by adding the following to the command line: -Djava.util.logging.config.file=/path/to/app.properties Note For additional agent customizations, see Agent Administration To view log data from the app, log in from the browser and navigate to Entities->Agents Logs . The logs screen loads, and appears similar to the following: The following table describes the data available in this table: Column Description AgentId The unique identifier assigned to the agent by the system Timestamp The time at which the log was created Level The severity level of the log; this is configured per log when inserted in the code Log The formatted text configured when the log is inserted and any relevant errors Note For more information about logs, see Lightrun Actions .","title":"Agentadmin dlogs 2"},{"location":"agentadmin-dlogs%202/#dynamic-agent-logs","text":"As your team works with Lightrun, they can dynamically insert logs to track information based on a variety of conditions. Once a log is inserted into the application, it is printed with the help of the java.util.logging logger. By printing into the standard logging framework, you can view the logs in the context of pre-existing log statements, which might provide further clues towards solving issues. At the same time, a developer might want to see the log output and search and filter directly from the IDE as they work, while other users might want to see the list of logs from the app in table format. Users can control the piping of the output from the plugin. Depending on configuration, all relevant information from any Lightrun actions that are added to the agents appears in the developers' consoles, in the app or in both.","title":"Dynamic agent logs"},{"location":"agentadmin-dlogs%202/#dynamic-log-data","text":"Prerequisites To view logs from the app, first ensure you've configured piping from the plugin. Only data that has been configured to pipe to the app or to the app and the IDE appears in the app, meaning that if developers add actions with plugin piping only, that data does not appear here. You can customize log prints by adding the following to the command line: -Djava.util.logging.config.file=/path/to/app.properties Note For additional agent customizations, see Agent Administration To view log data from the app, log in from the browser and navigate to Entities->Agents Logs . The logs screen loads, and appears similar to the following: The following table describes the data available in this table: Column Description AgentId The unique identifier assigned to the agent by the system Timestamp The time at which the log was created Level The severity level of the log; this is configured per log when inserted in the code Log The formatted text configured when the log is inserted and any relevant errors Note For more information about logs, see Lightrun Actions .","title":"Dynamic log data"},{"location":"agentadmin-dlogs/","text":"Dynamic agent logs \u00b6 As your team works with Lightrun, they can dynamically insert logs to track information based on a variety of conditions. Once a log is inserted into the application, it is printed with the help of the java.util.logging logger. By printing into the standard logging framework, you can view the logs in the context of pre-existing log statements, which might provide further clues towards solving issues. At the same time, a developer might want to see the log output and search and filter directly from the IDE as they work, while other users might want to see the list of logs from the app in table format. Users can control the piping of the output from the plugin. Depending on configuration, all relevant information from any Lightrun actions that are added to the agents appears in the developers' consoles, in the app or in both. Dynamic log data \u00b6 Prerequisites To view logs from the app, first ensure you've configured piping from the plugin. Only data that has been configured to pipe to the app or to the app and the IDE appears in the app, meaning that if developers add actions with plugin piping only, that data does not appear here. You can customize log prints by adding the following to the command line: -Djava.util.logging.config.file=/path/to/app.properties Note For additional agent customizations, see Agent Administration To view log data from the app, log in from the browser and navigate to Entities->Agents Logs . The logs screen loads, and appears similar to the following: The following table describes the data available in this table: Column Description AgentId The unique identifier assigned to the agent by the system Timestamp The time at which the log was created Level The severity level of the log; this is configured per log when inserted in the code Log The formatted text configured when the log is inserted and any relevant errors Note For more information about logs, see Lightrun Actions .","title":"Agent Logs"},{"location":"agentadmin-dlogs/#dynamic-agent-logs","text":"As your team works with Lightrun, they can dynamically insert logs to track information based on a variety of conditions. Once a log is inserted into the application, it is printed with the help of the java.util.logging logger. By printing into the standard logging framework, you can view the logs in the context of pre-existing log statements, which might provide further clues towards solving issues. At the same time, a developer might want to see the log output and search and filter directly from the IDE as they work, while other users might want to see the list of logs from the app in table format. Users can control the piping of the output from the plugin. Depending on configuration, all relevant information from any Lightrun actions that are added to the agents appears in the developers' consoles, in the app or in both.","title":"Dynamic agent logs"},{"location":"agentadmin-dlogs/#dynamic-log-data","text":"Prerequisites To view logs from the app, first ensure you've configured piping from the plugin. Only data that has been configured to pipe to the app or to the app and the IDE appears in the app, meaning that if developers add actions with plugin piping only, that data does not appear here. You can customize log prints by adding the following to the command line: -Djava.util.logging.config.file=/path/to/app.properties Note For additional agent customizations, see Agent Administration To view log data from the app, log in from the browser and navigate to Entities->Agents Logs . The logs screen loads, and appears similar to the following: The following table describes the data available in this table: Column Description AgentId The unique identifier assigned to the agent by the system Timestamp The time at which the log was created Level The severity level of the log; this is configured per log when inserted in the code Log The formatted text configured when the log is inserted and any relevant errors Note For more information about logs, see Lightrun Actions .","title":"Dynamic log data"},{"location":"agentadmin-tagging%202/","text":"Manage agent tags \u00b6 Tagging enables you to group agents together by using a meaningful name, typically based on common functionality. For example, you can use tags to identify locations and purposes of each agent: Database Servers, Staging, and so forth. Additionally, you can apply multiple tags in any combination to each agent. By applying multiple tags, you can bind actions to an agent even before the agent has been launched, and you can apply actions to servers across sections. Once an action is bound to a tag, it is implicitly added to all of the agents that have that tag. Example Label a tag called Integration and set integration tests to execute with the Integration tag in order to debug an integration test failure. Out-of-the-box, agents have a single Production tag. Users with the Manager role can: Manage tags View all tags View tags and their details directly from the CLI Managing tags \u00b6 Managers can label and apply tags. Note Manager role is required. To label and apply a tag to an agent From the relevant server where the agent is installed, go to the agent.metadata.json file and open it. Insert tag names within the tags object (which should be nested in the registration object): { \"registration\" : { \"tags\" : [ { \"name\" : \"Tag1\" }, { \"name\" : \"Tag2\" }, { \"name\" : \"Tag3\" } ] } } For example, the following JSON applies the tags ProductionsAgents, JDK1.8 and Ubuntu16 to the relevant agent: { \"registration\" : { \"tags\" : [ { \"name\" : \"Productions\" }, { \"name\" : \"Staging\" }, { \"name\" : \"Dev\" } ] } } Alternatively, tags can be applied to the agent directly from the command line using the following script: java -Dlightrun.registration.tags = myTag -agentpath:/path/to/agent/lightrun_agent.so RestOfTheArgumentsHere Save the changes and close the file. Restart the agent. Important Changes to this file aren't detected until the agent is restarted. To view all tag details from the app Log in to your Lightrun account and navigate to Entities->Tags . The Tags screen loads and appears similar to the following: The details displayed for tags are as follows: Column Description Name The name of the tag. Actions The list of actions currently attached to this tag. Agents The list of agents to which this tag has been associated.","title":"Manage agent tags"},{"location":"agentadmin-tagging%202/#manage-agent-tags","text":"Tagging enables you to group agents together by using a meaningful name, typically based on common functionality. For example, you can use tags to identify locations and purposes of each agent: Database Servers, Staging, and so forth. Additionally, you can apply multiple tags in any combination to each agent. By applying multiple tags, you can bind actions to an agent even before the agent has been launched, and you can apply actions to servers across sections. Once an action is bound to a tag, it is implicitly added to all of the agents that have that tag. Example Label a tag called Integration and set integration tests to execute with the Integration tag in order to debug an integration test failure. Out-of-the-box, agents have a single Production tag. Users with the Manager role can: Manage tags View all tags View tags and their details directly from the CLI","title":"Manage agent tags"},{"location":"agentadmin-tagging%202/#managing-tags","text":"Managers can label and apply tags. Note Manager role is required.","title":"Managing tags"},{"location":"agentadmin-tagging/","text":"Manage agent tags \u00b6 Tagging enables you to group agents together by using a meaningful name, typically based on common functionality. For example, you can use tags to identify locations and purposes of each agent: Database Servers, Staging, and so forth. Additionally, you can apply multiple tags in any combination to each agent. By applying multiple tags, you can bind actions to an agent even before the agent has been launched, and you can apply actions to servers across sections. Once an action is bound to a tag, it is implicitly added to all of the agents that have that tag. Example Label a tag called Integration and set integration tests to execute with the Integration tag in order to debug an integration test failure. Out-of-the-box, agents have a single Production tag. Users with the Manager role can: Manage tags View all tags View tags and their details directly from the CLI Managing tags \u00b6 Managers can label and apply tags. Note Manager role is required. To label and apply a tag to an agent From the relevant server where the agent is installed, go to the agent.metadata.json file and open it. Insert tag names within the tags object (which should be nested in the registration object): { \"registration\" : { \"tags\" : [ { \"name\" : \"Tag1\" }, { \"name\" : \"Tag2\" }, { \"name\" : \"Tag3\" } ] } } For example, the following JSON applies the tags ProductionsAgents, JDK1.8 and Ubuntu16 to the relevant agent: { \"registration\" : { \"tags\" : [ { \"name\" : \"Productions\" }, { \"name\" : \"Staging\" }, { \"name\" : \"Dev\" } ] } } Alternatively, tags can be applied to the agent directly from the command line using the following script: java -Dlightrun.registration.tags = myTag -agentpath:/path/to/agent/lightrun_agent.so RestOfTheArgumentsHere Save the changes and close the file. Restart the agent. Important Changes to this file aren't detected until the agent is restarted. To view all tag details from the app Log in to your Lightrun account and navigate to Entities->Tags . The Tags screen loads and appears similar to the following: The details displayed for tags are as follows: Column Description Name The name of the tag. Actions The list of actions currently attached to this tag. Agents The list of agents to which this tag has been associated.","title":"Tags"},{"location":"agentadmin-tagging/#manage-agent-tags","text":"Tagging enables you to group agents together by using a meaningful name, typically based on common functionality. For example, you can use tags to identify locations and purposes of each agent: Database Servers, Staging, and so forth. Additionally, you can apply multiple tags in any combination to each agent. By applying multiple tags, you can bind actions to an agent even before the agent has been launched, and you can apply actions to servers across sections. Once an action is bound to a tag, it is implicitly added to all of the agents that have that tag. Example Label a tag called Integration and set integration tests to execute with the Integration tag in order to debug an integration test failure. Out-of-the-box, agents have a single Production tag. Users with the Manager role can: Manage tags View all tags View tags and their details directly from the CLI","title":"Manage agent tags"},{"location":"agentadmin-tagging/#managing-tags","text":"Managers can label and apply tags. Note Manager role is required.","title":"Managing tags"},{"location":"agentadmin/","text":"Agent administration: overview \u00b6 It's best to calibrate agent configurations and related settings in order to maximize Lightrun functionality. Once you add the agent to your app , you can: Customize Maven and Gradle configurations to maximize the data delivered by Lightrun Customize agent configuration - by adjusting any of the available multiple properties Manage tags - in order to group agents together based on meaningful taxonomies Manage services - service configurations Manage data security - blocklisting and data redaction","title":"Overview"},{"location":"agentadmin/#agent-administration-overview","text":"It's best to calibrate agent configurations and related settings in order to maximize Lightrun functionality. Once you add the agent to your app , you can: Customize Maven and Gradle configurations to maximize the data delivered by Lightrun Customize agent configuration - by adjusting any of the available multiple properties Manage tags - in order to group agents together based on meaningful taxonomies Manage services - service configurations Manage data security - blocklisting and data redaction","title":"Agent administration: overview"},{"location":"alerts%202/","text":"Lightrun can send you alerts to inform you about different exceptions that are thrown in your applications. You can configure alerts based on: weekly or daily notifications conditions: every time there is a new error errors that occur frequently errors whose frequency has increased over time To configure these alerts From a browser, go to your Lightrun account. Navigate to Exceptions=>Email notifications from the menu bar. The Email notifications window opens: To specify specific recipients for the configured notifications, enter a comma separated list of relevant addresses in the Email Recipients section similar to the following: Enable daily and weekly notifications if relevant. Scroll down to the Get Notifications section: Enable the relevant options and configure their specific conditions as follows: A new error occurs - no special conditions Error occurs frequently - the notification is to be sent once the error occurs more than the number of times indicated in the Over field over the course of time indicated in the times in field. Frequency of specific exception increased - the notification is to be sent when the frequency of the error increases by X amount over the last Y amount of time. Scroll to the bottom and click Save .","title":"Alerts 2"},{"location":"alerts/","text":"Lightrun can send you alerts to inform you about different exceptions that are thrown in your applications. You can configure alerts based on: weekly or daily notifications conditions: every time there is a new error errors that occur frequently errors whose frequency has increased over time To configure these alerts From a browser, go to your Lightrun account. Navigate to Exceptions=>Email notifications from the menu bar. The Email notifications window opens: To specify specific recipients for the configured notifications, enter a comma separated list of relevant addresses in the Email Recipients section similar to the following: Enable daily and weekly notifications if relevant. Scroll down to the Get Notifications section: Enable the relevant options and configure their specific conditions as follows: A new error occurs - no special conditions Error occurs frequently - the notification is to be sent once the error occurs more than the number of times indicated in the Over field over the course of time indicated in the times in field. Frequency of specific exception increased - the notification is to be sent when the frequency of the error increases by X amount over the last Y amount of time. Scroll to the bottom and click Save .","title":"Alerting"},{"location":"audit-use%202/","text":"Audit system use \u00b6 Lightrun maintains an ongoing log of all use of the system, both directly from the app, and through any plugins. You can view the complete activity list, and filter by date, from the Audits area in the app. The audit logs display: date of activity user who performed the activity, including automated system actions the activity itself To view system activity Log in to your Lightrun account. Go to the Managers menu and select Audits . The Audits list loads. Use the from and to fields to filter by date and the arrows at the bottom to navigate by page.","title":"Audit system use"},{"location":"audit-use%202/#audit-system-use","text":"Lightrun maintains an ongoing log of all use of the system, both directly from the app, and through any plugins. You can view the complete activity list, and filter by date, from the Audits area in the app. The audit logs display: date of activity user who performed the activity, including automated system actions the activity itself","title":"Audit system use"},{"location":"audit-use/","text":"Audit system use \u00b6 Lightrun maintains an ongoing log of all use of the system, both directly from the app, and through any plugins. You can view the complete activity list, and filter by date, from the Audits area in the app. The audit logs display: date of activity user who performed the activity, including automated system actions the activity itself To view system activity Log in to your Lightrun account. Go to the Managers menu and select Audits . The Audits list loads. Use the from and to fields to filter by date and the arrows at the bottom to navigate by page.","title":"Audit System Use"},{"location":"audit-use/#audit-system-use","text":"Lightrun maintains an ongoing log of all use of the system, both directly from the app, and through any plugins. You can view the complete activity list, and filter by date, from the Audits area in the app. The audit logs display: date of activity user who performed the activity, including automated system actions the activity itself","title":"Audit system use"},{"location":"cli%202/","text":"The users' complete CLI guide and reference \u00b6 Here you can find: Installation details Usage of command commands A complete reference for all commands, options and parameters Important If the file name and line number don't match the bytecode version of the app, Lightrun will behave inconsistently and will most likely fail. Set up your CLI \u00b6 Install the CLI Authenticate the CLI To use the Lightrun CLI Prerequisites Sign up for your Lightrun account before getting started. The Lightrun CLI requires Java be installed. Log in to your Lightrun account from the browser and navigate to Getting Started . Download 'lightrunc.jar' from the landing page from the Command Line Tool section. Open the terminal and navigate to where you downloaded the file. Authenticate your CLI with your Lightrun account: Copy and run the first command line that appears in your browser. Example java -jar lightrunc.jar server-url https://2147483647.lightrun.com/company/acme Copy and run the second command line that appears in your browser. Example java -jar lightrunc.jar login myaccount@acme.com To run any Lightrun command, add the following prefix: java -jar lightrunc.jar Authenticate the CLI with Lightrun To use the CLI, first authenticate with your Lightrun account. You can authenticate directly from within the CLI or choose to redirect to the browser. lightrunc.jar login <username/email address/password> Example Log in directly from the CLI: java -jar lightrunc.jar login -email jane.doe@example.com -password secretpassword Example Log in with a redirect to your browser: java -jar lightrunc.jar login myaccount@acme.com Usage \u00b6 Tip All agent-related CLI commands can be used with tags instead of agent IDs. Use the syntax tag:TagName and replace the word TagName with the appropriate tag. For example: `tag:Production` Note Tag names are case sensitive. Help \u00b6 Run lightrunc.jar help to list all available sub-commands and options. Insert a conditional log \u00b6 Create and print logs based on specified conditions. Output and examples Example lightrunc.jar clog 5c6e9cdef4e833279ee286a1 Main.java:10 \"i % 10 == 0\" \"Array size {arr.length}\" The log is printed when the expression i % 10 == 0 evaluates to true . Tip Read more here . Once you no longer need the log, remove it with the rm command Insert a log \u00b6 Description Use the log command to insert a new log. This command adds a new log in the first agent. Output and examples Example lightrunc.jar log 0 Main.java:10 \"Array size {arr.length}\" The log prints \\\"Array size \\\" followed by the result of the expression arr.length . This only works with the first agent has a class compiled from Main.java and has a variable called arr defined in line 10. Tip You can also choose to add the log based on a tag instead of a specific agent. Example lightrunc.jar log tag:TagName Main.java:10 \"Array size {arr.length}\" Tip Read more here for log command details. List agents and actions \u00b6 List all agents along with the actions associated to each. Output and examples Example Single agent, no actions: 0 : ID 28a27003-ba45-4848-9de8-287aab7a026b HOST erezk-Latitude-7400 PID 11835 UPDATE 09/03/2021, 10:20 TAGS [Production] Single agent, single action: 0 : ID 28a27003-ba45-4848-9de8-287aab7a026b HOST erezk-Latitude-7400 PID 11835 UPDATE 09/03/2021, 10:29 TAGS [Production] ACTION 42c6b34b-7bdc-4d17-9c0f-63215b8140c7 FILE PrimeMain.java LINE 14 TYPE LOG {num} is a prime number Another example: 0 : ID 28a27003-ba45-4848-9de8-287aab7a026b HOST erezk-Latitude-7400 PID 11835 UPDATE 09/03/2021, 10:32 TAGS [Production] ACTION 1289bd5e-da09-4669-ad6e-278ace71ba9a FILE PrimeMain.java LINE 14 TYPE COUNTER ACTION 42c6b34b-7bdc-4d17-9c0f-63215b8140c7 FILE PrimeMain.java LINE 14 TYPE LOG {num} is a prime number 1 : ID dcc7543f-e8c4-4e4d-9481-492ee1feb92e HOST erezk-Latitude-7400 PID 12386 UPDATE 09/03/2021, 10:32 TAGS [Production] Tip Read more here for log command details. List all tags and actions \u00b6 List all tags and the actions associated to each. Output and examples lightrunc.jar list-tags might result in output similar to this: Here's one output example: Tag: Production ACTION 7e743edb-807f-41ef-9061-8fb1619d1239 FILE PrimeMain LINE 14 TYPE LOG {num} is a prime number Example lightrunc.jar list-tags might result in output similar to this: Tag: Production ACTION 7e743edb-807f-41ef-9061-8fb1619d1239 FILE PrimeMain LINE 14 TYPE LOG {num} is a prime number Tip Read more here for log command details. List actions by agent \u00b6 Get a complete list of all of the actions associated with the specified agent, based on agent ID or by using an offset. Output and examples Example Use the offset 0 to indicate the list of actions should be returned for the first agent. lightrunc.jar list actions 0 Alternatively, you can request the full list of actions for agent ID 5c6e9cdef4e833279ee286a1: lightrunc.jar list actions 5c6e9cdef4e833279ee286a1 Tip Read more here for details. Remove command \u00b6 This removes the specified action based on the specified agent (by offset or by ID) or tag. Output and examples Example The following removes the first action for the first agent: lightrun rm 0 0 This command returns: The action was removed. Tip Read more here for details. The complete reference \u00b6 add-certificate \u00b6 Description You can assign multiple certificates to the same server. Each subdomain can also have its own verification, increasing the security of the site by decentralizing its reliance on a single certificate. Synopsis lightrunc.jar add-certificate <Certificate> Options Option Description Certificate sha256 of the public key of the certificate Output and examples Successfully added certificate. client-piping \u00b6 Description Logs, counters and TicTocs for this agent ID will be piped to the backend and hidden in the server. Logs are available with the print-logs command. Synopsis lightrunc.jar client-piping <Agent-ID> Options Option Description Agent-ID Enter the ID of the relevant agent. Output and examples Example The adds piping for actions on the agent by ID: lightrunc.jar client-piping 9cd7d1cd-bbd3-4ebb-ae5d-af068006f388 Returns the following: Log tracking in progress, use print-logs to view the output clog \u00b6 Description Insert a conditional log for the given agent in the given file and line with the format as configured. Synopsis lightrunc.jar clog <AgentId> <Filename>:<LineNumber> <Format> [-condition <Condition>] [-expireSec <ExpireSec>] [-ignoreQuota] Options Option Description Agent-ID Enter the ID of the relevant agent. FileName The name of the file containing the code in which to add the metric, including the extension. For example: MyJavaFile.java LineNumber The line number within the code file. Format The text to appear in your logs for this metric. Condition Any valid Java expression that does not change the state of the code. ExpireSec The amount of time for which this log should run. ignoreQuota Only users with the Ignore Quota role can use this option. When set, the quota limit configured for running Lightrun actions is overriden and this log will continue to run even if it reaches the quota. Output and examples Example Run the following command to insert a log: java -jar lightrunc.jar clog 5c6e9cdef4e833279ee286a1 Main.java:10 \"Array size {arr.length}\" -condition \"i % 10 == 0\"\" The log is printed when the expression i % 10 == 0 evaluates to true. counter \u00b6 Description Insert a counter to count the number of times each thread hits the requested line based on the options you configure. Synopsis lightrunc.jar counter <AgentId> <FileName>:<LineNumber> <CounterName> [-condition <Condition>] [-expireSec <ExpireSec>] [-aggregateBy <Aggregate By Prefix>] [ignoreQuota] Options Option Description Agent-ID Enter the ID of the relevant agent. FileName The name of the file containing the code in which to add the metric, including the extension. For example: MyJavaFile.java LineNumber The line number within the code file. CounterName The name of the counter - the text to appear in your logs for this metric. Condition Any valid Java expression that does not change the state of the code. ExpireSec The amount of time for which this counter should run. aggregateBy Collect and aggregate data for the specified string only. ignoreQuota Only users with the Ignore Quota role can use this option. When set, the quota limit configured for running Lightrun actions is overriden and this counter will continue to run even if it reaches the quota. Output and examples Example java -jar lightrunc counter e178578f-14da-476f-a084-bc460d6ec2b0 PrimeMain.java:20 myCounter Results in: The counter was submitted customMetric \u00b6 Description Build a custom metric based on specified expressions and values. Synopsis java -jar lightrunc.jar customMetric <AgentId> <FileName>:<LineNumber> <MetricName> <MetricExpression> [-condition <Condition>] [-expireSec <ExpireSec>] [-ignoreQuota] Options Option Description ignoreQuota Only administrators with the Ignore Quota role can use this option. When set, the quota limit configured for running Lightrun actions is overriden and this custom metric will continue to run even if it reaches the quota. The quota controls use of CPU, Networking, Memory, excessively long strings, too many instructions printing out, protection from infinite loops and the like Agent-ID Enter the ID of the relevant agent. FileName The name of the file containing the code in which to add the metric, including the extension. For example: MyJavaFile.java LineNumber The line number within the code file. MetricName Assign a unique name to this metric. MetricExpression Configure any valid Java expression that does not change the state of the code. Condition Any valid Java expression that does not change the state of the code. ExpireSec Configure the duration that this metric should run in seconds. Output and examples Example The following creates a custom metric called MyPrimeMetric, where the expression for the metric is num, and the condition is \"num>3\": java -jar lightrunc.jar customMetric 0 PrimeMain.java:14 MyPrimeMetric num -condition \"num>3\" Returns the following: The custom metric was submitted Once added, the metric returns relevant data, similar to the following: INFO: 10 Mar 2021, 11:59:26 CustomMetric Stats: { \"MyPrimeMetric\" : {\"count\" : 55106,\"max\" : 675526339,\"mean\" : 6.731275234790297E8,\"min\" : 629652109,\"p50\" : 6.73885867E8,\"p75\" : 6.74822641E8,\"p95\" : 6.75395141E8,\"p98\" : 6.75455779E8,\"p99\" : 6.75491381E8,\"p999\" : 6.75526339E8,\"stddev\" : 2424070.6627122667 } } Note Always use quotes when setting a condition (\"num>3\") in order to avoid shell output redirection to file descriptor 3. detach \u00b6 Description When experiencing any issues on the server, you might want to disable Lightrun in order to rule it out when troubleshooting. The detach command disables all Lightrun agents on the specified server when turned \"on\". When you turn it off, agents resume. Synopsis java -jar lightrunc.jar detach on/off Options None Output and examples Example java -jar lightrunc.jar detach on Agents are now detached java -jar lightrunc.jar detach off Agents are now re-enabled disable-pinning-status \u00b6 Description Disable certificate pinning. Synopsis lightrunc.jar disable-certificate-pinning Options None Output and examples Certifcate pinning is now disabled. disable-piping \u00b6 Description This disables piping for logs on the agent that is indicated by ID. Synopsis lightrunc.jar disable-piping <Agent-ID> Options Option Description Agent-ID Enter the ID of the relevant agent. Output and examples Example lightrunc.jar disable-piping 9cd7d1cd-bbd3-4ebb-ae5d-af068006f388 Returns the following: Tracking is disabled. enable-piping \u00b6 Description Enable piping logs, counters and TicTocs to the backend for this agent so that you can view the output directly from the app. You can then also view the data from the CLI using the print-logs command; actions are printed in the server. Synopsis lightrunc.jar enable-piping <Agent-ID> Options Option Description Agent-ID Enter the ID of the relevant agent. Output and examples Example lightrunc.jar enable-piping 9cd7d1cd-bbd3-4ebb-ae5d-af068006f388 Returns the following: Log tracking in progress, use print-logs to view the output enable-pinning-status \u00b6 Description Enables certificate pinning. Synopsis lightrunc.jar enable-pinning-status Options None Output and examples Certifcate pinning is now enabled. get-pinning-status \u00b6 Description Returns the pinning status: enabled, or disabled. Synopsis lightrunc.jar get-pinning-status Options None Output and examples Example One of the following might be returned: Pinning status is disabled Or Pinning status is enabled list-agents \u00b6 Description Lists all agents and the associated actions for each. Synopsis lightrunc.jar list-agents Options None. Output and examples Example Something similar to the following might be printed out: 0 : ID e93fccd1-9f76-46ae-b703-056e25b8092e HOST ip-172-31-50-47 PID 14507 UPDATE 1 /21/21, 9 :16 AM ACTION 4261257f-fbc0-4fc5-8fe7-e8dbf3944eb7 FILE PrimeMainMR.java LINE 10 TYPE TICTOC ACTION 99e8e7b0-9248-4d89-8f6f-2d3c5fa9aebc FILE PrimeMainMR.java LINE 15 TYPE LOG Hello world { java expression } gg ACTION b383e31b-8749-419f-a492-85a919cc0da8 FILE PrimeMainMR.java LINE 22 TYPE TICTOC ACTION c3f863e6-ba7d-4480-83c0-ef4a278ecddb FILE PrimeMainMR.java LINE 15 TYPE COUNTER ACTION e5790c99-f763-4d26-8d3f-2714c89c0fad FILE PrimeMainMR.java LINE 10 TYPE BREAKPOINT 1 : ID f93fccd1-9f75-46ae-b703-456e25b8092e HOST ip-172-31-50-47 PID 14508 UPDATE 1 /21/21, 9 :16 AM ACTION 5261257f-fbc0-4fc5-8fe7-e8dbf3944eb7 FILE PrimeMainMR.java LINE 10 TYPE TICTOC ACTION 49e8e7b0-9248-4d89-8f6f-2d3c5fa9aebc FILE PrimeMainMR.java LINE 15 TYPE LOG Hello world { java expression } gg ACTION g383e31b-8749-419f-a492-85a919cc0da8 FILE PrimeMainMR.java LINE 22 TYPE TICTOC ACTION a3f863e6-ba7d-4480-83c0-ef4a278ecddb FILE PrimeMainMR.java LINE 15 TYPE BREAKPOINT ACTION l5790c99-f763-4d26-8d3f-2714c89c0fad FILE PrimeMainMR.java LINE 10 TYPE BREAKPOINT list-agents-by-tag \u00b6 Description Lists all agents and the associated actions for the specified tag. Synopsis lightrunc.jar list-agents-by-tag <Tag> Options Option Description Tag The name of the relevant tag. For example, Production. Output and examples Example list-agents-by-tag Production might result in output similar to this: 0 : ID 336bfe2e-1ddd-477d-b68d-6ea46657e711 HOST ip-172-31-50-47 PID 15073 UPDATE 1 /20/21, 6 :53 PM ACTION 4261257f-fbc0-4fc5-8fe7-e8dbf3944eb7 FILE PrimeMainMR.java LINE 10 TYPE TICTOC ACTION 99e8e7b0-9248-4d89-8f6f-2d3c5fa9aebc FILE PrimeMainMR.java LINE 15 TYPE LOG Hello world { java expression } gg ACTION b383e31b-8749-419f-a492-85a919cc0da8 FILE PrimeMainMR.java LINE 22 TYPE TICTOC ACTION c3f863e6-ba7d-4480-83c0-ef4a278ecddb FILE PrimeMainMR.java LINE 15 TYPE COUNTER ACTION e5790c99-f763-4d26-8d3f-2714c89c0fad FILE PrimeMainMR.java LINE 10 TYPE BREAKPOINT ACTION f0298e0f-f7ac-491d-b3d2-2eddf671a465 FILE PrimeMainMR.java LINE 8 TYPE BREAKPOINT ERROR No code found at line 8 list-tags \u00b6 Description List the all tags and the actions associated with each. Synopsis lightrunc.jar list-tags Options None Output and examples Example The output might be similar to this: Tag: Production ACTION 4f6f8e67-2252-4093-bcf2-9a5254f074ef FILE PrimeMainMR.java LINE 50 TYPE LOG Hello world { java expression } ACTION 99e8e7b0-9248-4d89-8f6f-2d3c5fa9aebc FILE PrimeMainMR.java LINE 15 TYPE LOG Hello world { java expression } gg ACTION e5790c99-f763-4d26-8d3f-2714c89c0fad FILE PrimeMainMR.java LINE 10 TYPE BREAKPOINT Tag: Staging ACTION b383e31b-8749-419f-a492-85a919cc0da8 FILE PrimeMainMR.java LINE 22 TYPE TICTOC ACTION c3f863e6-ba7d-4480-83c0-ef4a278ecddb FILE PrimeMainMR.java LINE 15 TYPE COUNTER list-actions \u00b6 Description List all actions for the specified agent, including current status, all configurations and details. Synopsis lightrunc.jar list-actions <AgentId> Options Option Description Agent-ID Enter the ID of the relevant agent. Output and examples Example Run the following command: lightrunc.jar list-actions e93fccd1-9f76-46ae-b703-056e25b8092e The output might be similar to this: class ActionDTO { actionType: LOG agentId: null agentIdToErrorMsg: { a326cad4-e195-4eaa-8b09-efb2d832c97f = The action has expired, System = The action has expired } captureActionExtensionDTO: null column: 0 condition: createTime: 2021 -01-02T11:03:05.426Z disabled: false expirationSeconds: 3600 filename: PrimeMainMR.java id: 99e8e7b0-9248-4d89-8f6f-2d3c5fa9aebc ignoreQuota: false line: 15 logActionExtensionDTO: class LogActionExtensionDTO { args: [ java expression ] format: Hello world $0 gg logLevel: INFO } maxHitCount: null namedActionExtensionDTO: null ownerUser: my-manager-account pictureURL: https://www.gravatar.com/avatar/ff86a69f127b0ac9d07e17a2f177c162?d = mp rawCommandActionExtensionDTO: null setValueActionExtensionDTO: null sourceVersion: null sourceVersionStatusAgentIds: {} status: ERROR tagName: Production ticTocActionExtensionDTO: null updateTime: 2021 -01-02T12:03:23.086Z } Example Sample output for an error: class ActionDTO { actionType: LOG agentId: null agentIdToErrorMsg: {ebe33150-d9a3-4728-aec4-e6539966ed39=Unsupported file extension, 533a064e-a0a6-4be2-a855-9c3ae803f9cc=Unsupported file extension} captureActionExtensionDTO: null column: 0 condition: null createTime: 2021-03-09T12:40:35.718059Z disabled: false expirationSeconds: 3600 filename: PrimeMain id: 7e743edb-807f-41ef-9061-8fb1619d1239 ignoreQuota: false line: 14 logActionExtensionDTO: class LogActionExtensionDTO { args: [num] format: $0 is a prime number logLevel: INFO } maxHitCount: null namedActionExtensionDTO: null ownerUser: erezk@lightrun.com pictureURL: https://www.gravatar.com/avatar/0ebb0090f7f395c2470e472655c08f40?d=mp rawCommandActionExtensionDTO: null setValueActionExtensionDTO: null sourceVersion: null sourceVersionStatusAgentIds: {} status: ERROR tagName: Production ticTocActionExtensionDTO: null updateTime: 2021-03-09T12:40:35.718831Z } listen \u00b6 Description Listens to agent/log registration events and prints them out. Synopsis lightrunc.jar listen Options None Output and examples Connecting to server Listening for events Example Once you run the listen command, events from the server are printed as they occur and appear similar to the following: Connecting to server Listening for events {\"eventType\":\"CONNECTED\",\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}} {\"eventType\":\"SESSION_DETAILS\",\"metadata\":{\"sessionId\":\"ecf32a4b-43da-ea93-bce0-18ef235e962a\"},\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}} {\"agentDisplayName\":\"\",\"eventType\":\"AUTHENTICATED\",\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}} {\"actionType\":\"LOG\",\"agentDisplayName\":\"erezk-Latitude-7400 (pid 30554)\",\"agentId\":\"f4b0d260-ec00-4459-a9ed-b8ef7d4ffcf7\",\"eventType\":\"LOG_DATA_ADDED\",\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}} {\"actionType\":\"LOG\",\"agentDisplayName\":\"erezk-Latitude-7400 (pid 30554)\",\"agentId\":\"f4b0d260-ec00-4459-a9ed-b8ef7d4ffcf7\",\"eventType\":\"LOG_DATA_ADDED\",\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}} {\"actionType\":\"LOG\",\"agentDisplayName\":\"erezk-Latitude-7400 (pid 30554)\",\"agentId\":\"f4b0d260-ec00-4459-a9ed-b8ef7d4ffcf7\",\"eventType\":\"LOG_DATA_ADDED\",\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}} {\"actionType\":\"LOG\",\"agentDisplayName\":\"erezk-Latitude-7400 (pid 30554)\",\"agentId\":\"f4b0d260-ec00-4459-a9ed-b8ef7d4ffcf7\",\"eventType\":\"LOG_DATA_ADDED\",\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}} {\"actionType\":\"LOG\",\"agentDisplayName\":\"erezk-Latitude-7400 (pid 30554)\",\"agentId\":\"f4b0d260-ec00-4459-a9ed-b8ef7d4ffcf7\",\"eventType\":\"LOG_DATA_ADDED\",\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}} log \u00b6 Description Insert a log for the given agent, at the given file and line with the format (text of the log). Inserted logs timeout after 1 hour by default, unless configured otherwise. Synopsis lightrunc.jar log <AgentId> <Filename>:<LineNumber> <Format> -expireSec <ExpireSec> [-ignoreQuota] Options Option Description Agent-ID The ID of the relevant agent. Filename The name of the Java file, including the suffix (.java) LineNumber The number of the line of code in the referenced file. Format The text to appear in your logs. expireSec The amount of time for which this log should run. ignoreQuota Only users with the Ignore Quota role can use this option. When set, the quota limit configured for running Lightrun actions is overriden and this log will continue to run even if it reaches the quota. Output and examples Example Run the following command to insert a log: lightrunc.jar log c02e80f9-55cf-4452-a17e-a3bf4105e4b0 PrimeMainMR.java:51 -expireSec 360 The output might be similar to this: The log was submitted If you run list-actions , the following might output for this action now: class ActionDTO { actionType: LOG agentId: c02e80f9-55cf-4452-a17e-a3bf4105e4b0 agentIdToErrorMsg: {} captureActionExtensionDTO: null column: 0 condition: null createTime: 2021-01-25T14:18:15.359Z disabled: false expirationSeconds: 360 filename: PrimeMainMR.java id: 302bc748-2f07-43b3-b0d9-443376a413f7 ignoreQuota: false line: 51 logActionExtensionDTO: class LogActionExtensionDTO { args: [] format: IfStatement logLevel: INFO } maxHitCount: null namedActionExtensionDTO: null ownerUser: my-manager-account pictureURL: https://www.gravatar.com/avatar/ff86a69f127b0ac9d07e17a2f177c162?d=mp rawCommandActionExtensionDTO: null setValueActionExtensionDTO: null sourceVersion: null sourceVersionStatusAgentIds: {} status: ACCEPTED tagName: null ticTocActionExtensionDTO: null updateTime: 2021-01-25T14:18:15.381Z } logout \u00b6 Description Logs out the currently logged in user from the Lightrun account. Synopsis lightrunc.jar logout Options None Output and examples Logged out successfully! or User already logged out. print-logs \u00b6 Description Prints all data in the logs currently for the specified action on the specified agent. Limited to 1000 of the most recent results. Optionally, you can specify the range via the 'range' argument. Synopsis lightrunc.jar print-logs <AgentId> [<ActionId>] [-range <StartTimestamp-EndTimestamp (milliseconds)>] Options Option Description Agent-ID Enter the ID of the relevant agent. Output and examples Missing options for ActionId, range Output and examples - looks like a bad header/section Example An example with ranged timestamp: java -jar lightrunc.jar print-logs 0 0 -range 1615391135824-1615391135924 INFO: LOGPOINT: 197581639 is a prime number INFO: LOGPOINT: 197581649 is a prime number INFO: LOGPOINT: 197581651 is a prime number INFO: LOGPOINT: 197581673 is a prime number INFO: LOGPOINT: 197581687 is a prime number INFO: LOGPOINT: 197581697 is a prime number INFO: LOGPOINT: 197581717 is a prime number INFO: LOGPOINT: breakpointId: [f188655e-7dab-42a1-acad-ce53a16a85dc]: Logpoint is paused due to high call rate until log quota is restored Another example in which there are no logs to display: java -jar lightrunc.jar print-logs 0 There are not logs to show Note Piping must be enabled ( enable-piping command) for print-logs to be able to output. print-all-logs \u00b6 Description Prints all data in the logs currently for all active agents. Synopsis `lightrunc.jar print-all-logs Options N/A Output and examples Example lightrunc.jar print-all-logs The following might be the printed output: INFO: LOGPOINT: breakpointId: [786e3a7e-a60b-4e48-884e-2c126c4da8e3]: Logpoint is paused due to high call rate until log quota is restored INFO: LOGPOINT: Hello world 24373299 INFO: LOGPOINT: Hello world 24373300 INFO: LOGPOINT: Hello world 24373301 INFO: LOGPOINT: Hello world 24373298 INFO: LOGPOINT: Hello world 24373307 INFO: LOGPOINT: Hello world 24373308 INFO: LOGPOINT: Hello world 24373309 INFO: LOGPOINT: Hello world 24373310 INFO: LOGPOINT: Hello world 24373312\" rm \u00b6 Description Removes the specified action from the given agent based on agent ID or tag. Synopsis lightrunc.jar rm <AgentId> <ActionId> Options Option Description Agent-ID Enter the ID of the relevant agent. ActionId The ID of the action that should be removed. Output and examples Example lightrunc.jar rm e93fccd1-9f76-46ae-b703-056e25b8092e 4261257f-fbc0-4fc5-8fe7-e8dbf3944eb7 Returns: The action was removed Tip If you use indexes (such as rm 0 0), it is recommended that you list-agents/list-actions before removing an existing action to verify the index is correct. rm-certificate \u00b6 Description Remove a server certificate based on its unique public key sha256. Note The default preconfigured certificate cannot be removed. Synopsis `lightrunc.jar rm-certificate' Options Option Description Certificate sha256 of the public key of the certificate Output and examples Example The following removes the certificate 515a630cfd1fb908e30087bcc20b7413ad146b9bf2b23d3aaa72c28e45b24fb2 from the server: lightrunc.jar rm-certificate 515a630cfd1fb908e30087bcc20b7413ad146b9bf2b23d3aaa72c28e45b24fb2 The following is returned: Successfully removed certificate 515a630cfd1fb908e30087bcc20b7413ad146b9bf2b23d3aaa72c28e45b24fb2 \u200b rm-tag \u00b6 Description Removes the specified tag from the server. Note Only tags that are not associated with active agents can be removed. Synopsis lightrunc.jar rm-tag <tagName> Options Option Description tagName The name of the relevant tag. Output and examples If the tag doesn't exist the output is as follows: \"There was an error removing the tag! ERROR: tag doesn't exist\" When the tag is successfully removed: \"The tag was removed\" If the tag is attached to an existing agent: \"ERROR: tag has agents\" server-url \u00b6 Description Sets the URL for the server that the CLI connects to. Important If the CLI is currently logged in, first logout ( logout command) before changing the server URL. Synopsis java -jar lightrunc.jar server-url <ServerURL> Options Option Description ServerURL The URL for the server where the agent(s) is with which to work Output and examples Example An example with a server port: java -jar lightrunc.jar server-url https://app.lightrun.com:8083 show-certificates \u00b6 Description Show all the server certificates Synopsis lightrunc.jar show-certificates Options None Output and examples Example The following adds the certificate 515a630cfd1fb908e30087bcc20b7413ad146b9bf2b23d3aaa72c28e45b24fb2 : lightrunc.jar add-certificate 515a630cfd1fb908e30087bcc20b7413ad146b9bf2b23d3aaa72c28e45b24fb2 Returns the following: Log tracking in progress, use print-logs to view the output. ee80811b38e7e6c2dc4cc372cbea86bd86b446b012e427f2e19bf094afba5d12 (PRECONFIGURED) 515a630cfd1fb908e30087bcc20b7413ad146b9bf2b23d3aaa72c28e45b24fb2 Note By default, there is a preconfigured certificate which cannot be deleted. snapshot \u00b6 Description A snapshot is a breakpoint added in the given agent at the given file and line. See snapshot-data for additional details. Synopsis lightrunc.jar snapshot <AgentId> <Filename>:<LineNumber> [-condition <Condition>] [-expireSec <ExpireSec>] [-maxHitCount <MaxHitCount>] [-ignoreQuota] Options Option Description Agent-ID Enter the ID of the relevant agent. FileName The name of the file containing the code in which to add the metric, including the extension. For example: MyJavaFile.java LineNumber The line number within the code file. Condition Any valid Java expression that does not change the state of the code. ExpireSec The amount of time for which this action should run. MaxHitCount The maximum number of times to take this snapshot during the valid period of this action; default = 1 ignoreQuota Only users with the Ignore Quota role can use this option. When set, the quota limit configured for running Lightrun actions is overriden and this action will continue to run even if it reaches the quota. Output and examples Example java -jar lightrunc.jar snapshot 95b4a928-4e57-4be3-8767-5d2167345389 PrimeMainMR.java:42 Results in: The breakpoint was submitted snapshot-data \u00b6 Description This command prints the accumulated data for the specified snapshot to the specified output file. See snapshot for additional details. Synopsis snapshot-data <AgentId> <SnapshotId>[<output-file>] Options Option Description Agent-ID Enter the ID of the relevant agent. SnapshotId The ID of the snapshot for which to print the existing data. Output and examples Example The following: lightrunc snapshot-data e178578f-14da-476f-a084-bc460d6ec2b0 eb5abb0a-4677-4bed-9999-ea0b76c4efd2 Returns the following: [class BreakpointDataDTO { actionId: eb5abb0a-4677-4bed-9999-ea0b76c4efd2 agentId: e178578f-14da-476f-a084-bc460d6ec2b0 createTime: class TimeDTO { nanos: 696685698 seconds: 1611590801 } dataId: 72f81a80-c415-4f00-a43d-83523a735230 evaluatedExpressions: null stackFrames: [class AgentStackFrameDTO { arguments: [class WatchEntryDTO { members: null name: args status: null type: null value: null varTableIndex: 1 }] function: PrimeMain.main locals: [class WatchEntryDTO { members: null name: i status: null type: int value: 30514481 varTableIndex: null }] location: class LocationDTO { column: 0 endOfLine: false line: 20 path: PrimeMain.java } }] variableTable: [class WatchEntryDTO { members: null name: null status: class BreakpointStatusDTO { description: class BreakpointStatusDescriptionDTO { format: Buffer full. Use an expression to see more data parameters: null } isAccepted: false isError: true refersTo: VARIABLE_VALUE } type: null value: null varTableIndex: null }, class WatchEntryDTO { members: [class WatchEntryDTO { members: null name: length status: null type: int value: 0 varTableIndex: null }] name: null status: null type: java.lang.String[] value: null varTableIndex: null }] }] Tip You may use agent/action indexes instead of an ID. For example: java -jar lightrunc.jar snapshot-data 0 0 will output the first snapshot of the first agent Tip The output file is saved in JSON format, and can be manipulated by other tools. status \u00b6 Description Prints the current status of the Management server, including licensing information about the agent and other relevant details. Synopsis java -jar lightrunc.jar status Options None Output and examples Example Server URL: https://172.31.54.31:8080/company/my-company1 Company Name: my-company1 Version: 0.95 Backend Version: 0.95 Username: my-manager-account Licenced Agents: 1000 Licence Expiry: 12/31/00 Exception Daily Limit: Not Reached toggle-action \u00b6 Description Enable or disable the specified action. Synopsis lightrunc.jar toggle-actions <ActionId> Options Option Description Action-ID Enter the ID of the relevant action. Output and examples Example The following adds piping for actions on the agent by ID: lightrunc.jar toggle-action 9cd7d1cd-bbd3-4ebb-ae5d-af068006f388 Returns the following: Log tracking in progress, use print-logs to view the output Action 9cd7d1cd-bbd3-4ebb-ae5d-af068006f388 was successfully disabled Running the same command again: lightrunc.jar toggle-actions 9cd7d1cd-bbd3-4ebb-ae5d-af068006f388 Returns the following: Action 9cd7d1cd-bbd3-4ebb-ae5d-af068006f388 was successfully enabled user \u00b6 Description Prints all relevant details about the currently logged-in user. Synopsis lightrunc.jar user Options None Output and examples Example Output appears in the following format: class UserDTO { activated: true authorities: [ROLE_MANAGER, ROLE_USER] companyName: my-company1 createdBy: my-manager-account createdDate: 2020-11-02T07:36:33.257Z email: my-email@lightrun.com firstName: Jane id: c9e1d1a0-2880-46ee-a50f-8289b736d1c3 imageUrl: null langKey: en lastModifiedBy: my-manager-account lastModifiedDate: 2020-11-02T07:36:45.978Z lastName: Ch login: my-manager-account password: null passwordHash: null passwordSet: true subscriptionStatus: STANDARD } \u200b version \u00b6 Description Prints the version of Lightrun that is currently running on the Management server, and the CLI version. Synopsis java -jar lightrunc.jar version Options None Output and examples Example The following might be the current versions: CLI Client Version: 0.95 Server Version: 0.95 -v, verbose \u00b6 Description Enable verbose mode. Synopsis lightrunc.jar -v Options None Output and examples N/A","title":"The users' complete CLI guide and reference"},{"location":"cli%202/#the-users-complete-cli-guide-and-reference","text":"Here you can find: Installation details Usage of command commands A complete reference for all commands, options and parameters Important If the file name and line number don't match the bytecode version of the app, Lightrun will behave inconsistently and will most likely fail.","title":"The users' complete CLI guide and reference"},{"location":"cli%202/#setup","text":"Install the CLI Authenticate the CLI","title":"Set up your CLI"},{"location":"cli%202/#usage","text":"Tip All agent-related CLI commands can be used with tags instead of agent IDs. Use the syntax tag:TagName and replace the word TagName with the appropriate tag. For example: `tag:Production` Note Tag names are case sensitive.","title":"Usage"},{"location":"cli%202/#help","text":"Run lightrunc.jar help to list all available sub-commands and options.","title":"Help"},{"location":"cli%202/#insert-a-conditional-log","text":"Create and print logs based on specified conditions.","title":"Insert a conditional log"},{"location":"cli%202/#insert-a-log","text":"","title":"Insert a log"},{"location":"cli%202/#list-agents-and-actions","text":"List all agents along with the actions associated to each.","title":"List agents and actions"},{"location":"cli%202/#list-all-tags-and-actions","text":"List all tags and the actions associated to each.","title":"List all tags and actions"},{"location":"cli%202/#list-actions-by-agent","text":"Get a complete list of all of the actions associated with the specified agent, based on agent ID or by using an offset.","title":"List actions by agent"},{"location":"cli%202/#remove-command","text":"This removes the specified action based on the specified agent (by offset or by ID) or tag.","title":"Remove command"},{"location":"cli%202/#reference","text":"","title":"The complete reference"},{"location":"cli%202/#add-certificate","text":"","title":"add-certificate"},{"location":"cli%202/#client-piping","text":"","title":"client-piping"},{"location":"cli%202/#clog","text":"","title":"clog"},{"location":"cli%202/#counter","text":"","title":"counter"},{"location":"cli%202/#custommetric","text":"","title":"customMetric"},{"location":"cli%202/#detach","text":"","title":"detach"},{"location":"cli%202/#disable-pinning-status","text":"","title":"disable-pinning-status"},{"location":"cli%202/#disable-piping","text":"","title":"disable-piping"},{"location":"cli%202/#enable-piping","text":"","title":"enable-piping"},{"location":"cli%202/#enable-pinning-status","text":"","title":"enable-pinning-status"},{"location":"cli%202/#get-pinning-status","text":"","title":"get-pinning-status"},{"location":"cli%202/#list-agents","text":"","title":"list-agents"},{"location":"cli%202/#list-agents-by-tag","text":"","title":"list-agents-by-tag"},{"location":"cli%202/#list-tags","text":"","title":"list-tags"},{"location":"cli%202/#listactions","text":"","title":"list-actions"},{"location":"cli%202/#listen","text":"","title":"listen"},{"location":"cli%202/#log","text":"","title":"log"},{"location":"cli%202/#logout","text":"","title":"logout"},{"location":"cli%202/#print-logs","text":"","title":"print-logs"},{"location":"cli%202/#print-all-logs","text":"","title":"print-all-logs"},{"location":"cli%202/#rm","text":"","title":"rm"},{"location":"cli%202/#rm-certificate","text":"","title":"rm-certificate"},{"location":"cli%202/#rm-tag","text":"","title":"rm-tag"},{"location":"cli%202/#server-url","text":"","title":"server-url"},{"location":"cli%202/#show-certificates","text":"","title":"show-certificates"},{"location":"cli%202/#snapshot_1","text":"","title":"snapshot"},{"location":"cli%202/#snapshot-data_1","text":"","title":"snapshot-data"},{"location":"cli%202/#status","text":"","title":"status"},{"location":"cli%202/#toggle-action","text":"","title":"toggle-action"},{"location":"cli%202/#user","text":"","title":"user"},{"location":"cli%202/#version","text":"","title":"version"},{"location":"cli%202/#-v-verbose","text":"","title":"-v, verbose"},{"location":"cli-manage%202/","text":"Administration from the terminal \u00b6 From the terminal, managers can: Run administrator commands from the Lightrun CLI Configure certain agent properties The commands described here can only be performed by a Lightrun administrator (Manager role). Important If the file name and line number don't match the bytecode version of the app, Lightrun will behave inconsistently and will most likely fail. Lightrun CLI \u00b6 Set up your CLI \u00b6 Install the CLI Authenticate the CLI To use the Lightrun CLI Prerequisites Sign up for your Lightrun account before getting started. The Lightrun CLI requires Java be installed. Log in to your Lightrun account from the browser and navigate to Getting Started . Download 'lightrunc.jar' from the landing page from the Command Line Tool section. Open the terminal and navigate to where you downloaded the file. Authenticate your CLI with your Lightrun account: Copy and run the first command line that appears in your browser. Example java -jar lightrunc.jar server-url https://2147483647.lightrun.com/company/acme Copy and run the second command line that appears in your browser. Example java -jar lightrunc.jar login myaccount@acme.com To run any Lightrun command, add the following prefix: java -jar lightrunc.jar Authenticate the CLI with Lightrun To use the CLI, first authenticate with your Lightrun account. You can authenticate directly from within the CLI or choose to redirect to the browser. lightrunc.jar login <username/email address/password> Example Log in directly from the CLI: java -jar lightrunc.jar login -email jane.doe@example.com -password secretpassword Example Log in with a redirect to your browser: java -jar lightrunc.jar login myaccount@acme.com create-user \u00b6 Description The create-user creates a new user based on the specified options. Synopsis lightrunc.jar create-user <Username> <FirstName> <LastName> <Email> <Role1> <Role2>... Options Username Email Role Following are valid values: - ROLE_ADMIN - ROLE_MANAGER - ROLE_USER - ROLE_AGENT Note Only the administrator is authorized to create a user with ROLE_AGENT. Example The following creates a new user with the User role. lightrunc.jar create-user newuser1 Jane Doe jane@yourcompany.com ROLE_USER When you press Enter, the terminal requests a password for the new user. Enter a password, press Enter and the terminal prints: User successfully created in company YourCompany delete-user \u00b6 Description \u00b6 Delete a specified user. The user must first be deactivated before they can be deleted. You can deactivate directly from the app by navigating to Manager->User management. Synopsis lightrunc.jar delete-user <user name> Options user name - the user name for the user to be deleted Output and examples Example lightrunc.jar delete-user SMITHJ The following is printed in the terminal: User Deleted // : # ### set-value // : # #### Description // : # Administrators with the Set Value role can insert Lightrun actions with conditions that change the values of specified variables in your code. // : # #### Synopsis // : # {.bash} [//]: # lightrunc.jar set-value <AgentId> <FileName>:<LineNumber> -expireSec <VarName1=VarValue> <VarName2=VarValue>\u2026\u200b [//]: # // : # #### Options // : # | Option | Description | // : # | ----------- | ------------------------------------------------------------ | // : # | Agent-ID | Enter the ID of the relevant agent | // : # | FileName | The name of the file containing the code in which to add the metric, including the extension. For example: MyJavaFile.java | // : # | LineNumber | The line number within the code file | // : # | VarName | Any valid Java expression, including functions | // : # | Condition | Any valid Java expression, including functions | // : # | ExpireSec | Configure the duration that this metric should run in seconds | // : # | ignoreQuota | Only administrators with the Ignore Quota role can use this option. When set, the quota limit configured for running Lightrun actions is overriden and this custom metric will continue to run even if it reaches the quota. | // : # #### Output and examples // : # {.bash} [//]: # lightrunc set-value <AgentId> <FileName>:<LineNumber> -expireSec <VarName1=VarValue> <VarName2=VarValue>\u2026\u200b [//]: # clear-exceptions \u00b6 Description Clear all exceptions from history. Synopsis lightrunc clear-exceptions Options None Output and examples The following output is printed: Successfully cleared exceptions history from the server","title":"Administration from the terminal"},{"location":"cli-manage%202/#administration-from-the-terminal","text":"From the terminal, managers can: Run administrator commands from the Lightrun CLI Configure certain agent properties The commands described here can only be performed by a Lightrun administrator (Manager role). Important If the file name and line number don't match the bytecode version of the app, Lightrun will behave inconsistently and will most likely fail.","title":"Administration from the terminal"},{"location":"cli-manage%202/#lightrun-cli","text":"","title":"Lightrun CLI"},{"location":"cli-manage%202/#set-up-your-cli","text":"Install the CLI Authenticate the CLI","title":"Set up your CLI"},{"location":"cli-manage%202/#create-user","text":"","title":"create-user"},{"location":"cli-manage%202/#delete-user","text":"","title":"delete-user"},{"location":"cli-manage%202/#description","text":"Delete a specified user. The user must first be deactivated before they can be deleted. You can deactivate directly from the app by navigating to Manager->User management.","title":"Description"},{"location":"cli-manage%202/#clear-exceptions","text":"","title":"clear-exceptions"},{"location":"cli-manage-agentconfig%202/","text":"Agent configurations can be changed with a command line argument. The command line arguments should be inserted after the path of the agent and they should be separated by a comma. Synopsis \u00b6 -agentpath:<path-to-agent>/lightrun_agent.so=--<parameter>=<value>,--<parameter>=<value>... Agent parameters \u00b6 Following are the parameters that can be configured from the terminal. Parameter name Explanation Type hub_retry_delay_ms amount of time in milliseconds to sleep before retrying failed requests to Management server int32 debuggee_disabled_delay_ms amount of time in milliseconds to sleep before checking whether the debugger was enabled back int32 lightrun_extra_class_path additional directories and files containing resolvable binaries string lightrun_init_wait_time_ms timeout for wait iflightrun_wait_for_init is set int32 lightrun_wait_for_init ck application until first time of fetching breakpoints from the server bool enable_safe_caller allows any method without side effects in expressions bool extra_blocked_methods additional methods to block for testing purposes string extra_allowed_methods additional methods allowed for testing purposes string extra_whitelisted_classes internal names of additional classes to allow for testing purposes string expression_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while evaluating a single breakpoint expression int32 expression_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while evaluating a single breakpoint expression int32 pretty_printers_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while formatting some well known data structures int32 pretty_printers_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while formatting some well-known data structures int32 dynamic_log_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while evaluating all expressions in a single dynamic log statement int32 dynamic_log_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while evaluating all expressions in a single dynamic log int32 safe_caller_max_array_elements maximum allowed size of the array to copy or allocate in safe caller (copying or allocating larger arrays is considered to be too expensive MISSING int32 safe_caller_max_interpreter_stack_depth maximum stack depth that safe caller will allow int32 cdbg_description_suffix additional text to be appended to debug description string cdbg_class_files_cache_size cache size for class files used in safe method caller int32 cdbg_max_instructions_high use this value when ignoring quota int32 cdbg_max_stack_depth maximum number of stack frames to unwind int32 Example -agentpath:<pathtoagent>/lightrun_agent.so=--enable_safe_caller,--lightrun_init_wait_time_ms=999","title":"Cli manage agentconfig 2"},{"location":"cli-manage-agentconfig%202/#synopsis","text":"-agentpath:<path-to-agent>/lightrun_agent.so=--<parameter>=<value>,--<parameter>=<value>...","title":"Synopsis"},{"location":"cli-manage-agentconfig%202/#agent-parameters","text":"Following are the parameters that can be configured from the terminal. Parameter name Explanation Type hub_retry_delay_ms amount of time in milliseconds to sleep before retrying failed requests to Management server int32 debuggee_disabled_delay_ms amount of time in milliseconds to sleep before checking whether the debugger was enabled back int32 lightrun_extra_class_path additional directories and files containing resolvable binaries string lightrun_init_wait_time_ms timeout for wait iflightrun_wait_for_init is set int32 lightrun_wait_for_init ck application until first time of fetching breakpoints from the server bool enable_safe_caller allows any method without side effects in expressions bool extra_blocked_methods additional methods to block for testing purposes string extra_allowed_methods additional methods allowed for testing purposes string extra_whitelisted_classes internal names of additional classes to allow for testing purposes string expression_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while evaluating a single breakpoint expression int32 expression_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while evaluating a single breakpoint expression int32 pretty_printers_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while formatting some well known data structures int32 pretty_printers_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while formatting some well-known data structures int32 dynamic_log_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while evaluating all expressions in a single dynamic log statement int32 dynamic_log_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while evaluating all expressions in a single dynamic log int32 safe_caller_max_array_elements maximum allowed size of the array to copy or allocate in safe caller (copying or allocating larger arrays is considered to be too expensive MISSING int32 safe_caller_max_interpreter_stack_depth maximum stack depth that safe caller will allow int32 cdbg_description_suffix additional text to be appended to debug description string cdbg_class_files_cache_size cache size for class files used in safe method caller int32 cdbg_max_instructions_high use this value when ignoring quota int32 cdbg_max_stack_depth maximum number of stack frames to unwind int32 Example -agentpath:<pathtoagent>/lightrun_agent.so=--enable_safe_caller,--lightrun_init_wait_time_ms=999","title":"Agent parameters"},{"location":"cli-manage-agentconfig/","text":"Agent configurations can be changed with a command line argument. The command line arguments should be inserted after the path of the agent and they should be separated by a comma. Synopsis \u00b6 -agentpath:<path-to-agent>/lightrun_agent.so=--<parameter>=<value>,--<parameter>=<value>... Agent parameters \u00b6 Following are the parameters that can be configured from the terminal. Parameter name Explanation Type hub_retry_delay_ms amount of time in milliseconds to sleep before retrying failed requests to Management server int32 debuggee_disabled_delay_ms amount of time in milliseconds to sleep before checking whether the debugger was enabled back int32 lightrun_extra_class_path additional directories and files containing resolvable binaries string lightrun_init_wait_time_ms timeout for wait iflightrun_wait_for_init is set int32 lightrun_wait_for_init ck application until first time of fetching breakpoints from the server bool enable_safe_caller allows any method without side effects in expressions bool extra_blocked_methods additional methods to block for testing purposes string extra_allowed_methods additional methods allowed for testing purposes string extra_whitelisted_classes internal names of additional classes to allow for testing purposes string expression_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while evaluating a single breakpoint expression int32 expression_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while evaluating a single breakpoint expression int32 pretty_printers_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while formatting some well known data structures int32 pretty_printers_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while formatting some well-known data structures int32 dynamic_log_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while evaluating all expressions in a single dynamic log statement int32 dynamic_log_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while evaluating all expressions in a single dynamic log int32 safe_caller_max_array_elements maximum allowed size of the array to copy or allocate in safe caller (copying or allocating larger arrays is considered to be too expensive MISSING int32 safe_caller_max_interpreter_stack_depth maximum stack depth that safe caller will allow int32 cdbg_description_suffix additional text to be appended to debug description string cdbg_class_files_cache_size cache size for class files used in safe method caller int32 cdbg_max_instructions_high use this value when ignoring quota int32 cdbg_max_stack_depth maximum number of stack frames to unwind int32 Example -agentpath:<pathtoagent>/lightrun_agent.so=--enable_safe_caller,--lightrun_init_wait_time_ms=999","title":"Cli manage agentconfig"},{"location":"cli-manage-agentconfig/#synopsis","text":"-agentpath:<path-to-agent>/lightrun_agent.so=--<parameter>=<value>,--<parameter>=<value>...","title":"Synopsis"},{"location":"cli-manage-agentconfig/#agent-parameters","text":"Following are the parameters that can be configured from the terminal. Parameter name Explanation Type hub_retry_delay_ms amount of time in milliseconds to sleep before retrying failed requests to Management server int32 debuggee_disabled_delay_ms amount of time in milliseconds to sleep before checking whether the debugger was enabled back int32 lightrun_extra_class_path additional directories and files containing resolvable binaries string lightrun_init_wait_time_ms timeout for wait iflightrun_wait_for_init is set int32 lightrun_wait_for_init ck application until first time of fetching breakpoints from the server bool enable_safe_caller allows any method without side effects in expressions bool extra_blocked_methods additional methods to block for testing purposes string extra_allowed_methods additional methods allowed for testing purposes string extra_whitelisted_classes internal names of additional classes to allow for testing purposes string expression_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while evaluating a single breakpoint expression int32 expression_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while evaluating a single breakpoint expression int32 pretty_printers_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while formatting some well known data structures int32 pretty_printers_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while formatting some well-known data structures int32 dynamic_log_max_classes_load_quota maximum number of classes that the Nano Java interpreter is allowed to load while evaluating all expressions in a single dynamic log statement int32 dynamic_log_max_interpreter_instructions_quota maximum number of instructions that the Nano Java interpreter is allowed to execute while evaluating all expressions in a single dynamic log int32 safe_caller_max_array_elements maximum allowed size of the array to copy or allocate in safe caller (copying or allocating larger arrays is considered to be too expensive MISSING int32 safe_caller_max_interpreter_stack_depth maximum stack depth that safe caller will allow int32 cdbg_description_suffix additional text to be appended to debug description string cdbg_class_files_cache_size cache size for class files used in safe method caller int32 cdbg_max_instructions_high use this value when ignoring quota int32 cdbg_max_stack_depth maximum number of stack frames to unwind int32 Example -agentpath:<pathtoagent>/lightrun_agent.so=--enable_safe_caller,--lightrun_init_wait_time_ms=999","title":"Agent parameters"},{"location":"cli-manage/","text":"Administration from the terminal \u00b6 From the terminal, managers can: Run administrator commands from the Lightrun CLI Configure certain agent properties The commands described here can only be performed by a Lightrun administrator (Manager role). Important If the file name and line number don't match the bytecode version of the app, Lightrun will behave inconsistently and will most likely fail. Lightrun CLI \u00b6 Set up your CLI \u00b6 Install the CLI Authenticate the CLI To use the Lightrun CLI Prerequisites Sign up for your Lightrun account before getting started. The Lightrun CLI requires Java be installed. Log in to your Lightrun account from the browser and navigate to Getting Started . Download 'lightrunc.jar' from the landing page from the Command Line Tool section. Open the terminal and navigate to where you downloaded the file. Authenticate your CLI with your Lightrun account: Copy and run the first command line that appears in your browser. Example java -jar lightrunc.jar server-url https://2147483647.lightrun.com/company/acme Copy and run the second command line that appears in your browser. Example java -jar lightrunc.jar login myaccount@acme.com To run any Lightrun command, add the following prefix: java -jar lightrunc.jar Authenticate the CLI with Lightrun To use the CLI, first authenticate with your Lightrun account. You can authenticate directly from within the CLI or choose to redirect to the browser. lightrunc.jar login <username/email address/password> Example Log in directly from the CLI: java -jar lightrunc.jar login -email jane.doe@example.com -password secretpassword Example Log in with a redirect to your browser: java -jar lightrunc.jar login myaccount@acme.com create-user \u00b6 Description The create-user creates a new user based on the specified options. Synopsis lightrunc.jar create-user <Username> <FirstName> <LastName> <Email> <Role1> <Role2>... Options Username Email Role Following are valid values: - ROLE_ADMIN - ROLE_MANAGER - ROLE_USER - ROLE_AGENT Note Only the administrator is authorized to create a user with ROLE_AGENT. Example The following creates a new user with the User role. lightrunc.jar create-user newuser1 Jane Doe jane@yourcompany.com ROLE_USER When you press Enter, the terminal requests a password for the new user. Enter a password, press Enter and the terminal prints: User successfully created in company YourCompany delete-user \u00b6 Description \u00b6 Delete a specified user. The user must first be deactivated before they can be deleted. You can deactivate directly from the app by navigating to Manager->User management. Synopsis lightrunc.jar delete-user <user name> Options user name - the user name for the user to be deleted Output and examples Example lightrunc.jar delete-user SMITHJ The following is printed in the terminal: User Deleted // : # ### set-value // : # #### Description // : # Administrators with the Set Value role can insert Lightrun actions with conditions that change the values of specified variables in your code. // : # #### Synopsis // : # {.bash} [//]: # lightrunc.jar set-value <AgentId> <FileName>:<LineNumber> -expireSec <VarName1=VarValue> <VarName2=VarValue>\u2026\u200b [//]: # // : # #### Options // : # | Option | Description | // : # | ----------- | ------------------------------------------------------------ | // : # | Agent-ID | Enter the ID of the relevant agent | // : # | FileName | The name of the file containing the code in which to add the metric, including the extension. For example: MyJavaFile.java | // : # | LineNumber | The line number within the code file | // : # | VarName | Any valid Java expression, including functions | // : # | Condition | Any valid Java expression, including functions | // : # | ExpireSec | Configure the duration that this metric should run in seconds | // : # | ignoreQuota | Only administrators with the Ignore Quota role can use this option. When set, the quota limit configured for running Lightrun actions is overriden and this custom metric will continue to run even if it reaches the quota. | // : # #### Output and examples // : # {.bash} [//]: # lightrunc set-value <AgentId> <FileName>:<LineNumber> -expireSec <VarName1=VarValue> <VarName2=VarValue>\u2026\u200b [//]: # clear-exceptions \u00b6 Description Clear all exceptions from history. Synopsis lightrunc clear-exceptions Options None Output and examples The following output is printed: Successfully cleared exceptions history from the server","title":"Managers CLI Reference"},{"location":"cli-manage/#administration-from-the-terminal","text":"From the terminal, managers can: Run administrator commands from the Lightrun CLI Configure certain agent properties The commands described here can only be performed by a Lightrun administrator (Manager role). Important If the file name and line number don't match the bytecode version of the app, Lightrun will behave inconsistently and will most likely fail.","title":"Administration from the terminal"},{"location":"cli-manage/#lightrun-cli","text":"","title":"Lightrun CLI"},{"location":"cli-manage/#set-up-your-cli","text":"Install the CLI Authenticate the CLI","title":"Set up your CLI"},{"location":"cli-manage/#create-user","text":"","title":"create-user"},{"location":"cli-manage/#delete-user","text":"","title":"delete-user"},{"location":"cli-manage/#description","text":"Delete a specified user. The user must first be deactivated before they can be deleted. You can deactivate directly from the app by navigating to Manager->User management.","title":"Description"},{"location":"cli-manage/#clear-exceptions","text":"","title":"clear-exceptions"},{"location":"cli-setup%202/","text":"Install the CLI Authenticate the CLI To use the Lightrun CLI Prerequisites Sign up for your Lightrun account before getting started. The Lightrun CLI requires Java be installed. Log in to your Lightrun account from the browser and navigate to Getting Started . Download 'lightrunc.jar' from the landing page from the Command Line Tool section. Open the terminal and navigate to where you downloaded the file. Authenticate your CLI with your Lightrun account: Copy and run the first command line that appears in your browser. Example java -jar lightrunc.jar server-url https://2147483647.lightrun.com/company/acme Copy and run the second command line that appears in your browser. Example java -jar lightrunc.jar login myaccount@acme.com To run any Lightrun command, add the following prefix: java -jar lightrunc.jar Authenticate the CLI with Lightrun To use the CLI, first authenticate with your Lightrun account. You can authenticate directly from within the CLI or choose to redirect to the browser. lightrunc.jar login <username/email address/password> Example Log in directly from the CLI: java -jar lightrunc.jar login -email jane.doe@example.com -password secretpassword Example Log in with a redirect to your browser: java -jar lightrunc.jar login myaccount@acme.com","title":"Cli setup 2"},{"location":"cli-setup/","text":"Install the CLI Authenticate the CLI To use the Lightrun CLI Prerequisites Sign up for your Lightrun account before getting started. The Lightrun CLI requires Java be installed. Log in to your Lightrun account from the browser and navigate to Getting Started . Download 'lightrunc.jar' from the landing page from the Command Line Tool section. Open the terminal and navigate to where you downloaded the file. Authenticate your CLI with your Lightrun account: Copy and run the first command line that appears in your browser. Example java -jar lightrunc.jar server-url https://2147483647.lightrun.com/company/acme Copy and run the second command line that appears in your browser. Example java -jar lightrunc.jar login myaccount@acme.com To run any Lightrun command, add the following prefix: java -jar lightrunc.jar Authenticate the CLI with Lightrun To use the CLI, first authenticate with your Lightrun account. You can authenticate directly from within the CLI or choose to redirect to the browser. lightrunc.jar login <username/email address/password> Example Log in directly from the CLI: java -jar lightrunc.jar login -email jane.doe@example.com -password secretpassword Example Log in with a redirect to your browser: java -jar lightrunc.jar login myaccount@acme.com","title":"Cli setup"},{"location":"cli/","text":"The users' complete CLI guide and reference \u00b6 Here you can find: Installation details Usage of command commands A complete reference for all commands, options and parameters Important If the file name and line number don't match the bytecode version of the app, Lightrun will behave inconsistently and will most likely fail. Set up your CLI \u00b6 Install the CLI Authenticate the CLI To use the Lightrun CLI Prerequisites Sign up for your Lightrun account before getting started. The Lightrun CLI requires Java be installed. Log in to your Lightrun account from the browser and navigate to Getting Started . Download 'lightrunc.jar' from the landing page from the Command Line Tool section. Open the terminal and navigate to where you downloaded the file. Authenticate your CLI with your Lightrun account: Copy and run the first command line that appears in your browser. Example java -jar lightrunc.jar server-url https://2147483647.lightrun.com/company/acme Copy and run the second command line that appears in your browser. Example java -jar lightrunc.jar login myaccount@acme.com To run any Lightrun command, add the following prefix: java -jar lightrunc.jar Authenticate the CLI with Lightrun To use the CLI, first authenticate with your Lightrun account. You can authenticate directly from within the CLI or choose to redirect to the browser. lightrunc.jar login <username/email address/password> Example Log in directly from the CLI: java -jar lightrunc.jar login -email jane.doe@example.com -password secretpassword Example Log in with a redirect to your browser: java -jar lightrunc.jar login myaccount@acme.com Usage \u00b6 Tip All agent-related CLI commands can be used with tags instead of agent IDs. Use the syntax tag:TagName and replace the word TagName with the appropriate tag. For example: `tag:Production` Note Tag names are case sensitive. Help \u00b6 Run lightrunc.jar help to list all available sub-commands and options. Insert a conditional log \u00b6 Create and print logs based on specified conditions. Output and examples Example lightrunc.jar clog 5c6e9cdef4e833279ee286a1 Main.java:10 \"i % 10 == 0\" \"Array size {arr.length}\" The log is printed when the expression i % 10 == 0 evaluates to true . Tip Read more here . Once you no longer need the log, remove it with the rm command Insert a log \u00b6 Description Use the log command to insert a new log. This command adds a new log in the first agent. Output and examples Example lightrunc.jar log 0 Main.java:10 \"Array size {arr.length}\" The log prints \\\"Array size \\\" followed by the result of the expression arr.length . This only works with the first agent has a class compiled from Main.java and has a variable called arr defined in line 10. Tip You can also choose to add the log based on a tag instead of a specific agent. Example lightrunc.jar log tag:TagName Main.java:10 \"Array size {arr.length}\" Tip Read more here for log command details. List agents and actions \u00b6 List all agents along with the actions associated to each. Output and examples Example Single agent, no actions: 0 : ID 28a27003-ba45-4848-9de8-287aab7a026b HOST erezk-Latitude-7400 PID 11835 UPDATE 09/03/2021, 10:20 TAGS [Production] Single agent, single action: 0 : ID 28a27003-ba45-4848-9de8-287aab7a026b HOST erezk-Latitude-7400 PID 11835 UPDATE 09/03/2021, 10:29 TAGS [Production] ACTION 42c6b34b-7bdc-4d17-9c0f-63215b8140c7 FILE PrimeMain.java LINE 14 TYPE LOG {num} is a prime number Another example: 0 : ID 28a27003-ba45-4848-9de8-287aab7a026b HOST erezk-Latitude-7400 PID 11835 UPDATE 09/03/2021, 10:32 TAGS [Production] ACTION 1289bd5e-da09-4669-ad6e-278ace71ba9a FILE PrimeMain.java LINE 14 TYPE COUNTER ACTION 42c6b34b-7bdc-4d17-9c0f-63215b8140c7 FILE PrimeMain.java LINE 14 TYPE LOG {num} is a prime number 1 : ID dcc7543f-e8c4-4e4d-9481-492ee1feb92e HOST erezk-Latitude-7400 PID 12386 UPDATE 09/03/2021, 10:32 TAGS [Production] Tip Read more here for log command details. List all tags and actions \u00b6 List all tags and the actions associated to each. Output and examples lightrunc.jar list-tags might result in output similar to this: Here's one output example: Tag: Production ACTION 7e743edb-807f-41ef-9061-8fb1619d1239 FILE PrimeMain LINE 14 TYPE LOG {num} is a prime number Example lightrunc.jar list-tags might result in output similar to this: Tag: Production ACTION 7e743edb-807f-41ef-9061-8fb1619d1239 FILE PrimeMain LINE 14 TYPE LOG {num} is a prime number Tip Read more here for log command details. List actions by agent \u00b6 Get a complete list of all of the actions associated with the specified agent, based on agent ID or by using an offset. Output and examples Example Use the offset 0 to indicate the list of actions should be returned for the first agent. lightrunc.jar list actions 0 Alternatively, you can request the full list of actions for agent ID 5c6e9cdef4e833279ee286a1: lightrunc.jar list actions 5c6e9cdef4e833279ee286a1 Tip Read more here for details. Remove command \u00b6 This removes the specified action based on the specified agent (by offset or by ID) or tag. Output and examples Example The following removes the first action for the first agent: lightrun rm 0 0 This command returns: The action was removed. Tip Read more here for details. The complete reference \u00b6 add-certificate \u00b6 Description You can assign multiple certificates to the same server. Each subdomain can also have its own verification, increasing the security of the site by decentralizing its reliance on a single certificate. Synopsis lightrunc.jar add-certificate <Certificate> Options Option Description Certificate sha256 of the public key of the certificate Output and examples Successfully added certificate. client-piping \u00b6 Description Logs, counters and TicTocs for this agent ID will be piped to the backend and hidden in the server. Logs are available with the print-logs command. Synopsis lightrunc.jar client-piping <Agent-ID> Options Option Description Agent-ID Enter the ID of the relevant agent. Output and examples Example The adds piping for actions on the agent by ID: lightrunc.jar client-piping 9cd7d1cd-bbd3-4ebb-ae5d-af068006f388 Returns the following: Log tracking in progress, use print-logs to view the output clog \u00b6 Description Insert a conditional log for the given agent in the given file and line with the format as configured. Synopsis lightrunc.jar clog <AgentId> <Filename>:<LineNumber> <Format> [-condition <Condition>] [-expireSec <ExpireSec>] [-ignoreQuota] Options Option Description Agent-ID Enter the ID of the relevant agent. FileName The name of the file containing the code in which to add the metric, including the extension. For example: MyJavaFile.java LineNumber The line number within the code file. Format The text to appear in your logs for this metric. Condition Any valid Java expression that does not change the state of the code. ExpireSec The amount of time for which this log should run. ignoreQuota Only users with the Ignore Quota role can use this option. When set, the quota limit configured for running Lightrun actions is overriden and this log will continue to run even if it reaches the quota. Output and examples Example Run the following command to insert a log: java -jar lightrunc.jar clog 5c6e9cdef4e833279ee286a1 Main.java:10 \"Array size {arr.length}\" -condition \"i % 10 == 0\"\" The log is printed when the expression i % 10 == 0 evaluates to true. counter \u00b6 Description Insert a counter to count the number of times each thread hits the requested line based on the options you configure. Synopsis lightrunc.jar counter <AgentId> <FileName>:<LineNumber> <CounterName> [-condition <Condition>] [-expireSec <ExpireSec>] [-aggregateBy <Aggregate By Prefix>] [ignoreQuota] Options Option Description Agent-ID Enter the ID of the relevant agent. FileName The name of the file containing the code in which to add the metric, including the extension. For example: MyJavaFile.java LineNumber The line number within the code file. CounterName The name of the counter - the text to appear in your logs for this metric. Condition Any valid Java expression that does not change the state of the code. ExpireSec The amount of time for which this counter should run. aggregateBy Collect and aggregate data for the specified string only. ignoreQuota Only users with the Ignore Quota role can use this option. When set, the quota limit configured for running Lightrun actions is overriden and this counter will continue to run even if it reaches the quota. Output and examples Example java -jar lightrunc counter e178578f-14da-476f-a084-bc460d6ec2b0 PrimeMain.java:20 myCounter Results in: The counter was submitted customMetric \u00b6 Description Build a custom metric based on specified expressions and values. Synopsis java -jar lightrunc.jar customMetric <AgentId> <FileName>:<LineNumber> <MetricName> <MetricExpression> [-condition <Condition>] [-expireSec <ExpireSec>] [-ignoreQuota] Options Option Description ignoreQuota Only administrators with the Ignore Quota role can use this option. When set, the quota limit configured for running Lightrun actions is overriden and this custom metric will continue to run even if it reaches the quota. The quota controls use of CPU, Networking, Memory, excessively long strings, too many instructions printing out, protection from infinite loops and the like Agent-ID Enter the ID of the relevant agent. FileName The name of the file containing the code in which to add the metric, including the extension. For example: MyJavaFile.java LineNumber The line number within the code file. MetricName Assign a unique name to this metric. MetricExpression Configure any valid Java expression that does not change the state of the code. Condition Any valid Java expression that does not change the state of the code. ExpireSec Configure the duration that this metric should run in seconds. Output and examples Example The following creates a custom metric called MyPrimeMetric, where the expression for the metric is num, and the condition is \"num>3\": java -jar lightrunc.jar customMetric 0 PrimeMain.java:14 MyPrimeMetric num -condition \"num>3\" Returns the following: The custom metric was submitted Once added, the metric returns relevant data, similar to the following: INFO: 10 Mar 2021, 11:59:26 CustomMetric Stats: { \"MyPrimeMetric\" : {\"count\" : 55106,\"max\" : 675526339,\"mean\" : 6.731275234790297E8,\"min\" : 629652109,\"p50\" : 6.73885867E8,\"p75\" : 6.74822641E8,\"p95\" : 6.75395141E8,\"p98\" : 6.75455779E8,\"p99\" : 6.75491381E8,\"p999\" : 6.75526339E8,\"stddev\" : 2424070.6627122667 } } Note Always use quotes when setting a condition (\"num>3\") in order to avoid shell output redirection to file descriptor 3. detach \u00b6 Description When experiencing any issues on the server, you might want to disable Lightrun in order to rule it out when troubleshooting. The detach command disables all Lightrun agents on the specified server when turned \"on\". When you turn it off, agents resume. Synopsis java -jar lightrunc.jar detach on/off Options None Output and examples Example java -jar lightrunc.jar detach on Agents are now detached java -jar lightrunc.jar detach off Agents are now re-enabled disable-pinning-status \u00b6 Description Disable certificate pinning. Synopsis lightrunc.jar disable-certificate-pinning Options None Output and examples Certifcate pinning is now disabled. disable-piping \u00b6 Description This disables piping for logs on the agent that is indicated by ID. Synopsis lightrunc.jar disable-piping <Agent-ID> Options Option Description Agent-ID Enter the ID of the relevant agent. Output and examples Example lightrunc.jar disable-piping 9cd7d1cd-bbd3-4ebb-ae5d-af068006f388 Returns the following: Tracking is disabled. enable-piping \u00b6 Description Enable piping logs, counters and TicTocs to the backend for this agent so that you can view the output directly from the app. You can then also view the data from the CLI using the print-logs command; actions are printed in the server. Synopsis lightrunc.jar enable-piping <Agent-ID> Options Option Description Agent-ID Enter the ID of the relevant agent. Output and examples Example lightrunc.jar enable-piping 9cd7d1cd-bbd3-4ebb-ae5d-af068006f388 Returns the following: Log tracking in progress, use print-logs to view the output enable-pinning-status \u00b6 Description Enables certificate pinning. Synopsis lightrunc.jar enable-pinning-status Options None Output and examples Certifcate pinning is now enabled. get-pinning-status \u00b6 Description Returns the pinning status: enabled, or disabled. Synopsis lightrunc.jar get-pinning-status Options None Output and examples Example One of the following might be returned: Pinning status is disabled Or Pinning status is enabled list-agents \u00b6 Description Lists all agents and the associated actions for each. Synopsis lightrunc.jar list-agents Options None. Output and examples Example Something similar to the following might be printed out: 0 : ID e93fccd1-9f76-46ae-b703-056e25b8092e HOST ip-172-31-50-47 PID 14507 UPDATE 1 /21/21, 9 :16 AM ACTION 4261257f-fbc0-4fc5-8fe7-e8dbf3944eb7 FILE PrimeMainMR.java LINE 10 TYPE TICTOC ACTION 99e8e7b0-9248-4d89-8f6f-2d3c5fa9aebc FILE PrimeMainMR.java LINE 15 TYPE LOG Hello world { java expression } gg ACTION b383e31b-8749-419f-a492-85a919cc0da8 FILE PrimeMainMR.java LINE 22 TYPE TICTOC ACTION c3f863e6-ba7d-4480-83c0-ef4a278ecddb FILE PrimeMainMR.java LINE 15 TYPE COUNTER ACTION e5790c99-f763-4d26-8d3f-2714c89c0fad FILE PrimeMainMR.java LINE 10 TYPE BREAKPOINT 1 : ID f93fccd1-9f75-46ae-b703-456e25b8092e HOST ip-172-31-50-47 PID 14508 UPDATE 1 /21/21, 9 :16 AM ACTION 5261257f-fbc0-4fc5-8fe7-e8dbf3944eb7 FILE PrimeMainMR.java LINE 10 TYPE TICTOC ACTION 49e8e7b0-9248-4d89-8f6f-2d3c5fa9aebc FILE PrimeMainMR.java LINE 15 TYPE LOG Hello world { java expression } gg ACTION g383e31b-8749-419f-a492-85a919cc0da8 FILE PrimeMainMR.java LINE 22 TYPE TICTOC ACTION a3f863e6-ba7d-4480-83c0-ef4a278ecddb FILE PrimeMainMR.java LINE 15 TYPE BREAKPOINT ACTION l5790c99-f763-4d26-8d3f-2714c89c0fad FILE PrimeMainMR.java LINE 10 TYPE BREAKPOINT list-agents-by-tag \u00b6 Description Lists all agents and the associated actions for the specified tag. Synopsis lightrunc.jar list-agents-by-tag <Tag> Options Option Description Tag The name of the relevant tag. For example, Production. Output and examples Example list-agents-by-tag Production might result in output similar to this: 0 : ID 336bfe2e-1ddd-477d-b68d-6ea46657e711 HOST ip-172-31-50-47 PID 15073 UPDATE 1 /20/21, 6 :53 PM ACTION 4261257f-fbc0-4fc5-8fe7-e8dbf3944eb7 FILE PrimeMainMR.java LINE 10 TYPE TICTOC ACTION 99e8e7b0-9248-4d89-8f6f-2d3c5fa9aebc FILE PrimeMainMR.java LINE 15 TYPE LOG Hello world { java expression } gg ACTION b383e31b-8749-419f-a492-85a919cc0da8 FILE PrimeMainMR.java LINE 22 TYPE TICTOC ACTION c3f863e6-ba7d-4480-83c0-ef4a278ecddb FILE PrimeMainMR.java LINE 15 TYPE COUNTER ACTION e5790c99-f763-4d26-8d3f-2714c89c0fad FILE PrimeMainMR.java LINE 10 TYPE BREAKPOINT ACTION f0298e0f-f7ac-491d-b3d2-2eddf671a465 FILE PrimeMainMR.java LINE 8 TYPE BREAKPOINT ERROR No code found at line 8 list-tags \u00b6 Description List the all tags and the actions associated with each. Synopsis lightrunc.jar list-tags Options None Output and examples Example The output might be similar to this: Tag: Production ACTION 4f6f8e67-2252-4093-bcf2-9a5254f074ef FILE PrimeMainMR.java LINE 50 TYPE LOG Hello world { java expression } ACTION 99e8e7b0-9248-4d89-8f6f-2d3c5fa9aebc FILE PrimeMainMR.java LINE 15 TYPE LOG Hello world { java expression } gg ACTION e5790c99-f763-4d26-8d3f-2714c89c0fad FILE PrimeMainMR.java LINE 10 TYPE BREAKPOINT Tag: Staging ACTION b383e31b-8749-419f-a492-85a919cc0da8 FILE PrimeMainMR.java LINE 22 TYPE TICTOC ACTION c3f863e6-ba7d-4480-83c0-ef4a278ecddb FILE PrimeMainMR.java LINE 15 TYPE COUNTER list-actions \u00b6 Description List all actions for the specified agent, including current status, all configurations and details. Synopsis lightrunc.jar list-actions <AgentId> Options Option Description Agent-ID Enter the ID of the relevant agent. Output and examples Example Run the following command: lightrunc.jar list-actions e93fccd1-9f76-46ae-b703-056e25b8092e The output might be similar to this: class ActionDTO { actionType: LOG agentId: null agentIdToErrorMsg: { a326cad4-e195-4eaa-8b09-efb2d832c97f = The action has expired, System = The action has expired } captureActionExtensionDTO: null column: 0 condition: createTime: 2021 -01-02T11:03:05.426Z disabled: false expirationSeconds: 3600 filename: PrimeMainMR.java id: 99e8e7b0-9248-4d89-8f6f-2d3c5fa9aebc ignoreQuota: false line: 15 logActionExtensionDTO: class LogActionExtensionDTO { args: [ java expression ] format: Hello world $0 gg logLevel: INFO } maxHitCount: null namedActionExtensionDTO: null ownerUser: my-manager-account pictureURL: https://www.gravatar.com/avatar/ff86a69f127b0ac9d07e17a2f177c162?d = mp rawCommandActionExtensionDTO: null setValueActionExtensionDTO: null sourceVersion: null sourceVersionStatusAgentIds: {} status: ERROR tagName: Production ticTocActionExtensionDTO: null updateTime: 2021 -01-02T12:03:23.086Z } Example Sample output for an error: class ActionDTO { actionType: LOG agentId: null agentIdToErrorMsg: {ebe33150-d9a3-4728-aec4-e6539966ed39=Unsupported file extension, 533a064e-a0a6-4be2-a855-9c3ae803f9cc=Unsupported file extension} captureActionExtensionDTO: null column: 0 condition: null createTime: 2021-03-09T12:40:35.718059Z disabled: false expirationSeconds: 3600 filename: PrimeMain id: 7e743edb-807f-41ef-9061-8fb1619d1239 ignoreQuota: false line: 14 logActionExtensionDTO: class LogActionExtensionDTO { args: [num] format: $0 is a prime number logLevel: INFO } maxHitCount: null namedActionExtensionDTO: null ownerUser: erezk@lightrun.com pictureURL: https://www.gravatar.com/avatar/0ebb0090f7f395c2470e472655c08f40?d=mp rawCommandActionExtensionDTO: null setValueActionExtensionDTO: null sourceVersion: null sourceVersionStatusAgentIds: {} status: ERROR tagName: Production ticTocActionExtensionDTO: null updateTime: 2021-03-09T12:40:35.718831Z } listen \u00b6 Description Listens to agent/log registration events and prints them out. Synopsis lightrunc.jar listen Options None Output and examples Connecting to server Listening for events Example Once you run the listen command, events from the server are printed as they occur and appear similar to the following: Connecting to server Listening for events {\"eventType\":\"CONNECTED\",\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}} {\"eventType\":\"SESSION_DETAILS\",\"metadata\":{\"sessionId\":\"ecf32a4b-43da-ea93-bce0-18ef235e962a\"},\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}} {\"agentDisplayName\":\"\",\"eventType\":\"AUTHENTICATED\",\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}} {\"actionType\":\"LOG\",\"agentDisplayName\":\"erezk-Latitude-7400 (pid 30554)\",\"agentId\":\"f4b0d260-ec00-4459-a9ed-b8ef7d4ffcf7\",\"eventType\":\"LOG_DATA_ADDED\",\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}} {\"actionType\":\"LOG\",\"agentDisplayName\":\"erezk-Latitude-7400 (pid 30554)\",\"agentId\":\"f4b0d260-ec00-4459-a9ed-b8ef7d4ffcf7\",\"eventType\":\"LOG_DATA_ADDED\",\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}} {\"actionType\":\"LOG\",\"agentDisplayName\":\"erezk-Latitude-7400 (pid 30554)\",\"agentId\":\"f4b0d260-ec00-4459-a9ed-b8ef7d4ffcf7\",\"eventType\":\"LOG_DATA_ADDED\",\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}} {\"actionType\":\"LOG\",\"agentDisplayName\":\"erezk-Latitude-7400 (pid 30554)\",\"agentId\":\"f4b0d260-ec00-4459-a9ed-b8ef7d4ffcf7\",\"eventType\":\"LOG_DATA_ADDED\",\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}} {\"actionType\":\"LOG\",\"agentDisplayName\":\"erezk-Latitude-7400 (pid 30554)\",\"agentId\":\"f4b0d260-ec00-4459-a9ed-b8ef7d4ffcf7\",\"eventType\":\"LOG_DATA_ADDED\",\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}} log \u00b6 Description Insert a log for the given agent, at the given file and line with the format (text of the log). Inserted logs timeout after 1 hour by default, unless configured otherwise. Synopsis lightrunc.jar log <AgentId> <Filename>:<LineNumber> <Format> -expireSec <ExpireSec> [-ignoreQuota] Options Option Description Agent-ID The ID of the relevant agent. Filename The name of the Java file, including the suffix (.java) LineNumber The number of the line of code in the referenced file. Format The text to appear in your logs. expireSec The amount of time for which this log should run. ignoreQuota Only users with the Ignore Quota role can use this option. When set, the quota limit configured for running Lightrun actions is overriden and this log will continue to run even if it reaches the quota. Output and examples Example Run the following command to insert a log: lightrunc.jar log c02e80f9-55cf-4452-a17e-a3bf4105e4b0 PrimeMainMR.java:51 -expireSec 360 The output might be similar to this: The log was submitted If you run list-actions , the following might output for this action now: class ActionDTO { actionType: LOG agentId: c02e80f9-55cf-4452-a17e-a3bf4105e4b0 agentIdToErrorMsg: {} captureActionExtensionDTO: null column: 0 condition: null createTime: 2021-01-25T14:18:15.359Z disabled: false expirationSeconds: 360 filename: PrimeMainMR.java id: 302bc748-2f07-43b3-b0d9-443376a413f7 ignoreQuota: false line: 51 logActionExtensionDTO: class LogActionExtensionDTO { args: [] format: IfStatement logLevel: INFO } maxHitCount: null namedActionExtensionDTO: null ownerUser: my-manager-account pictureURL: https://www.gravatar.com/avatar/ff86a69f127b0ac9d07e17a2f177c162?d=mp rawCommandActionExtensionDTO: null setValueActionExtensionDTO: null sourceVersion: null sourceVersionStatusAgentIds: {} status: ACCEPTED tagName: null ticTocActionExtensionDTO: null updateTime: 2021-01-25T14:18:15.381Z } logout \u00b6 Description Logs out the currently logged in user from the Lightrun account. Synopsis lightrunc.jar logout Options None Output and examples Logged out successfully! or User already logged out. print-logs \u00b6 Description Prints all data in the logs currently for the specified action on the specified agent. Limited to 1000 of the most recent results. Optionally, you can specify the range via the 'range' argument. Synopsis lightrunc.jar print-logs <AgentId> [<ActionId>] [-range <StartTimestamp-EndTimestamp (milliseconds)>] Options Option Description Agent-ID Enter the ID of the relevant agent. Output and examples Missing options for ActionId, range Output and examples - looks like a bad header/section Example An example with ranged timestamp: java -jar lightrunc.jar print-logs 0 0 -range 1615391135824-1615391135924 INFO: LOGPOINT: 197581639 is a prime number INFO: LOGPOINT: 197581649 is a prime number INFO: LOGPOINT: 197581651 is a prime number INFO: LOGPOINT: 197581673 is a prime number INFO: LOGPOINT: 197581687 is a prime number INFO: LOGPOINT: 197581697 is a prime number INFO: LOGPOINT: 197581717 is a prime number INFO: LOGPOINT: breakpointId: [f188655e-7dab-42a1-acad-ce53a16a85dc]: Logpoint is paused due to high call rate until log quota is restored Another example in which there are no logs to display: java -jar lightrunc.jar print-logs 0 There are not logs to show Note Piping must be enabled ( enable-piping command) for print-logs to be able to output. print-all-logs \u00b6 Description Prints all data in the logs currently for all active agents. Synopsis `lightrunc.jar print-all-logs Options N/A Output and examples Example lightrunc.jar print-all-logs The following might be the printed output: INFO: LOGPOINT: breakpointId: [786e3a7e-a60b-4e48-884e-2c126c4da8e3]: Logpoint is paused due to high call rate until log quota is restored INFO: LOGPOINT: Hello world 24373299 INFO: LOGPOINT: Hello world 24373300 INFO: LOGPOINT: Hello world 24373301 INFO: LOGPOINT: Hello world 24373298 INFO: LOGPOINT: Hello world 24373307 INFO: LOGPOINT: Hello world 24373308 INFO: LOGPOINT: Hello world 24373309 INFO: LOGPOINT: Hello world 24373310 INFO: LOGPOINT: Hello world 24373312\" rm \u00b6 Description Removes the specified action from the given agent based on agent ID or tag. Synopsis lightrunc.jar rm <AgentId> <ActionId> Options Option Description Agent-ID Enter the ID of the relevant agent. ActionId The ID of the action that should be removed. Output and examples Example lightrunc.jar rm e93fccd1-9f76-46ae-b703-056e25b8092e 4261257f-fbc0-4fc5-8fe7-e8dbf3944eb7 Returns: The action was removed Tip If you use indexes (such as rm 0 0), it is recommended that you list-agents/list-actions before removing an existing action to verify the index is correct. rm-certificate \u00b6 Description Remove a server certificate based on its unique public key sha256. Note The default preconfigured certificate cannot be removed. Synopsis `lightrunc.jar rm-certificate' Options Option Description Certificate sha256 of the public key of the certificate Output and examples Example The following removes the certificate 515a630cfd1fb908e30087bcc20b7413ad146b9bf2b23d3aaa72c28e45b24fb2 from the server: lightrunc.jar rm-certificate 515a630cfd1fb908e30087bcc20b7413ad146b9bf2b23d3aaa72c28e45b24fb2 The following is returned: Successfully removed certificate 515a630cfd1fb908e30087bcc20b7413ad146b9bf2b23d3aaa72c28e45b24fb2 \u200b rm-tag \u00b6 Description Removes the specified tag from the server. Note Only tags that are not associated with active agents can be removed. Synopsis lightrunc.jar rm-tag <tagName> Options Option Description tagName The name of the relevant tag. Output and examples If the tag doesn't exist the output is as follows: \"There was an error removing the tag! ERROR: tag doesn't exist\" When the tag is successfully removed: \"The tag was removed\" If the tag is attached to an existing agent: \"ERROR: tag has agents\" server-url \u00b6 Description Sets the URL for the server that the CLI connects to. Important If the CLI is currently logged in, first logout ( logout command) before changing the server URL. Synopsis java -jar lightrunc.jar server-url <ServerURL> Options Option Description ServerURL The URL for the server where the agent(s) is with which to work Output and examples Example An example with a server port: java -jar lightrunc.jar server-url https://app.lightrun.com:8083 show-certificates \u00b6 Description Show all the server certificates Synopsis lightrunc.jar show-certificates Options None Output and examples Example The following adds the certificate 515a630cfd1fb908e30087bcc20b7413ad146b9bf2b23d3aaa72c28e45b24fb2 : lightrunc.jar add-certificate 515a630cfd1fb908e30087bcc20b7413ad146b9bf2b23d3aaa72c28e45b24fb2 Returns the following: Log tracking in progress, use print-logs to view the output. ee80811b38e7e6c2dc4cc372cbea86bd86b446b012e427f2e19bf094afba5d12 (PRECONFIGURED) 515a630cfd1fb908e30087bcc20b7413ad146b9bf2b23d3aaa72c28e45b24fb2 Note By default, there is a preconfigured certificate which cannot be deleted. snapshot \u00b6 Description A snapshot is a breakpoint added in the given agent at the given file and line. See snapshot-data for additional details. Synopsis lightrunc.jar snapshot <AgentId> <Filename>:<LineNumber> [-condition <Condition>] [-expireSec <ExpireSec>] [-maxHitCount <MaxHitCount>] [-ignoreQuota] Options Option Description Agent-ID Enter the ID of the relevant agent. FileName The name of the file containing the code in which to add the metric, including the extension. For example: MyJavaFile.java LineNumber The line number within the code file. Condition Any valid Java expression that does not change the state of the code. ExpireSec The amount of time for which this action should run. MaxHitCount The maximum number of times to take this snapshot during the valid period of this action; default = 1 ignoreQuota Only users with the Ignore Quota role can use this option. When set, the quota limit configured for running Lightrun actions is overriden and this action will continue to run even if it reaches the quota. Output and examples Example java -jar lightrunc.jar snapshot 95b4a928-4e57-4be3-8767-5d2167345389 PrimeMainMR.java:42 Results in: The breakpoint was submitted snapshot-data \u00b6 Description This command prints the accumulated data for the specified snapshot to the specified output file. See snapshot for additional details. Synopsis snapshot-data <AgentId> <SnapshotId>[<output-file>] Options Option Description Agent-ID Enter the ID of the relevant agent. SnapshotId The ID of the snapshot for which to print the existing data. Output and examples Example The following: lightrunc snapshot-data e178578f-14da-476f-a084-bc460d6ec2b0 eb5abb0a-4677-4bed-9999-ea0b76c4efd2 Returns the following: [class BreakpointDataDTO { actionId: eb5abb0a-4677-4bed-9999-ea0b76c4efd2 agentId: e178578f-14da-476f-a084-bc460d6ec2b0 createTime: class TimeDTO { nanos: 696685698 seconds: 1611590801 } dataId: 72f81a80-c415-4f00-a43d-83523a735230 evaluatedExpressions: null stackFrames: [class AgentStackFrameDTO { arguments: [class WatchEntryDTO { members: null name: args status: null type: null value: null varTableIndex: 1 }] function: PrimeMain.main locals: [class WatchEntryDTO { members: null name: i status: null type: int value: 30514481 varTableIndex: null }] location: class LocationDTO { column: 0 endOfLine: false line: 20 path: PrimeMain.java } }] variableTable: [class WatchEntryDTO { members: null name: null status: class BreakpointStatusDTO { description: class BreakpointStatusDescriptionDTO { format: Buffer full. Use an expression to see more data parameters: null } isAccepted: false isError: true refersTo: VARIABLE_VALUE } type: null value: null varTableIndex: null }, class WatchEntryDTO { members: [class WatchEntryDTO { members: null name: length status: null type: int value: 0 varTableIndex: null }] name: null status: null type: java.lang.String[] value: null varTableIndex: null }] }] Tip You may use agent/action indexes instead of an ID. For example: java -jar lightrunc.jar snapshot-data 0 0 will output the first snapshot of the first agent Tip The output file is saved in JSON format, and can be manipulated by other tools. status \u00b6 Description Prints the current status of the Management server, including licensing information about the agent and other relevant details. Synopsis java -jar lightrunc.jar status Options None Output and examples Example Server URL: https://172.31.54.31:8080/company/my-company1 Company Name: my-company1 Version: 0.95 Backend Version: 0.95 Username: my-manager-account Licenced Agents: 1000 Licence Expiry: 12/31/00 Exception Daily Limit: Not Reached toggle-action \u00b6 Description Enable or disable the specified action. Synopsis lightrunc.jar toggle-actions <ActionId> Options Option Description Action-ID Enter the ID of the relevant action. Output and examples Example The following adds piping for actions on the agent by ID: lightrunc.jar toggle-action 9cd7d1cd-bbd3-4ebb-ae5d-af068006f388 Returns the following: Log tracking in progress, use print-logs to view the output Action 9cd7d1cd-bbd3-4ebb-ae5d-af068006f388 was successfully disabled Running the same command again: lightrunc.jar toggle-actions 9cd7d1cd-bbd3-4ebb-ae5d-af068006f388 Returns the following: Action 9cd7d1cd-bbd3-4ebb-ae5d-af068006f388 was successfully enabled user \u00b6 Description Prints all relevant details about the currently logged-in user. Synopsis lightrunc.jar user Options None Output and examples Example Output appears in the following format: class UserDTO { activated: true authorities: [ROLE_MANAGER, ROLE_USER] companyName: my-company1 createdBy: my-manager-account createdDate: 2020-11-02T07:36:33.257Z email: my-email@lightrun.com firstName: Jane id: c9e1d1a0-2880-46ee-a50f-8289b736d1c3 imageUrl: null langKey: en lastModifiedBy: my-manager-account lastModifiedDate: 2020-11-02T07:36:45.978Z lastName: Ch login: my-manager-account password: null passwordHash: null passwordSet: true subscriptionStatus: STANDARD } \u200b version \u00b6 Description Prints the version of Lightrun that is currently running on the Management server, and the CLI version. Synopsis java -jar lightrunc.jar version Options None Output and examples Example The following might be the current versions: CLI Client Version: 0.95 Server Version: 0.95 -v, verbose \u00b6 Description Enable verbose mode. Synopsis lightrunc.jar -v Options None Output and examples N/A","title":"Users CLI Reference"},{"location":"cli/#the-users-complete-cli-guide-and-reference","text":"Here you can find: Installation details Usage of command commands A complete reference for all commands, options and parameters Important If the file name and line number don't match the bytecode version of the app, Lightrun will behave inconsistently and will most likely fail.","title":"The users' complete CLI guide and reference"},{"location":"cli/#setup","text":"Install the CLI Authenticate the CLI","title":"Set up your CLI"},{"location":"cli/#usage","text":"Tip All agent-related CLI commands can be used with tags instead of agent IDs. Use the syntax tag:TagName and replace the word TagName with the appropriate tag. For example: `tag:Production` Note Tag names are case sensitive.","title":"Usage"},{"location":"cli/#help","text":"Run lightrunc.jar help to list all available sub-commands and options.","title":"Help"},{"location":"cli/#insert-a-conditional-log","text":"Create and print logs based on specified conditions.","title":"Insert a conditional log"},{"location":"cli/#insert-a-log","text":"","title":"Insert a log"},{"location":"cli/#list-agents-and-actions","text":"List all agents along with the actions associated to each.","title":"List agents and actions"},{"location":"cli/#list-all-tags-and-actions","text":"List all tags and the actions associated to each.","title":"List all tags and actions"},{"location":"cli/#list-actions-by-agent","text":"Get a complete list of all of the actions associated with the specified agent, based on agent ID or by using an offset.","title":"List actions by agent"},{"location":"cli/#remove-command","text":"This removes the specified action based on the specified agent (by offset or by ID) or tag.","title":"Remove command"},{"location":"cli/#reference","text":"","title":"The complete reference"},{"location":"cli/#add-certificate","text":"","title":"add-certificate"},{"location":"cli/#client-piping","text":"","title":"client-piping"},{"location":"cli/#clog","text":"","title":"clog"},{"location":"cli/#counter","text":"","title":"counter"},{"location":"cli/#custommetric","text":"","title":"customMetric"},{"location":"cli/#detach","text":"","title":"detach"},{"location":"cli/#disable-pinning-status","text":"","title":"disable-pinning-status"},{"location":"cli/#disable-piping","text":"","title":"disable-piping"},{"location":"cli/#enable-piping","text":"","title":"enable-piping"},{"location":"cli/#enable-pinning-status","text":"","title":"enable-pinning-status"},{"location":"cli/#get-pinning-status","text":"","title":"get-pinning-status"},{"location":"cli/#list-agents","text":"","title":"list-agents"},{"location":"cli/#list-agents-by-tag","text":"","title":"list-agents-by-tag"},{"location":"cli/#list-tags","text":"","title":"list-tags"},{"location":"cli/#listactions","text":"","title":"list-actions"},{"location":"cli/#listen","text":"","title":"listen"},{"location":"cli/#log","text":"","title":"log"},{"location":"cli/#logout","text":"","title":"logout"},{"location":"cli/#print-logs","text":"","title":"print-logs"},{"location":"cli/#print-all-logs","text":"","title":"print-all-logs"},{"location":"cli/#rm","text":"","title":"rm"},{"location":"cli/#rm-certificate","text":"","title":"rm-certificate"},{"location":"cli/#rm-tag","text":"","title":"rm-tag"},{"location":"cli/#server-url","text":"","title":"server-url"},{"location":"cli/#show-certificates","text":"","title":"show-certificates"},{"location":"cli/#snapshot_1","text":"","title":"snapshot"},{"location":"cli/#snapshot-data_1","text":"","title":"snapshot-data"},{"location":"cli/#status","text":"","title":"status"},{"location":"cli/#toggle-action","text":"","title":"toggle-action"},{"location":"cli/#user","text":"","title":"user"},{"location":"cli/#version","text":"","title":"version"},{"location":"cli/#-v-verbose","text":"","title":"-v, verbose"},{"location":"connectIntelliJ%202/","text":"Everytime you want to work from your IDE with Lightrun, you need to first authenticate your local environment with your Lightrun account. Prerequisites \u00b6 Before getting started, make sure: Your admin installs and configures the agent and registers it from the Application server. You install the plugin in your local IntelliJ environment Authenticate Lightrun from IntelliJ \u00b6 From IntelliJ, click the Lightrun tab to expand the sidebar. Click the red banner from the top of the plugin display. The browser opens to the Lightrun login page: Note The display might appear differently, with the Login and Register options appearing as buttons in the center of the Lightrun pane, similarly to the following: In this case, click the relevant option to authenticate. Log in to Lightrun with your user credentials. Once you're logged in, the Lightrun page reloads with a confirmation message. Notice that there's a timeout and you might need to re-login if it elapses. Go back to IntelliJ. The Lightrun banner in IntelliJ now appears green: Important If you authenticate Lightrun successfully, but relevant options are hidden, this means no agents are connected on the application server. The contextual Lightrun menu in IntelliJ displays relevant options: And the Lightrun quick menu appears on your tool bar: These menus include the options to logout as well as settings and other options.","title":"connectIntelliJ 2"},{"location":"connectIntelliJ%202/#prerequisites","text":"Before getting started, make sure: Your admin installs and configures the agent and registers it from the Application server. You install the plugin in your local IntelliJ environment","title":"Prerequisites"},{"location":"connectIntelliJ%202/#authenticate-lightrun-from-intellij","text":"From IntelliJ, click the Lightrun tab to expand the sidebar. Click the red banner from the top of the plugin display. The browser opens to the Lightrun login page: Note The display might appear differently, with the Login and Register options appearing as buttons in the center of the Lightrun pane, similarly to the following: In this case, click the relevant option to authenticate. Log in to Lightrun with your user credentials. Once you're logged in, the Lightrun page reloads with a confirmation message. Notice that there's a timeout and you might need to re-login if it elapses. Go back to IntelliJ. The Lightrun banner in IntelliJ now appears green: Important If you authenticate Lightrun successfully, but relevant options are hidden, this means no agents are connected on the application server. The contextual Lightrun menu in IntelliJ displays relevant options: And the Lightrun quick menu appears on your tool bar: These menus include the options to logout as well as settings and other options.","title":"Authenticate Lightrun from IntelliJ"},{"location":"connectIntelliJ-gettingstarted%202/","text":"Everytime you want to work from your IDE with Lightrun, you need to first authenticate your local environment with your Lightrun account. Prerequisites \u00b6 Before getting started, make sure: Your admin installs and configures the agent and registers it from the Application server. You install the plugin in your local IntelliJ environment Authenticate Lightrun from IntelliJ \u00b6 From IntelliJ, click the Lightrun tab to expand the sidebar. Click the red banner from the top of the plugin display. The browser opens to the Lightrun login page: Note The display might appear differently, with the Login and Register options appearing as buttons in the center of the Lightrun pane, similarly to the following: In this case, click the relevant option to authenticate. Log in to Lightrun with your user credentials. Once you're logged in, the Lightrun page reloads with a confirmation message. Notice that there's a timeout and you might need to re-login if it elapses. Go back to IntelliJ. The Lightrun banner in IntelliJ now appears green: Important If you authenticate Lightrun successfully, but relevant options are hidden, this means no agents are connected on the application server. The contextual Lightrun menu in IntelliJ displays relevant options: And the Lightrun quick menu appears on your tool bar: These menus include the options to logout as well as settings and other options.","title":"connectIntelliJ gettingstarted 2"},{"location":"connectIntelliJ-gettingstarted%202/#prerequisites","text":"Before getting started, make sure: Your admin installs and configures the agent and registers it from the Application server. You install the plugin in your local IntelliJ environment","title":"Prerequisites"},{"location":"connectIntelliJ-gettingstarted%202/#authenticate-lightrun-from-intellij","text":"From IntelliJ, click the Lightrun tab to expand the sidebar. Click the red banner from the top of the plugin display. The browser opens to the Lightrun login page: Note The display might appear differently, with the Login and Register options appearing as buttons in the center of the Lightrun pane, similarly to the following: In this case, click the relevant option to authenticate. Log in to Lightrun with your user credentials. Once you're logged in, the Lightrun page reloads with a confirmation message. Notice that there's a timeout and you might need to re-login if it elapses. Go back to IntelliJ. The Lightrun banner in IntelliJ now appears green: Important If you authenticate Lightrun successfully, but relevant options are hidden, this means no agents are connected on the application server. The contextual Lightrun menu in IntelliJ displays relevant options: And the Lightrun quick menu appears on your tool bar: These menus include the options to logout as well as settings and other options.","title":"Authenticate Lightrun from IntelliJ"},{"location":"connectIntelliJ-gettingstarted/","text":"Everytime you want to work from your IDE with Lightrun, you need to first authenticate your local environment with your Lightrun account. Prerequisites \u00b6 Before getting started, make sure: Your admin installs and configures the agent and registers it from the Application server. You install the plugin in your local IntelliJ environment Authenticate Lightrun from IntelliJ \u00b6 From IntelliJ, click the Lightrun tab to expand the sidebar. Click the red banner from the top of the plugin display. The browser opens to the Lightrun login page: Note The display might appear differently, with the Login and Register options appearing as buttons in the center of the Lightrun pane, similarly to the following: In this case, click the relevant option to authenticate. Log in to Lightrun with your user credentials. Once you're logged in, the Lightrun page reloads with a confirmation message. Notice that there's a timeout and you might need to re-login if it elapses. Go back to IntelliJ. The Lightrun banner in IntelliJ now appears green: Important If you authenticate Lightrun successfully, but relevant options are hidden, this means no agents are connected on the application server. The contextual Lightrun menu in IntelliJ displays relevant options: And the Lightrun quick menu appears on your tool bar: These menus include the options to logout as well as settings and other options.","title":"connectIntelliJ gettingstarted"},{"location":"connectIntelliJ-gettingstarted/#prerequisites","text":"Before getting started, make sure: Your admin installs and configures the agent and registers it from the Application server. You install the plugin in your local IntelliJ environment","title":"Prerequisites"},{"location":"connectIntelliJ-gettingstarted/#authenticate-lightrun-from-intellij","text":"From IntelliJ, click the Lightrun tab to expand the sidebar. Click the red banner from the top of the plugin display. The browser opens to the Lightrun login page: Note The display might appear differently, with the Login and Register options appearing as buttons in the center of the Lightrun pane, similarly to the following: In this case, click the relevant option to authenticate. Log in to Lightrun with your user credentials. Once you're logged in, the Lightrun page reloads with a confirmation message. Notice that there's a timeout and you might need to re-login if it elapses. Go back to IntelliJ. The Lightrun banner in IntelliJ now appears green: Important If you authenticate Lightrun successfully, but relevant options are hidden, this means no agents are connected on the application server. The contextual Lightrun menu in IntelliJ displays relevant options: And the Lightrun quick menu appears on your tool bar: These menus include the options to logout as well as settings and other options.","title":"Authenticate Lightrun from IntelliJ"},{"location":"connectIntelliJ/","text":"Everytime you want to work from your IDE with Lightrun, you need to first authenticate your local environment with your Lightrun account. Prerequisites \u00b6 Before getting started, make sure: Your admin installs and configures the agent and registers it from the Application server. You install the plugin in your local IntelliJ environment Authenticate Lightrun from IntelliJ \u00b6 From IntelliJ, click the Lightrun tab to expand the sidebar. Click the red banner from the top of the plugin display. The browser opens to the Lightrun login page: Note The display might appear differently, with the Login and Register options appearing as buttons in the center of the Lightrun pane, similarly to the following: In this case, click the relevant option to authenticate. Log in to Lightrun with your user credentials. Once you're logged in, the Lightrun page reloads with a confirmation message. Notice that there's a timeout and you might need to re-login if it elapses. Go back to IntelliJ. The Lightrun banner in IntelliJ now appears green: Important If you authenticate Lightrun successfully, but relevant options are hidden, this means no agents are connected on the application server. The contextual Lightrun menu in IntelliJ displays relevant options: And the Lightrun quick menu appears on your tool bar: These menus include the options to logout as well as settings and other options.","title":"Authenticate Lightrun"},{"location":"connectIntelliJ/#prerequisites","text":"Before getting started, make sure: Your admin installs and configures the agent and registers it from the Application server. You install the plugin in your local IntelliJ environment","title":"Prerequisites"},{"location":"connectIntelliJ/#authenticate-lightrun-from-intellij","text":"From IntelliJ, click the Lightrun tab to expand the sidebar. Click the red banner from the top of the plugin display. The browser opens to the Lightrun login page: Note The display might appear differently, with the Login and Register options appearing as buttons in the center of the Lightrun pane, similarly to the following: In this case, click the relevant option to authenticate. Log in to Lightrun with your user credentials. Once you're logged in, the Lightrun page reloads with a confirmation message. Notice that there's a timeout and you might need to re-login if it elapses. Go back to IntelliJ. The Lightrun banner in IntelliJ now appears green: Important If you authenticate Lightrun successfully, but relevant options are hidden, this means no agents are connected on the application server. The contextual Lightrun menu in IntelliJ displays relevant options: And the Lightrun quick menu appears on your tool bar: These menus include the options to logout as well as settings and other options.","title":"Authenticate Lightrun from IntelliJ"},{"location":"createaccount%202/","text":"Create your account \u00b6 To get started with Lightrun, the first person in your organization must create an account for themselves and connect it to their company. When you do this, you are automatically assigned a Manager role. Once you access your new account, you can send invitations to others by email. Sign up for Lightrun \u00b6 Create a user for yourself and get started setting things up by joining an existing workspace in your organization or creating a new one. From your browser, navigate to app.lightrun.com . The Lightrun welcome page loads. To create a new account, click Create an account . The Registration page loads. Complete the fields with your personal details. Choose a strong password that includes at least one lower case and upper case letter, one special character and one number. Alternatively, click Sign up with Google to use your Google address for quick registration. Check the reCAPTCHA box and then click Register . You are redirected to our onboarding wizard. From the left panel, click the operating system of the environment in which you'll run the app for relevant agent installation instructions. Once you've installed the agent, the Next button appears: Important You must install the agent before proceeding to step 6. If you log out without installing the agent, when you log back in you will be redirected to the onboarding wizard again. Tip Once you've installed the agent, when you log in the next time, you're redirected to the app. If still need help with onboarding, go to the Getting started menu. Click Next . Install the plugin for your IDE or click Next to go to the app and install the plugin later.","title":"Create your account"},{"location":"createaccount%202/#create-your-account","text":"To get started with Lightrun, the first person in your organization must create an account for themselves and connect it to their company. When you do this, you are automatically assigned a Manager role. Once you access your new account, you can send invitations to others by email.","title":"Create your account"},{"location":"createaccount%202/#sign-up","text":"Create a user for yourself and get started setting things up by joining an existing workspace in your organization or creating a new one. From your browser, navigate to app.lightrun.com . The Lightrun welcome page loads. To create a new account, click Create an account . The Registration page loads. Complete the fields with your personal details. Choose a strong password that includes at least one lower case and upper case letter, one special character and one number. Alternatively, click Sign up with Google to use your Google address for quick registration. Check the reCAPTCHA box and then click Register . You are redirected to our onboarding wizard. From the left panel, click the operating system of the environment in which you'll run the app for relevant agent installation instructions. Once you've installed the agent, the Next button appears: Important You must install the agent before proceeding to step 6. If you log out without installing the agent, when you log back in you will be redirected to the onboarding wizard again. Tip Once you've installed the agent, when you log in the next time, you're redirected to the app. If still need help with onboarding, go to the Getting started menu. Click Next . Install the plugin for your IDE or click Next to go to the app and install the plugin later.","title":"Sign up for Lightrun"},{"location":"createaccount/","text":"Create your account \u00b6 To get started with Lightrun, the first person in your organization must create an account for themselves and connect it to their company. When you do this, you are automatically assigned a Manager role. Once you access your new account, you can send invitations to others by email. Sign up for Lightrun \u00b6 Create a user for yourself and get started setting things up by joining an existing workspace in your organization or creating a new one. From your browser, navigate to app.lightrun.com . The Lightrun welcome page loads. To create a new account, click Create an account . The Registration page loads. Complete the fields with your personal details. Choose a strong password that includes at least one lower case and upper case letter, one special character and one number. Alternatively, click Sign up with Google to use your Google address for quick registration. Check the reCAPTCHA box and then click Register . You are redirected to our onboarding wizard. From the left panel, click the operating system of the environment in which you'll run the app for relevant agent installation instructions. Once you've installed the agent, the Next button appears: Important You must install the agent before proceeding to step 6. If you log out without installing the agent, when you log back in you will be redirected to the onboarding wizard again. Tip Once you've installed the agent, when you log in the next time, you're redirected to the app. If still need help with onboarding, go to the Getting started menu. Click Next . Install the plugin for your IDE or click Next to go to the app and install the plugin later.","title":"Create Your Account"},{"location":"createaccount/#create-your-account","text":"To get started with Lightrun, the first person in your organization must create an account for themselves and connect it to their company. When you do this, you are automatically assigned a Manager role. Once you access your new account, you can send invitations to others by email.","title":"Create your account"},{"location":"createaccount/#sign-up","text":"Create a user for yourself and get started setting things up by joining an existing workspace in your organization or creating a new one. From your browser, navigate to app.lightrun.com . The Lightrun welcome page loads. To create a new account, click Create an account . The Registration page loads. Complete the fields with your personal details. Choose a strong password that includes at least one lower case and upper case letter, one special character and one number. Alternatively, click Sign up with Google to use your Google address for quick registration. Check the reCAPTCHA box and then click Register . You are redirected to our onboarding wizard. From the left panel, click the operating system of the environment in which you'll run the app for relevant agent installation instructions. Once you've installed the agent, the Next button appears: Important You must install the agent before proceeding to step 6. If you log out without installing the agent, when you log back in you will be redirected to the onboarding wizard again. Tip Once you've installed the agent, when you log in the next time, you're redirected to the app. If still need help with onboarding, go to the Getting started menu. Click Next . Install the plugin for your IDE or click Next to go to the app and install the plugin later.","title":"Sign up for Lightrun"},{"location":"data-logs%202/","text":"Collect all log output \u00b6 Agent logs are collected and made available for troubleshooting if any issues arise while using Lightrun. Managers can work with agent logs as follows: Collect logs from all active agents Download any of the collected output Delete log output - this only deletes the output you've collected Note This is not related to the Lightrun log action, but rather the logs collected for running agents. Work with logs From the browser, navigate to Managers->Send logs by email . The log collection area loads: To collect new active logs, click Collect . To download a log, click Download from the relevant log row in Log Requests table. To delete output, click Delete from the relevant log row in Log Requests table.","title":"Collect all log output"},{"location":"data-logs%202/#collect-all-log-output","text":"Agent logs are collected and made available for troubleshooting if any issues arise while using Lightrun. Managers can work with agent logs as follows: Collect logs from all active agents Download any of the collected output Delete log output - this only deletes the output you've collected Note This is not related to the Lightrun log action, but rather the logs collected for running agents.","title":"Collect all log output"},{"location":"data-logs/","text":"Collect all log output \u00b6 Agent logs are collected and made available for troubleshooting if any issues arise while using Lightrun. Managers can work with agent logs as follows: Collect logs from all active agents Download any of the collected output Delete log output - this only deletes the output you've collected Note This is not related to the Lightrun log action, but rather the logs collected for running agents. Work with logs From the browser, navigate to Managers->Send logs by email . The log collection area loads: To collect new active logs, click Collect . To download a log, click Download from the relevant log row in Log Requests table. To delete output, click Delete from the relevant log row in Log Requests table.","title":"Collect Logs"},{"location":"data-logs/#collect-all-log-output","text":"Agent logs are collected and made available for troubleshooting if any issues arise while using Lightrun. Managers can work with agent logs as follows: Collect logs from all active agents Download any of the collected output Delete log output - this only deletes the output you've collected Note This is not related to the Lightrun log action, but rather the logs collected for running agents.","title":"Collect all log output"},{"location":"data-security%202/","text":"Manage data security \u00b6 You can control and protect your data by configuring: Blocklisting - prevent developers from inserting breakpoints in sensitive classes Data redaction (PII redaction) - prevent sensitive data from appearing in logs Note For additional security, you can manage users and user roles and audit use of the system . Blocklisting \u00b6 Use blocklists to prevent breakpoints from being inserted in classes that might expose sensitive data. Files and packages that are part of the patterns you've configured in the Blocklist section are protected from insertion of breakpoints. You can configure blocklisting to include a broad range of data using expressions and then thereafter, you can add exceptions for any relevant sub-classes in which you do want to allow breakpoint insertion in any case. Every time the agent starts up, the configuration is downloaded and applied to all future actions. If you modify the configuration, restart the agents in order to activate the newest configuration. All users can view the blocklists and exceptions from this area. Only managers can create, edit and delete patterns. Example Prevent breakpoints for com.sales.Ticket and for all classes that aren't in com.sales with this pattern: com.sales.Ticket !com.sales Add the following exception so that breakpoints can still be added to com.sales.Admin: com.users.Admin To configure blocklists and exceptions Log in to your Lightrun account and go to the Config menu. Select Blocklist . The Blocklist window loads with a list of any already existing patterns. To add a new pattern for blocklisting, click + from the Blocklist section. The Add Pattern dialog box opens: Enter any regular expression to indicate the pattern that should be blocklisted. Click OK . The dialog closes and the list of blocklisted patterns updates to include the newly added pattern. To add a blocklisting exception, click + from the Blocklist Exception section. The Add Pattern dialog box opens: Enter any relevant expression to indicate the pattern that should not be blocklisted. Click OK . The dialog closes and the list of blocklisted exception patterns updates to include the newly added pattern. Click delete from the relevant row to delete any pattern and enable breakpoint insertion from the Blocklist list, or to remove exceptions from the Blocklist Exception list. Data redaction \u00b6 Prevent Lightrun from evaluating breakpoints and logging sensitive data. Example Evaluate Master Card credit card data as redacted by configuring the following pattern: MasterCard: \\b5[1-5]\\d\\d([\\-\\ ]?)(?:\\d{4}\\1){2}\\d{4}\\b To configure data redaction Log in to your Lightrun account and go to the Config menu. Select PII Redaction . The Data Redaction window loads with a list of any already existing patterns. To add a new pattern for redaction, click +. The Add Pattern dialog box opens: Enter any relevant regular expression to indicate the pattern that should be redacted. Click OK . The dialog closes and the list of redacted patterns updates to include the newly added pattern. Click delete from the relevant row to delete any pattern and enable breakpoints and logging analysis.","title":"Manage data security"},{"location":"data-security%202/#manage-data-security","text":"You can control and protect your data by configuring: Blocklisting - prevent developers from inserting breakpoints in sensitive classes Data redaction (PII redaction) - prevent sensitive data from appearing in logs Note For additional security, you can manage users and user roles and audit use of the system .","title":"Manage data security"},{"location":"data-security%202/#blocklisting","text":"Use blocklists to prevent breakpoints from being inserted in classes that might expose sensitive data. Files and packages that are part of the patterns you've configured in the Blocklist section are protected from insertion of breakpoints. You can configure blocklisting to include a broad range of data using expressions and then thereafter, you can add exceptions for any relevant sub-classes in which you do want to allow breakpoint insertion in any case. Every time the agent starts up, the configuration is downloaded and applied to all future actions. If you modify the configuration, restart the agents in order to activate the newest configuration. All users can view the blocklists and exceptions from this area. Only managers can create, edit and delete patterns. Example Prevent breakpoints for com.sales.Ticket and for all classes that aren't in com.sales with this pattern: com.sales.Ticket !com.sales Add the following exception so that breakpoints can still be added to com.sales.Admin: com.users.Admin","title":"Blocklisting"},{"location":"data-security%202/#data-redaction","text":"Prevent Lightrun from evaluating breakpoints and logging sensitive data. Example Evaluate Master Card credit card data as redacted by configuring the following pattern: MasterCard: \\b5[1-5]\\d\\d([\\-\\ ]?)(?:\\d{4}\\1){2}\\d{4}\\b","title":"Data redaction"},{"location":"data-security/","text":"Manage data security \u00b6 You can control and protect your data by configuring: Blocklisting - prevent developers from inserting breakpoints in sensitive classes Data redaction (PII redaction) - prevent sensitive data from appearing in logs Note For additional security, you can manage users and user roles and audit use of the system . Blocklisting \u00b6 Use blocklists to prevent breakpoints from being inserted in classes that might expose sensitive data. Files and packages that are part of the patterns you've configured in the Blocklist section are protected from insertion of breakpoints. You can configure blocklisting to include a broad range of data using expressions and then thereafter, you can add exceptions for any relevant sub-classes in which you do want to allow breakpoint insertion in any case. Every time the agent starts up, the configuration is downloaded and applied to all future actions. If you modify the configuration, restart the agents in order to activate the newest configuration. All users can view the blocklists and exceptions from this area. Only managers can create, edit and delete patterns. Example Prevent breakpoints for com.sales.Ticket and for all classes that aren't in com.sales with this pattern: com.sales.Ticket !com.sales Add the following exception so that breakpoints can still be added to com.sales.Admin: com.users.Admin To configure blocklists and exceptions Log in to your Lightrun account and go to the Config menu. Select Blocklist . The Blocklist window loads with a list of any already existing patterns. To add a new pattern for blocklisting, click + from the Blocklist section. The Add Pattern dialog box opens: Enter any regular expression to indicate the pattern that should be blocklisted. Click OK . The dialog closes and the list of blocklisted patterns updates to include the newly added pattern. To add a blocklisting exception, click + from the Blocklist Exception section. The Add Pattern dialog box opens: Enter any relevant expression to indicate the pattern that should not be blocklisted. Click OK . The dialog closes and the list of blocklisted exception patterns updates to include the newly added pattern. Click delete from the relevant row to delete any pattern and enable breakpoint insertion from the Blocklist list, or to remove exceptions from the Blocklist Exception list. Data redaction \u00b6 Prevent Lightrun from evaluating breakpoints and logging sensitive data. Example Evaluate Master Card credit card data as redacted by configuring the following pattern: MasterCard: \\b5[1-5]\\d\\d([\\-\\ ]?)(?:\\d{4}\\1){2}\\d{4}\\b To configure data redaction Log in to your Lightrun account and go to the Config menu. Select PII Redaction . The Data Redaction window loads with a list of any already existing patterns. To add a new pattern for redaction, click +. The Add Pattern dialog box opens: Enter any relevant regular expression to indicate the pattern that should be redacted. Click OK . The dialog closes and the list of redacted patterns updates to include the newly added pattern. Click delete from the relevant row to delete any pattern and enable breakpoints and logging analysis.","title":"Manage Data Security"},{"location":"data-security/#manage-data-security","text":"You can control and protect your data by configuring: Blocklisting - prevent developers from inserting breakpoints in sensitive classes Data redaction (PII redaction) - prevent sensitive data from appearing in logs Note For additional security, you can manage users and user roles and audit use of the system .","title":"Manage data security"},{"location":"data-security/#blocklisting","text":"Use blocklists to prevent breakpoints from being inserted in classes that might expose sensitive data. Files and packages that are part of the patterns you've configured in the Blocklist section are protected from insertion of breakpoints. You can configure blocklisting to include a broad range of data using expressions and then thereafter, you can add exceptions for any relevant sub-classes in which you do want to allow breakpoint insertion in any case. Every time the agent starts up, the configuration is downloaded and applied to all future actions. If you modify the configuration, restart the agents in order to activate the newest configuration. All users can view the blocklists and exceptions from this area. Only managers can create, edit and delete patterns. Example Prevent breakpoints for com.sales.Ticket and for all classes that aren't in com.sales with this pattern: com.sales.Ticket !com.sales Add the following exception so that breakpoints can still be added to com.sales.Admin: com.users.Admin","title":"Blocklisting"},{"location":"data-security/#data-redaction","text":"Prevent Lightrun from evaluating breakpoints and logging sensitive data. Example Evaluate Master Card credit card data as redacted by configuring the following pattern: MasterCard: \\b5[1-5]\\d\\d([\\-\\ ]?)(?:\\d{4}\\1){2}\\d{4}\\b","title":"Data redaction"},{"location":"datadog%202/","text":"Integrate the application server with Datadog \u00b6 Datadog aggregates metrics and events (from integrations such as Lightrun), provides a quick search, filter, and analysis tool to support open-ended exploration of your logs and data, and provides customizable dashboards for data visualization. Note Manager role is required to edit integrations. Prerequisites Install and configure Datadog and copy the API key from your Datadog account. For additional assistance, refer to their troubleshooting guide as well. Ensure you've configured piping from the IDE. Connect to and disconnect from Datadog \u00b6 Open a browser and log in to your Lightrun account. Go to the Manager menu and click System Integrations . The page loads with all available integrations: From the Integrations page, click Connect from the Datadog card. The Datadog Integration window pops up: Paste the API key you copied from your Datadog account. Click Connect and wait for the toast message approving the connection. To disable the configuration, click Disconnect .","title":"Integrate the application server with Datadog"},{"location":"datadog%202/#integrate-the-application-server-with-datadog","text":"Datadog aggregates metrics and events (from integrations such as Lightrun), provides a quick search, filter, and analysis tool to support open-ended exploration of your logs and data, and provides customizable dashboards for data visualization. Note Manager role is required to edit integrations. Prerequisites Install and configure Datadog and copy the API key from your Datadog account. For additional assistance, refer to their troubleshooting guide as well. Ensure you've configured piping from the IDE.","title":"Integrate the application server with Datadog"},{"location":"datadog%202/#connect-to-and-disconnect-from-datadog","text":"Open a browser and log in to your Lightrun account. Go to the Manager menu and click System Integrations . The page loads with all available integrations: From the Integrations page, click Connect from the Datadog card. The Datadog Integration window pops up: Paste the API key you copied from your Datadog account. Click Connect and wait for the toast message approving the connection. To disable the configuration, click Disconnect .","title":"Connect to and disconnect from Datadog"},{"location":"datadog/","text":"Integrate the application server with Datadog \u00b6 Datadog aggregates metrics and events (from integrations such as Lightrun), provides a quick search, filter, and analysis tool to support open-ended exploration of your logs and data, and provides customizable dashboards for data visualization. Note Manager role is required to edit integrations. Prerequisites Install and configure Datadog and copy the API key from your Datadog account. For additional assistance, refer to their troubleshooting guide as well. Ensure you've configured piping from the IDE. Connect to and disconnect from Datadog \u00b6 Open a browser and log in to your Lightrun account. Go to the Manager menu and click System Integrations . The page loads with all available integrations: From the Integrations page, click Connect from the Datadog card. The Datadog Integration window pops up: Paste the API key you copied from your Datadog account. Click Connect and wait for the toast message approving the connection. To disable the configuration, click Disconnect .","title":"Datadog"},{"location":"datadog/#integrate-the-application-server-with-datadog","text":"Datadog aggregates metrics and events (from integrations such as Lightrun), provides a quick search, filter, and analysis tool to support open-ended exploration of your logs and data, and provides customizable dashboards for data visualization. Note Manager role is required to edit integrations. Prerequisites Install and configure Datadog and copy the API key from your Datadog account. For additional assistance, refer to their troubleshooting guide as well. Ensure you've configured piping from the IDE.","title":"Integrate the application server with Datadog"},{"location":"datadog/#connect-to-and-disconnect-from-datadog","text":"Open a browser and log in to your Lightrun account. Go to the Manager menu and click System Integrations . The page loads with all available integrations: From the Integrations page, click Connect from the Datadog card. The Datadog Integration window pops up: Paste the API key you copied from your Datadog account. Click Connect and wait for the toast message approving the connection. To disable the configuration, click Disconnect .","title":"Connect to and disconnect from Datadog"},{"location":"exceptions-browser/","text":"View exceptions from the browser \u00b6 Lightrun can monitor all exceptions that are thrown in the applications that you're monitoring, and then offer insights about those exceptions. Prerequisites To receive exception reports and insights, an admin should first configure the agent for exceptions . Additionally, by default, every exception in the application is reported - even those caught by the exception handler. You can change this with property configuration in the admin.config file. From the server you can view general statistics about exceptions, and you can also drill down to view more specific details per exception. To view exceptions data From your browser, log in to Lightrun. Navigate to Exceptions \u2192 Data The Exceptions table loads: Understanding exceptions data \u00b6 The Exceptions table lists general details and statistics for each of the exceptions that are thrown by all of the applications you're watching. The Exceptions table appears similar to the following: From this area, you can: search for exceptions view exception details Search for specific exceptions \u00b6 Go to the top right of the table area to access different search options, such as those in the following image: You can search using: free text by pre-configured specific time frames available from the Time dropdown list by a custom range of time that you set yourself View exception type details and exception stack traces \u00b6 You can drill down to view: specific details for a specific exception type stack trace frame-by-frame for a specific exception instance To drill down for details Click a specific type of exception from the table to view the list of exceptions of that type and related details. From the module listing exceptions by type, click a specific exception to view its stack trace. For each frame in the stack trace you can also see the snapshot of the frame. Click the row of a specific frame to view the variables related to the exception that was thrown.","title":"View Exceptions from the Browser"},{"location":"exceptions-browser/#view-exceptions-from-the-browser","text":"Lightrun can monitor all exceptions that are thrown in the applications that you're monitoring, and then offer insights about those exceptions. Prerequisites To receive exception reports and insights, an admin should first configure the agent for exceptions . Additionally, by default, every exception in the application is reported - even those caught by the exception handler. You can change this with property configuration in the admin.config file. From the server you can view general statistics about exceptions, and you can also drill down to view more specific details per exception.","title":"View exceptions from the browser"},{"location":"exceptions-browser/#understanding-exceptions-data","text":"The Exceptions table lists general details and statistics for each of the exceptions that are thrown by all of the applications you're watching. The Exceptions table appears similar to the following: From this area, you can: search for exceptions view exception details","title":"Understanding exceptions data"},{"location":"exceptions-browser/#search","text":"Go to the top right of the table area to access different search options, such as those in the following image: You can search using: free text by pre-configured specific time frames available from the Time dropdown list by a custom range of time that you set yourself","title":"Search for specific exceptions"},{"location":"exceptions-browser/#details","text":"You can drill down to view: specific details for a specific exception type stack trace frame-by-frame for a specific exception instance","title":"View exception type details and exception stack traces"},{"location":"getting-started%202/","text":"Getting started \u00b6 sldkfjslkdfjlksdjflksdjflkjsdfkljsdklfjlsdkjflkjsdf Integrate with GitHub \u00b6 Manage your pull requests \u00b6 Get around the dashboard \u00b6","title":"Getting started"},{"location":"getting-started%202/#getting-started","text":"sldkfjslkdfjlksdjflksdjflkjsdfkljsdklfjlsdkjflkjsdf","title":"Getting started"},{"location":"getting-started%202/#integrate-with-github","text":"","title":"Integrate with GitHub"},{"location":"getting-started%202/#manage-your-pull-requests","text":"","title":"Manage your pull requests"},{"location":"getting-started%202/#get-around-the-dashboard","text":"","title":"Get around the dashboard"},{"location":"getting-started/","text":"Getting started \u00b6 sldkfjslkdfjlksdjflksdjflkjsdfkljsdklfjlsdkjflkjsdf Integrate with GitHub \u00b6 Manage your pull requests \u00b6 Get around the dashboard \u00b6","title":"Getting started"},{"location":"getting-started/#getting-started","text":"sldkfjslkdfjlksdjflksdjflkjsdfkljsdklfjlsdkjflkjsdf","title":"Getting started"},{"location":"getting-started/#integrate-with-github","text":"","title":"Integrate with GitHub"},{"location":"getting-started/#manage-your-pull-requests","text":"","title":"Manage your pull requests"},{"location":"getting-started/#get-around-the-dashboard","text":"","title":"Get around the dashboard"},{"location":"glassfish%202/","text":"Configure Glassfish for Lightrun \u00b6 Glassfish is an open source Java application server by Oracle. The domain.xml file contains most of the Oracle GlassFish Server configurations. To start using Lightrun with a Glassfish server, first add the agent path as a JVM option to the Glassfish java-config block as in this example from lines 165-169 . To configure Glassfish for Lightrun You can add the agent path option with any of these options: from the Glassfish Admin panel 1. Copy the agent path option. -agentpath:<install_dir>/agent/lightrun_agent.so=--lightrun_extra_class_path=<glassfish-domain-path>/applications/<app-name>/WEB-INF/classes/ 2. Navigate to the Admin panel (usually at http://localhost:4848 ) 3. Go to Configurations=> server-config 4. Select the JVM Options tab. 4. Paste the option in the dialog box. from your CLI 1. Connect to your Glassfish server (usually at http://localhost:4848 ). 2. Copy the following, update it based on your configurations and then run the asadmin create-jvm-options command from the terminal: asadmin create-jvm-options -agentpath:<install_dir>/agent/lightrun_agent.so=--lightrun_extra_class_path=<glassfish-domain-path>/applications/<app-name>/WEB-INF/classes/ manually from the Glassfish domain.xml file 1. Copy the agent path option. -agentpath:<install_dir>/agent/lightrun_agent.so=--lightrun_extra_class_path=<glassfish-domain-path>/applications/<app-name>/WEB-INF/classes/ 2. Navigate to <glassfish-domain-path>/config/domain.xml 3. Paste the option in the java-config block of the file and save the changes. Note This configuration enables the Lightrun agent to run every time the webserver restarts. Glassfish autodeploy (dynamic deployment) does not start a new agent. The agent should be restarted in order to apply new actions.","title":"Configure Glassfish for Lightrun"},{"location":"glassfish%202/#configure-glassfish-for-lightrun","text":"Glassfish is an open source Java application server by Oracle. The domain.xml file contains most of the Oracle GlassFish Server configurations. To start using Lightrun with a Glassfish server, first add the agent path as a JVM option to the Glassfish java-config block as in this example from lines 165-169 .","title":"Configure Glassfish for Lightrun"},{"location":"glassfish/","text":"Configure Glassfish for Lightrun \u00b6 Glassfish is an open source Java application server by Oracle. The domain.xml file contains most of the Oracle GlassFish Server configurations. To start using Lightrun with a Glassfish server, first add the agent path as a JVM option to the Glassfish java-config block as in this example from lines 165-169 . To configure Glassfish for Lightrun You can add the agent path option with any of these options: from the Glassfish Admin panel 1. Copy the agent path option. -agentpath:<install_dir>/agent/lightrun_agent.so=--lightrun_extra_class_path=<glassfish-domain-path>/applications/<app-name>/WEB-INF/classes/ 2. Navigate to the Admin panel (usually at http://localhost:4848 ) 3. Go to Configurations=> server-config 4. Select the JVM Options tab. 4. Paste the option in the dialog box. from your CLI 1. Connect to your Glassfish server (usually at http://localhost:4848 ). 2. Copy the following, update it based on your configurations and then run the asadmin create-jvm-options command from the terminal: asadmin create-jvm-options -agentpath:<install_dir>/agent/lightrun_agent.so=--lightrun_extra_class_path=<glassfish-domain-path>/applications/<app-name>/WEB-INF/classes/ manually from the Glassfish domain.xml file 1. Copy the agent path option. -agentpath:<install_dir>/agent/lightrun_agent.so=--lightrun_extra_class_path=<glassfish-domain-path>/applications/<app-name>/WEB-INF/classes/ 2. Navigate to <glassfish-domain-path>/config/domain.xml 3. Paste the option in the java-config block of the file and save the changes. Note This configuration enables the Lightrun agent to run every time the webserver restarts. Glassfish autodeploy (dynamic deployment) does not start a new agent. The agent should be restarted in order to apply new actions.","title":"Glassfish"},{"location":"glassfish/#configure-glassfish-for-lightrun","text":"Glassfish is an open source Java application server by Oracle. The domain.xml file contains most of the Oracle GlassFish Server configurations. To start using Lightrun with a Glassfish server, first add the agent path as a JVM option to the Glassfish java-config block as in this example from lines 165-169 .","title":"Configure Glassfish for Lightrun"},{"location":"ignore-quotas%202/","text":"Ignore Quotas defaults to off. Only users assigned the IGNORE-QUOTA role can perform this configuration; the checkbox is disabled for other users.","title":"Ignore quotas 2"},{"location":"ignore-quotas/","text":"Ignore Quotas defaults to off. Only users assigned the IGNORE-QUOTA role can perform this configuration; the checkbox is disabled for other users.","title":"Ignore quotas"},{"location":"index%202/","text":"Welcome to Lightrun \u00b6 Lightrun provides granular code-level observability in real-time directly from the environment in which the app is running. With this perspective into your code, you can troubleshoot, test and debug your application by investigating issues directly from the environments in which they're running, while they're running, including the development, staging and production environments. Add Lightrun actions into the relevant lines of code, on-the-fly. Lightrun actions include: Logs Metrics Snapshots - virtual breakpoints that don't stop the app Use these Lightrun actions to get the relevant runtime logs for your live application, based on the issue you're investigating and to view and analyze actual performance metrics. The rest of this topic covers: Lightrun architecture System requirements Next steps Lightrun architecture \u00b6 Lightrun comprises these parts: Management Server - this is the Lightrun server, responsible for service management; this is the fundamental \"backbone\" of the platform. With our SaaS deployment, Lightrun manages this side of things; all you need to do is install and run the Lightrun agents within your live apps. Java Agent - the JVMTI agent that runs alongside the application on your application servers; this agent dynamically inserts the logs, metrics and snapshots in the code based on the Lightrun actions you run. Client - the IDE plugin and command line utility; you can use either to add, remove and modify actions - whichever is part of your natural workflow. Whenever you run a command to insert an action, the agent receives your request and adds those actions accordingly. These three components communicate with one another as illustrated in the following diagram: System requirements \u00b6 Lightrun requires the following system components: Agent installation \u00b6 JDK/OpenJDK 1.7 or newer Linux with GLIBCXX_3.4.19 or newer (Ubuntu 14+, Centos 7+ or equivalent) IntelliJ plugin installation \u00b6 JDK/OpenJDK 1.8 or newer IntelliJ Idea 2018.3 / 2019.3 / 2020.1 Next steps \u00b6 Install the agent on the relevant application servers. Install the plugin in your IDE.","title":"Welcome to Lightrun"},{"location":"index%202/#welcome-to-lightrun","text":"Lightrun provides granular code-level observability in real-time directly from the environment in which the app is running. With this perspective into your code, you can troubleshoot, test and debug your application by investigating issues directly from the environments in which they're running, while they're running, including the development, staging and production environments. Add Lightrun actions into the relevant lines of code, on-the-fly. Lightrun actions include: Logs Metrics Snapshots - virtual breakpoints that don't stop the app Use these Lightrun actions to get the relevant runtime logs for your live application, based on the issue you're investigating and to view and analyze actual performance metrics. The rest of this topic covers: Lightrun architecture System requirements Next steps","title":"Welcome to Lightrun"},{"location":"index%202/#lightrun-architecture","text":"Lightrun comprises these parts: Management Server - this is the Lightrun server, responsible for service management; this is the fundamental \"backbone\" of the platform. With our SaaS deployment, Lightrun manages this side of things; all you need to do is install and run the Lightrun agents within your live apps. Java Agent - the JVMTI agent that runs alongside the application on your application servers; this agent dynamically inserts the logs, metrics and snapshots in the code based on the Lightrun actions you run. Client - the IDE plugin and command line utility; you can use either to add, remove and modify actions - whichever is part of your natural workflow. Whenever you run a command to insert an action, the agent receives your request and adds those actions accordingly. These three components communicate with one another as illustrated in the following diagram:","title":"Lightrun architecture"},{"location":"index%202/#system-requirements","text":"Lightrun requires the following system components:","title":"System requirements"},{"location":"index%202/#agent-installation","text":"JDK/OpenJDK 1.7 or newer Linux with GLIBCXX_3.4.19 or newer (Ubuntu 14+, Centos 7+ or equivalent)","title":"Agent installation"},{"location":"index%202/#intellij-plugin-installation","text":"JDK/OpenJDK 1.8 or newer IntelliJ Idea 2018.3 / 2019.3 / 2020.1","title":"IntelliJ plugin installation"},{"location":"index%202/#next-steps","text":"Install the agent on the relevant application servers. Install the plugin in your IDE.","title":"Next steps"},{"location":"install%202/","text":"Install the agent \u00b6 The Lightrun agent is the core of how the platform collects and displays relevant data for you. Prerequisites for installing the agent vary depending on the application server you're using. Every application server has its own distinct set of JVM customization arguments. Go to Server Configuration for more details. Note Lightrun currently supports JVM-based applications. Set up the agent From the server where your application is running, log in to Lightrun from the browser. Navigate to Getting started=>Install the agent . From the Install the Agent section, select the tab for the operating system that your application server has installed. Copy and run the script. The script on this page already includes your server IP and port values. This script is already customized for you with your server IP and port values. Tip Check out the content of the file agent/agent.config . It includes many options, including the URL for the Lightrun server. See Agent Administration for additional information. Once you've deployed the agent, add it to your application as follows: From the application server, navigate to the folder where your application resides. From the browser, copy the command and follow the instructions to run it.","title":"Install the agent"},{"location":"install%202/#install-the-agent","text":"The Lightrun agent is the core of how the platform collects and displays relevant data for you. Prerequisites for installing the agent vary depending on the application server you're using. Every application server has its own distinct set of JVM customization arguments. Go to Server Configuration for more details. Note Lightrun currently supports JVM-based applications.","title":"Install the agent"},{"location":"install-agent%202/","text":"Install the agent \u00b6 The Lightrun agent is the core of how the platform collects and displays relevant data for you. Prerequisites for installing the agent vary depending on the application server you're using. Every application server has its own distinct set of JVM customization arguments. Go to Server Configuration for more details. Note Lightrun currently supports JVM-based applications. Set up the agent From the server where your application is running, log in to Lightrun from the browser. Navigate to Getting started=>Install the agent . From the Install the Agent section, select the tab for the operating system that your application server has installed. Copy and run the script. The script on this page already includes your server IP and port values. This script is already customized for you with your server IP and port values. Tip Check out the content of the file agent/agent.config . It includes many options, including the URL for the Lightrun server. See Agent Administration for additional information. Once you've deployed the agent, add it to your application as follows: From the application server, navigate to the folder where your application resides. From the browser, copy the command and follow the instructions to run it.","title":"Install agent 2"},{"location":"install-agent%202/#install-the-agent","text":"The Lightrun agent is the core of how the platform collects and displays relevant data for you. Prerequisites for installing the agent vary depending on the application server you're using. Every application server has its own distinct set of JVM customization arguments. Go to Server Configuration for more details. Note Lightrun currently supports JVM-based applications.","title":"Install the agent"},{"location":"install-agent/","text":"Install the agent \u00b6 The Lightrun agent is the core of how the platform collects and displays relevant data for you. Prerequisites for installing the agent vary depending on the application server you're using. Every application server has its own distinct set of JVM customization arguments. Go to Server Configuration for more details. Note Lightrun currently supports JVM-based applications. Set up the agent From the server where your application is running, log in to Lightrun from the browser. Navigate to Getting started=>Install the agent . From the Install the Agent section, select the tab for the operating system that your application server has installed. Copy and run the script. The script on this page already includes your server IP and port values. This script is already customized for you with your server IP and port values. Tip Check out the content of the file agent/agent.config . It includes many options, including the URL for the Lightrun server. See Agent Administration for additional information. Once you've deployed the agent, add it to your application as follows: From the application server, navigate to the folder where your application resides. From the browser, copy the command and follow the instructions to run it.","title":"Install the Agent"},{"location":"install-agent/#install-the-agent","text":"The Lightrun agent is the core of how the platform collects and displays relevant data for you. Prerequisites for installing the agent vary depending on the application server you're using. Every application server has its own distinct set of JVM customization arguments. Go to Server Configuration for more details. Note Lightrun currently supports JVM-based applications.","title":"Install the agent"},{"location":"install-client%202/","text":"Install the plugin \u00b6 With Lightrun, you can add actions (logs, metrics, snapshots) from the source code of your live app either from your IDE, or from the CLI. To use Lightrun, [attach the Lightrun agent] to your running application and then install the plugin in your IDE. Note Lightrun currently supports the IntelliJ IDE. To install the plugin Log in to your Lightrun account from your browser. The Lightrun app loads. Navigate to Getting Started=>Install the Plugin . Scroll down to the Install the Plugin section. Click Download plugin and store the file in a memorable location. Don't unzip the file. Now, navigate to your IntelliJ instance. From IntelliJ, navigate to Preferences (on Mac OS) or Settings (On Windows/Linux): Go to the Plugins section: Click the settings cog from the top right and select Install Plugin from Disk : Select the plugin zip file from the folder where you stored it in step 3 . Once installed, Lightrun options appear in the Settings menu. Plugins : Lightrun settings : You can configure these settings as follows: * Lightrun Server URL - this is our backend server it should point to the right URL by default * Source Version Warnings - we alert you if the code in the IDE doesn't match the code that is running our agent * Use Embedded Browser - this enables login and authentication directly from the IDE; if disabled, when logging in you are redirected to your default browser Note The Use an embedded browser option uses such a browser for logging-in to the Lightrun server. If you are using the external browser but authentication fails, activate this option explicitly and update your IDE to 2020.2 or newer. * Certificate Pinning - verifies the server certificate matches your requests and that you are actually connecting to the Lightrun server; this feature enforces security and is highly recommended When prompted, restart IntelliJ. Lightrun appears in the right-hand sidebar.","title":"Install the plugin"},{"location":"install-client%202/#install-the-plugin","text":"With Lightrun, you can add actions (logs, metrics, snapshots) from the source code of your live app either from your IDE, or from the CLI. To use Lightrun, [attach the Lightrun agent] to your running application and then install the plugin in your IDE. Note Lightrun currently supports the IntelliJ IDE.","title":"Install the plugin"},{"location":"install-client/","text":"Install the plugin \u00b6 With Lightrun, you can add actions (logs, metrics, snapshots) from the source code of your live app either from your IDE, or from the CLI. To use Lightrun, [attach the Lightrun agent] to your running application and then install the plugin in your IDE. Note Lightrun currently supports the IntelliJ IDE. To install the plugin Log in to your Lightrun account from your browser. The Lightrun app loads. Navigate to Getting Started=>Install the Plugin . Scroll down to the Install the Plugin section. Click Download plugin and store the file in a memorable location. Don't unzip the file. Now, navigate to your IntelliJ instance. From IntelliJ, navigate to Preferences (on Mac OS) or Settings (On Windows/Linux): Go to the Plugins section: Click the settings cog from the top right and select Install Plugin from Disk : Select the plugin zip file from the folder where you stored it in step 3 . Once installed, Lightrun options appear in the Settings menu. Plugins : Lightrun settings : You can configure these settings as follows: * Lightrun Server URL - this is our backend server it should point to the right URL by default * Source Version Warnings - we alert you if the code in the IDE doesn't match the code that is running our agent * Use Embedded Browser - this enables login and authentication directly from the IDE; if disabled, when logging in you are redirected to your default browser Note The Use an embedded browser option uses such a browser for logging-in to the Lightrun server. If you are using the external browser but authentication fails, activate this option explicitly and update your IDE to 2020.2 or newer. * Certificate Pinning - verifies the server certificate matches your requests and that you are actually connecting to the Lightrun server; this feature enforces security and is highly recommended When prompted, restart IntelliJ. Lightrun appears in the right-hand sidebar.","title":"Install the Plugin"},{"location":"install-client/#install-the-plugin","text":"With Lightrun, you can add actions (logs, metrics, snapshots) from the source code of your live app either from your IDE, or from the CLI. To use Lightrun, [attach the Lightrun agent] to your running application and then install the plugin in your IDE. Note Lightrun currently supports the IntelliJ IDE.","title":"Install the plugin"},{"location":"install-note%202/","text":"Note Be sure to change the port number if you changed the configuration from your docker-compose file. SSL certificates can be applied to domains only. Therefore, the page loads with an HTTPS warning.","title":"Install note 2"},{"location":"install-note/","text":"Note Be sure to change the port number if you changed the configuration from your docker-compose file. SSL certificates can be applied to domains only. Therefore, the page loads with an HTTPS warning.","title":"Install note"},{"location":"install-onprem%202/","text":"When you're ready to get rolling, Lightrun sets up the Management server for you and issues an admin account. Thereafter, you can: Spin the server up and down - this is only necessary for on-prem installations Log in to Lightrun from the Management server - this is only necessary for on-prem installations Deploy the application server agent Log in to Lightrun \u00b6 Once Lightrun has set the Management server up for you in your private network, you can create a user for yourself and get started setting things up. Lightrun defaults to port 8080 and requires HTTPS. Log in to your Lightrun instance with your admin credentials at https://192.168.1.108:8080/ . !!! note 1. Be sure to change the port number if you changed the configuration from your docker-compose file. 2. SSL certificates can be applied to domains only. Therefore, the page loads with an HTTPS warning. Add an exception for this URL in order to bypass the certificate warning that loads. The landing page loads with customized installation instructions for the agent, plugin and CLI. Deploy the agent \u00b6 Once you've logged in to the Management server, the agent can be downloaded and deployed. Copy the following code from the welcome page which loads with the customized server IP and port values when you log in. wget --no-check-certificate https://server-ip:8080/content/files/agent.zip & host = server-ip & port = 8080 -O agent.zip mkdir agent unzip agent.zip -d agent Tip Check out the content of the file agent/agent.config . It includes many options, including the Management server URL. Attach the agent \u00b6 Note Lightrun currently supports Java applications. Once you've deployed the agent, you should add it to your application as follows: From the application server, navigate to the folder where your application resides. Copy the following code: {.bash} java -agentpath:/path/to/agent/lightrun_agent.so RestOfTheArgumentsHere !!! note 1. Be sure to change the port number if you changed the configuration from your docker-compose file. 2. SSL certificates can be applied to domains only. Therefore, the page loads with an HTTPS warning. Replace the agentpath value with the path to the Lightrun agent where you downloaded it and replace RestOfTheArgumentsHere with the name of your application and then run the command. OR Add the JAVA_OPTS environment variable to the server so that all Java processes launched on that server have an agent attached. Copy the following command from the server and replace the agentpath value with the path to the Lightrun agent where you downloaded it: { . bash } export JAVA_OPTS =- agentpath : / path / to / agent / lightrun_agent . so Once an agent is up and running, you and your team can install the IntelliJ plugin .","title":"Install onprem 2"},{"location":"install-onprem%202/#log-in-to-lightrun","text":"Once Lightrun has set the Management server up for you in your private network, you can create a user for yourself and get started setting things up. Lightrun defaults to port 8080 and requires HTTPS. Log in to your Lightrun instance with your admin credentials at https://192.168.1.108:8080/ . !!! note 1. Be sure to change the port number if you changed the configuration from your docker-compose file. 2. SSL certificates can be applied to domains only. Therefore, the page loads with an HTTPS warning. Add an exception for this URL in order to bypass the certificate warning that loads. The landing page loads with customized installation instructions for the agent, plugin and CLI.","title":"Log in to Lightrun"},{"location":"install-onprem%202/#deploy-the-agent","text":"Once you've logged in to the Management server, the agent can be downloaded and deployed. Copy the following code from the welcome page which loads with the customized server IP and port values when you log in. wget --no-check-certificate https://server-ip:8080/content/files/agent.zip & host = server-ip & port = 8080 -O agent.zip mkdir agent unzip agent.zip -d agent Tip Check out the content of the file agent/agent.config . It includes many options, including the Management server URL.","title":"Deploy the agent"},{"location":"install-onprem%202/#attach-the-agent","text":"Note Lightrun currently supports Java applications. Once you've deployed the agent, you should add it to your application as follows: From the application server, navigate to the folder where your application resides. Copy the following code: {.bash} java -agentpath:/path/to/agent/lightrun_agent.so RestOfTheArgumentsHere !!! note 1. Be sure to change the port number if you changed the configuration from your docker-compose file. 2. SSL certificates can be applied to domains only. Therefore, the page loads with an HTTPS warning. Replace the agentpath value with the path to the Lightrun agent where you downloaded it and replace RestOfTheArgumentsHere with the name of your application and then run the command. OR Add the JAVA_OPTS environment variable to the server so that all Java processes launched on that server have an agent attached. Copy the following command from the server and replace the agentpath value with the path to the Lightrun agent where you downloaded it: { . bash } export JAVA_OPTS =- agentpath : / path / to / agent / lightrun_agent . so Once an agent is up and running, you and your team can install the IntelliJ plugin .","title":"Attach the agent"},{"location":"install-onprem/","text":"When you're ready to get rolling, Lightrun sets up the Management server for you and issues an admin account. Thereafter, you can: Spin the server up and down - this is only necessary for on-prem installations Log in to Lightrun from the Management server - this is only necessary for on-prem installations Deploy the application server agent Log in to Lightrun \u00b6 Once Lightrun has set the Management server up for you in your private network, you can create a user for yourself and get started setting things up. Lightrun defaults to port 8080 and requires HTTPS. Log in to your Lightrun instance with your admin credentials at https://192.168.1.108:8080/ . !!! note 1. Be sure to change the port number if you changed the configuration from your docker-compose file. 2. SSL certificates can be applied to domains only. Therefore, the page loads with an HTTPS warning. Add an exception for this URL in order to bypass the certificate warning that loads. The landing page loads with customized installation instructions for the agent, plugin and CLI. Deploy the agent \u00b6 Once you've logged in to the Management server, the agent can be downloaded and deployed. Copy the following code from the welcome page which loads with the customized server IP and port values when you log in. wget --no-check-certificate https://server-ip:8080/content/files/agent.zip & host = server-ip & port = 8080 -O agent.zip mkdir agent unzip agent.zip -d agent Tip Check out the content of the file agent/agent.config . It includes many options, including the Management server URL. Attach the agent \u00b6 Note Lightrun currently supports Java applications. Once you've deployed the agent, you should add it to your application as follows: From the application server, navigate to the folder where your application resides. Copy the following code: {.bash} java -agentpath:/path/to/agent/lightrun_agent.so RestOfTheArgumentsHere !!! note 1. Be sure to change the port number if you changed the configuration from your docker-compose file. 2. SSL certificates can be applied to domains only. Therefore, the page loads with an HTTPS warning. Replace the agentpath value with the path to the Lightrun agent where you downloaded it and replace RestOfTheArgumentsHere with the name of your application and then run the command. OR Add the JAVA_OPTS environment variable to the server so that all Java processes launched on that server have an agent attached. Copy the following command from the server and replace the agentpath value with the path to the Lightrun agent where you downloaded it: { . bash } export JAVA_OPTS =- agentpath : / path / to / agent / lightrun_agent . so Once an agent is up and running, you and your team can install the IntelliJ plugin .","title":"Install onprem"},{"location":"install-onprem/#log-in-to-lightrun","text":"Once Lightrun has set the Management server up for you in your private network, you can create a user for yourself and get started setting things up. Lightrun defaults to port 8080 and requires HTTPS. Log in to your Lightrun instance with your admin credentials at https://192.168.1.108:8080/ . !!! note 1. Be sure to change the port number if you changed the configuration from your docker-compose file. 2. SSL certificates can be applied to domains only. Therefore, the page loads with an HTTPS warning. Add an exception for this URL in order to bypass the certificate warning that loads. The landing page loads with customized installation instructions for the agent, plugin and CLI.","title":"Log in to Lightrun"},{"location":"install-onprem/#deploy-the-agent","text":"Once you've logged in to the Management server, the agent can be downloaded and deployed. Copy the following code from the welcome page which loads with the customized server IP and port values when you log in. wget --no-check-certificate https://server-ip:8080/content/files/agent.zip & host = server-ip & port = 8080 -O agent.zip mkdir agent unzip agent.zip -d agent Tip Check out the content of the file agent/agent.config . It includes many options, including the Management server URL.","title":"Deploy the agent"},{"location":"install-onprem/#attach-the-agent","text":"Note Lightrun currently supports Java applications. Once you've deployed the agent, you should add it to your application as follows: From the application server, navigate to the folder where your application resides. Copy the following code: {.bash} java -agentpath:/path/to/agent/lightrun_agent.so RestOfTheArgumentsHere !!! note 1. Be sure to change the port number if you changed the configuration from your docker-compose file. 2. SSL certificates can be applied to domains only. Therefore, the page loads with an HTTPS warning. Replace the agentpath value with the path to the Lightrun agent where you downloaded it and replace RestOfTheArgumentsHere with the name of your application and then run the command. OR Add the JAVA_OPTS environment variable to the server so that all Java processes launched on that server have an agent attached. Copy the following command from the server and replace the agentpath value with the path to the Lightrun agent where you downloaded it: { . bash } export JAVA_OPTS =- agentpath : / path / to / agent / lightrun_agent . so Once an agent is up and running, you and your team can install the IntelliJ plugin .","title":"Attach the agent"},{"location":"install/","text":"Install the agent \u00b6 The Lightrun agent is the core of how the platform collects and displays relevant data for you. Prerequisites for installing the agent vary depending on the application server you're using. Every application server has its own distinct set of JVM customization arguments. Go to Server Configuration for more details. Note Lightrun currently supports JVM-based applications. Set up the agent From the server where your application is running, log in to Lightrun from the browser. Navigate to Getting started=>Install the agent . From the Install the Agent section, select the tab for the operating system that your application server has installed. Copy and run the script. The script on this page already includes your server IP and port values. This script is already customized for you with your server IP and port values. Tip Check out the content of the file agent/agent.config . It includes many options, including the URL for the Lightrun server. See Agent Administration for additional information. Once you've deployed the agent, add it to your application as follows: From the application server, navigate to the folder where your application resides. From the browser, copy the command and follow the instructions to run it.","title":"Install the Agent"},{"location":"install/#install-the-agent","text":"The Lightrun agent is the core of how the platform collects and displays relevant data for you. Prerequisites for installing the agent vary depending on the application server you're using. Every application server has its own distinct set of JVM customization arguments. Go to Server Configuration for more details. Note Lightrun currently supports JVM-based applications.","title":"Install the agent"},{"location":"integration%202/","text":"Configure your server: overview \u00b6 The Lightrun agent is the core of how the platform collects and displays relevant data for you. Prerequisites for installing the agent vary depending on the application server you're using. Every application server has its own distinct set of JVM customization arguments. Lightrun supports integration with these application servers: Tomcat Glassfish Wildfly Jetty Weblogic Read here for more details about installing the agent.","title":"Configure your server: overview"},{"location":"integration%202/#configure-your-server-overview","text":"The Lightrun agent is the core of how the platform collects and displays relevant data for you. Prerequisites for installing the agent vary depending on the application server you're using. Every application server has its own distinct set of JVM customization arguments. Lightrun supports integration with these application servers: Tomcat Glassfish Wildfly Jetty Weblogic Read here for more details about installing the agent.","title":"Configure your server: overview"},{"location":"integration/","text":"Configure your server: overview \u00b6 The Lightrun agent is the core of how the platform collects and displays relevant data for you. Prerequisites for installing the agent vary depending on the application server you're using. Every application server has its own distinct set of JVM customization arguments. Lightrun supports integration with these application servers: Tomcat Glassfish Wildfly Jetty Weblogic Read here for more details about installing the agent.","title":"Overview"},{"location":"integration/#configure-your-server-overview","text":"The Lightrun agent is the core of how the platform collects and displays relevant data for you. Prerequisites for installing the agent vary depending on the application server you're using. Every application server has its own distinct set of JVM customization arguments. Lightrun supports integration with these application servers: Tomcat Glassfish Wildfly Jetty Weblogic Read here for more details about installing the agent.","title":"Configure your server: overview"},{"location":"jetty%202/","text":"Configure Jetty for Lightrun \u00b6 Jetty is a Java application server by Eclipse. As part of Jetty installation, the start.d directory is automatically added to the system. For Lightrun integration, you need to add a new file to this directory. To configure Jetty for Lightrun Create a new file lightrun.ini and add it to the start.d directory. Copy and paste the following content in the new .ini file: --exec -agentpath:<install_dir>/agent/lightrun_agent.so","title":"Configure Jetty for Lightrun"},{"location":"jetty%202/#configure-jetty-for-lightrun","text":"Jetty is a Java application server by Eclipse. As part of Jetty installation, the start.d directory is automatically added to the system. For Lightrun integration, you need to add a new file to this directory.","title":"Configure Jetty for Lightrun"},{"location":"jetty/","text":"Configure Jetty for Lightrun \u00b6 Jetty is a Java application server by Eclipse. As part of Jetty installation, the start.d directory is automatically added to the system. For Lightrun integration, you need to add a new file to this directory. To configure Jetty for Lightrun Create a new file lightrun.ini and add it to the start.d directory. Copy and paste the following content in the new .ini file: --exec -agentpath:<install_dir>/agent/lightrun_agent.so","title":"Jetty"},{"location":"jetty/#configure-jetty-for-lightrun","text":"Jetty is a Java application server by Eclipse. As part of Jetty installation, the start.d directory is automatically added to the system. For Lightrun integration, you need to add a new file to this directory.","title":"Configure Jetty for Lightrun"},{"location":"logzio%202/","text":"Integrate the application server with Logz.io \u00b6 Logz searches and queries your logs to help you figure out when things go wrong, and receives your metrics and then provides alerts and pattern-based insights, and data visualization dashboards. Logz.io can receive data from Lightrun with the help of the Logz.io API key. Note Manager role is required to edit integrations. Prerequisites Install and configure Logz.io and then generate and copy a Log shipping API token from your Logz account. For additional help, see their troubleshooting guide as well. Ensure you've configured piping from the IDE. Connect to and disconnect from Logz.io \u00b6 Open a browser and log in to your Lightrun account. Go to the Manager menu and click System Integrations . The page loads with all available integrations: From the Integrations page, click Connect from the Logz.io card. The Logz.io Integration window pops up: Enter the URL for your Logz.io listener , any metadata you want to have attached to your logs, and paste the Log shipping API token you copied from your Logz.io account. Click Connect and wait for the approval toast message. To disable the configuration, click Disconnect .","title":"Integrate the application server with Logz.io"},{"location":"logzio%202/#integrate-the-application-server-with-logzio","text":"Logz searches and queries your logs to help you figure out when things go wrong, and receives your metrics and then provides alerts and pattern-based insights, and data visualization dashboards. Logz.io can receive data from Lightrun with the help of the Logz.io API key. Note Manager role is required to edit integrations. Prerequisites Install and configure Logz.io and then generate and copy a Log shipping API token from your Logz account. For additional help, see their troubleshooting guide as well. Ensure you've configured piping from the IDE.","title":"Integrate the application server with Logz.io"},{"location":"logzio%202/#connect-to-and-disconnect-from-logzio","text":"Open a browser and log in to your Lightrun account. Go to the Manager menu and click System Integrations . The page loads with all available integrations: From the Integrations page, click Connect from the Logz.io card. The Logz.io Integration window pops up: Enter the URL for your Logz.io listener , any metadata you want to have attached to your logs, and paste the Log shipping API token you copied from your Logz.io account. Click Connect and wait for the approval toast message. To disable the configuration, click Disconnect .","title":"Connect to and disconnect from Logz.io"},{"location":"logzio/","text":"Integrate the application server with Logz.io \u00b6 Logz searches and queries your logs to help you figure out when things go wrong, and receives your metrics and then provides alerts and pattern-based insights, and data visualization dashboards. Logz.io can receive data from Lightrun with the help of the Logz.io API key. Note Manager role is required to edit integrations. Prerequisites Install and configure Logz.io and then generate and copy a Log shipping API token from your Logz account. For additional help, see their troubleshooting guide as well. Ensure you've configured piping from the IDE. Connect to and disconnect from Logz.io \u00b6 Open a browser and log in to your Lightrun account. Go to the Manager menu and click System Integrations . The page loads with all available integrations: From the Integrations page, click Connect from the Logz.io card. The Logz.io Integration window pops up: Enter the URL for your Logz.io listener , any metadata you want to have attached to your logs, and paste the Log shipping API token you copied from your Logz.io account. Click Connect and wait for the approval toast message. To disable the configuration, click Disconnect .","title":"Logz.io"},{"location":"logzio/#integrate-the-application-server-with-logzio","text":"Logz searches and queries your logs to help you figure out when things go wrong, and receives your metrics and then provides alerts and pattern-based insights, and data visualization dashboards. Logz.io can receive data from Lightrun with the help of the Logz.io API key. Note Manager role is required to edit integrations. Prerequisites Install and configure Logz.io and then generate and copy a Log shipping API token from your Logz account. For additional help, see their troubleshooting guide as well. Ensure you've configured piping from the IDE.","title":"Integrate the application server with Logz.io"},{"location":"logzio/#connect-to-and-disconnect-from-logzio","text":"Open a browser and log in to your Lightrun account. Go to the Manager menu and click System Integrations . The page loads with all available integrations: From the Integrations page, click Connect from the Logz.io card. The Logz.io Integration window pops up: Enter the URL for your Logz.io listener , any metadata you want to have attached to your logs, and paste the Log shipping API token you copied from your Logz.io account. Click Connect and wait for the approval toast message. To disable the configuration, click Disconnect .","title":"Connect to and disconnect from Logz.io"},{"location":"manage-entities/","text":"Manage entities \u00b6 Files and packages in blacklist section that don't appear in exception section will be protected from breakpoints insertion. On agent startup the blacklist configuration is downloaded and applied to future actions, which means patterns modifications here require agent restart. All users can view the configured blacklist and exceptions. The manager can also create and delete patterns. The entities menu includes three editable entries, tags is one such entry. The web UI lets us delete tags that are no longer used.","title":"Manage entities"},{"location":"manage-entities/#manage-entities","text":"Files and packages in blacklist section that don't appear in exception section will be protected from breakpoints insertion. On agent startup the blacklist configuration is downloaded and applied to future actions, which means patterns modifications here require agent restart. All users can view the configured blacklist and exceptions. The manager can also create and delete patterns. The entities menu includes three editable entries, tags is one such entry. The web UI lets us delete tags that are no longer used.","title":"Manage entities"},{"location":"manage-services%202/","text":"Manage services \u00b6 You can manage certain service configurations for your developers directly from the app. Note Manager role is required. Navigate to the Managers menu and select Services . The Service Configuration table loads: Option Type/unit Default Description Clear Exceptions History Button Clears all exceptions from the cache Clear Agent History Button Clears all agent activity from the cache. Agents Detached (applies on save) Toggle Shuts all agents down when enabled. Agent Expiration [sec] Seconds 30 This is the time it takes for the server to delete inactive agents Log Data Expiration [sec] Seconds 10000 Log data older than this is deleted Snapshot Expiration [sec] Seconds 60 Snapshot data older than this is deleted TicToc Data Expiration [sec] Seconds 300 TicToc data older than this is deleted Counter Data Expiration [sec] Seconds 300 Counter data older than this is deleted Min Action TTL [sec] Seconds 60 Minimum time you can set for action TTL Max Snapshot Count Hits 50 Maximum hit count value you can set for snapshots Min Snapshot Count Hits 1 Minimum hit count value you can set for snapshots. Custom Metric Data Expiration [sec] Seconds 300 Exceptions Data Expiration [sec] Seconds 2592000 Daily Exceptions Limit 1000","title":"Manage services"},{"location":"manage-services%202/#manage-services","text":"You can manage certain service configurations for your developers directly from the app. Note Manager role is required. Navigate to the Managers menu and select Services . The Service Configuration table loads: Option Type/unit Default Description Clear Exceptions History Button Clears all exceptions from the cache Clear Agent History Button Clears all agent activity from the cache. Agents Detached (applies on save) Toggle Shuts all agents down when enabled. Agent Expiration [sec] Seconds 30 This is the time it takes for the server to delete inactive agents Log Data Expiration [sec] Seconds 10000 Log data older than this is deleted Snapshot Expiration [sec] Seconds 60 Snapshot data older than this is deleted TicToc Data Expiration [sec] Seconds 300 TicToc data older than this is deleted Counter Data Expiration [sec] Seconds 300 Counter data older than this is deleted Min Action TTL [sec] Seconds 60 Minimum time you can set for action TTL Max Snapshot Count Hits 50 Maximum hit count value you can set for snapshots Min Snapshot Count Hits 1 Minimum hit count value you can set for snapshots. Custom Metric Data Expiration [sec] Seconds 300 Exceptions Data Expiration [sec] Seconds 2592000 Daily Exceptions Limit 1000","title":"Manage services"},{"location":"manage-services/","text":"Manage services \u00b6 You can manage certain service configurations for your developers directly from the app. Note Manager role is required. Navigate to the Managers menu and select Services . The Service Configuration table loads: Option Type/unit Default Description Clear Exceptions History Button Clears all exceptions from the cache Clear Agent History Button Clears all agent activity from the cache. Agents Detached (applies on save) Toggle Shuts all agents down when enabled. Agent Expiration [sec] Seconds 30 This is the time it takes for the server to delete inactive agents Log Data Expiration [sec] Seconds 10000 Log data older than this is deleted Snapshot Expiration [sec] Seconds 60 Snapshot data older than this is deleted TicToc Data Expiration [sec] Seconds 300 TicToc data older than this is deleted Counter Data Expiration [sec] Seconds 300 Counter data older than this is deleted Min Action TTL [sec] Seconds 60 Minimum time you can set for action TTL Max Snapshot Count Hits 50 Maximum hit count value you can set for snapshots Min Snapshot Count Hits 1 Minimum hit count value you can set for snapshots. Custom Metric Data Expiration [sec] Seconds 300 Exceptions Data Expiration [sec] Seconds 2592000 Daily Exceptions Limit 1000","title":"Services"},{"location":"manage-services/#manage-services","text":"You can manage certain service configurations for your developers directly from the app. Note Manager role is required. Navigate to the Managers menu and select Services . The Service Configuration table loads: Option Type/unit Default Description Clear Exceptions History Button Clears all exceptions from the cache Clear Agent History Button Clears all agent activity from the cache. Agents Detached (applies on save) Toggle Shuts all agents down when enabled. Agent Expiration [sec] Seconds 30 This is the time it takes for the server to delete inactive agents Log Data Expiration [sec] Seconds 10000 Log data older than this is deleted Snapshot Expiration [sec] Seconds 60 Snapshot data older than this is deleted TicToc Data Expiration [sec] Seconds 300 TicToc data older than this is deleted Counter Data Expiration [sec] Seconds 300 Counter data older than this is deleted Min Action TTL [sec] Seconds 60 Minimum time you can set for action TTL Max Snapshot Count Hits 50 Maximum hit count value you can set for snapshots Min Snapshot Count Hits 1 Minimum hit count value you can set for snapshots. Custom Metric Data Expiration [sec] Seconds 300 Exceptions Data Expiration [sec] Seconds 2592000 Daily Exceptions Limit 1000","title":"Manage services"},{"location":"manageexceptions%202/","text":"Lightrun can monitor all exceptions that are thrown in the applications that you're monitoring, and then offer insights about those exceptions. Prerequisites To receive exception reports and insights, first Configure the agent for exceptions . Note By default, every exception in the application is reported, even those caught along the way. From the server you can view general statistics about exceptions, and you can also drill down to view more specific details per exception. To view the Exceptions table: \u00b6 Go to Exceptions \u2192 Data In this page you'll be able to see a table with statistics on all the exceptions thrown by all your applications. In the top right corner of the screen there are search options. You can search with free text and by specific time frames or by custom range. Clicking on a specific type of exception in the table will open a modal with more details on the exception. Clicking on a specific exception in the table (or navigating using the \\\"Previous/Next Exception\\\" buttons above) you'll be able to see the stacktrace of each specific exception, and for each frame in the stacktrace you can see the snapshot of the frame.","title":"Manageexceptions 2"},{"location":"manageexceptions%202/#to-view-the-exceptions-table","text":"Go to Exceptions \u2192 Data In this page you'll be able to see a table with statistics on all the exceptions thrown by all your applications. In the top right corner of the screen there are search options. You can search with free text and by specific time frames or by custom range. Clicking on a specific type of exception in the table will open a modal with more details on the exception. Clicking on a specific exception in the table (or navigating using the \\\"Previous/Next Exception\\\" buttons above) you'll be able to see the stacktrace of each specific exception, and for each frame in the stacktrace you can see the snapshot of the frame.","title":"To view the Exceptions table:"},{"location":"manageexceptions/","text":"Lightrun can monitor all exceptions that are thrown in the applications that you're monitoring, and then offer insights about those exceptions. Prerequisites To receive exception reports and insights, first Configure the agent for exceptions . Note By default, every exception in the application is reported, even those caught along the way. From the server you can view general statistics about exceptions, and you can also drill down to view more specific details per exception. To view the Exceptions table: \u00b6 Go to Exceptions \u2192 Data In this page you'll be able to see a table with statistics on all the exceptions thrown by all your applications. In the top right corner of the screen there are search options. You can search with free text and by specific time frames or by custom range. Clicking on a specific type of exception in the table will open a modal with more details on the exception. Clicking on a specific exception in the table (or navigating using the \\\"Previous/Next Exception\\\" buttons above) you'll be able to see the stacktrace of each specific exception, and for each frame in the stacktrace you can see the snapshot of the frame.","title":"Manageexceptions"},{"location":"manageexceptions/#to-view-the-exceptions-table","text":"Go to Exceptions \u2192 Data In this page you'll be able to see a table with statistics on all the exceptions thrown by all your applications. In the top right corner of the screen there are search options. You can search with free text and by specific time frames or by custom range. Clicking on a specific type of exception in the table will open a modal with more details on the exception. Clicking on a specific exception in the table (or navigating using the \\\"Previous/Next Exception\\\" buttons above) you'll be able to see the stacktrace of each specific exception, and for each frame in the stacktrace you can see the snapshot of the frame.","title":"To view the Exceptions table:"},{"location":"maximize%202/","text":"Maven and Gradle compile Java class files seamlessly, but they might exclude some debugging symbols. This is done to reduce the binary size and make reverse engineering harder for distributed apps. To ensure these details are included, add a flag to the compiler. This flag has no impact on compiler optimization or performance, it only enhances the bytecode with additional debug information. Maven \u00b6 For Maven, add the following lines to the pom.xml file: <compilerArgs> <arg> -g:source,lines </arg> </compilerArgs> Gradle \u00b6 In the Gradle build file, ensure that the following properties are specified: compileJava.options.debugOptions.debugLevel = \"source,lines,vars\" compileTestJava.options.debugOptions.debugLevel = \"source,lines,vars\"","title":"Maximize 2"},{"location":"maximize%202/#maven","text":"For Maven, add the following lines to the pom.xml file: <compilerArgs> <arg> -g:source,lines </arg> </compilerArgs>","title":"Maven"},{"location":"maximize%202/#gradle","text":"In the Gradle build file, ensure that the following properties are specified: compileJava.options.debugOptions.debugLevel = \"source,lines,vars\" compileTestJava.options.debugOptions.debugLevel = \"source,lines,vars\"","title":"Gradle"},{"location":"maximize/","text":"Maven and Gradle compile Java class files seamlessly, but they might exclude some debugging symbols. This is done to reduce the binary size and make reverse engineering harder for distributed apps. To ensure these details are included, add a flag to the compiler. This flag has no impact on compiler optimization or performance, it only enhances the bytecode with additional debug information. Maven \u00b6 For Maven, add the following lines to the pom.xml file: <compilerArgs> <arg> -g:source,lines </arg> </compilerArgs> Gradle \u00b6 In the Gradle build file, ensure that the following properties are specified: compileJava.options.debugOptions.debugLevel = \"source,lines,vars\" compileTestJava.options.debugOptions.debugLevel = \"source,lines,vars\"","title":"Configure Maven & Gradle"},{"location":"maximize/#maven","text":"For Maven, add the following lines to the pom.xml file: <compilerArgs> <arg> -g:source,lines </arg> </compilerArgs>","title":"Maven"},{"location":"maximize/#gradle","text":"In the Gradle build file, ensure that the following properties are specified: compileJava.options.debugOptions.debugLevel = \"source,lines,vars\" compileTestJava.options.debugOptions.debugLevel = \"source,lines,vars\"","title":"Gradle"},{"location":"observability-integrations%202/","text":"Observability integrations overview \u00b6 Lightrun offers integrations for multiple monitoring, alerting and communication platforms. The list of supported integrations is constantly expanding. You can see the updated list of the integrations and configure each of them through the Integrations page. Note Manager role is required to edit integrations. Currently, we support these integrations: Statsd Prometheus Datadog Logz.io Navigate to integrations \u00b6 Open a browser and log in to your Lightrun account. Go to the Manager menu and click System Integrations . The page loads with all available integrations: Direct data to the app \u00b6 For Lightrun to send observability data to your integrations, ensure: The application has a running agent attached to it Users have selected either App or Both for data piping from their IntelliJ instance To configure piping in IntelliJ Navigate to the IntelliJ instance. Ensure Lightrun is installed and connected. From the Agents area, click and select either Both or Server for each agent that you would like to receive data for through these integrations.","title":"Observability integrations overview"},{"location":"observability-integrations%202/#observability-integrations-overview","text":"Lightrun offers integrations for multiple monitoring, alerting and communication platforms. The list of supported integrations is constantly expanding. You can see the updated list of the integrations and configure each of them through the Integrations page. Note Manager role is required to edit integrations. Currently, we support these integrations: Statsd Prometheus Datadog Logz.io","title":"Observability integrations overview"},{"location":"observability-integrations%202/#navigate-to-integrations","text":"Open a browser and log in to your Lightrun account. Go to the Manager menu and click System Integrations . The page loads with all available integrations:","title":"Navigate to integrations"},{"location":"observability-integrations%202/#configure-server","text":"For Lightrun to send observability data to your integrations, ensure: The application has a running agent attached to it Users have selected either App or Both for data piping from their IntelliJ instance","title":"Direct data to the app"},{"location":"observability-integrations/","text":"Observability integrations overview \u00b6 Lightrun offers integrations for multiple monitoring, alerting and communication platforms. The list of supported integrations is constantly expanding. You can see the updated list of the integrations and configure each of them through the Integrations page. Note Manager role is required to edit integrations. Currently, we support these integrations: Statsd Prometheus Datadog Logz.io Navigate to integrations \u00b6 Open a browser and log in to your Lightrun account. Go to the Manager menu and click System Integrations . The page loads with all available integrations: Direct data to the app \u00b6 For Lightrun to send observability data to your integrations, ensure: The application has a running agent attached to it Users have selected either App or Both for data piping from their IntelliJ instance To configure piping in IntelliJ Navigate to the IntelliJ instance. Ensure Lightrun is installed and connected. From the Agents area, click and select either Both or Server for each agent that you would like to receive data for through these integrations.","title":"Overview"},{"location":"observability-integrations/#observability-integrations-overview","text":"Lightrun offers integrations for multiple monitoring, alerting and communication platforms. The list of supported integrations is constantly expanding. You can see the updated list of the integrations and configure each of them through the Integrations page. Note Manager role is required to edit integrations. Currently, we support these integrations: Statsd Prometheus Datadog Logz.io","title":"Observability integrations overview"},{"location":"observability-integrations/#navigate-to-integrations","text":"Open a browser and log in to your Lightrun account. Go to the Manager menu and click System Integrations . The page loads with all available integrations:","title":"Navigate to integrations"},{"location":"observability-integrations/#configure-server","text":"For Lightrun to send observability data to your integrations, ensure: The application has a running agent attached to it Users have selected either App or Both for data piping from their IntelliJ instance","title":"Direct data to the app"},{"location":"observability-troubleshooting%202/","text":"Troubleshooting log and metric integrations \u00b6 If you experience any trouble in your integrations, check these settings: Ensure you've properly configured piping from the IDE and have set it to either App or Both. Once you send logs, wait a few minutes to give the platform time to index and make them available for search. This normally happens anywhere between seconds to one minute, but sometimes it can take longer. Check for network connectivity issues and firewall configurations.","title":"Observability troubleshooting 2"},{"location":"observability-troubleshooting%202/#troubleshooting-log-and-metric-integrations","text":"If you experience any trouble in your integrations, check these settings: Ensure you've properly configured piping from the IDE and have set it to either App or Both. Once you send logs, wait a few minutes to give the platform time to index and make them available for search. This normally happens anywhere between seconds to one minute, but sometimes it can take longer. Check for network connectivity issues and firewall configurations.","title":"Troubleshooting log and metric integrations"},{"location":"observability-troubleshooting/","text":"Troubleshooting log and metric integrations \u00b6 If you experience any trouble in your integrations, check these settings: Ensure you've properly configured piping from the IDE and have set it to either App or Both. Once you send logs, wait a few minutes to give the platform time to index and make them available for search. This normally happens anywhere between seconds to one minute, but sometimes it can take longer. Check for network connectivity issues and firewall configurations.","title":"Observability troubleshooting"},{"location":"observability-troubleshooting/#troubleshooting-log-and-metric-integrations","text":"If you experience any trouble in your integrations, check these settings: Ensure you've properly configured piping from the IDE and have set it to either App or Both. Once you send logs, wait a few minutes to give the platform time to index and make them available for search. This normally happens anywhere between seconds to one minute, but sometimes it can take longer. Check for network connectivity issues and firewall configurations.","title":"Troubleshooting log and metric integrations"},{"location":"opensource%202/","text":"We love open source libraries and use many in our product, including these: Java agent Plugins Server-side Note Some libraries have multiple software licenses. In such cases, we have listed the license we've chosen to use. Java agent licenses \u00b6 Software License jvmti agent apache-2.0 jackson-annotations-2.9.0 apache-2.0 jackson-core-2.9.8 apache-2.0 jackson-databind-2.9.8v apache-2.0 jackson.core.JsonFactory apache-2.0 athena_internals apache-2.0 cdbg_java_agent_internals apache-2.0 commons-logging apache-2.0 httpclient apache-2.0 httpcore apache-2.0 snakeyamll apache-2.0 asm bsd-new gflags-2.1.2 bsd-new glog-0.3.4 bsd-new open-source-parsers-jsoncpp mit Plugin licenses \u00b6 Software License commons-lang3-3.9 apache-2.0 gson-fire-1.8.3 mit jsr305-3.0.2 apache-2.0 nv-websocket-client-2.9 apache-2.0 okhttp-3.14.2 apache-2.0 swagger-annotations-1.5.22 apache-2.0 Server licenses \u00b6 Software License activation-1.1 cddl-1.0 attoparser-2.0.5 apache-2.0 classmate-1.4.0 apache-2.0 commons-compress-1.18 apache-2.0 commons-io-2.6 apache-2.0 commons-lang3-3.8.1 apache-2.0 ehcache-3.6.3 apache-2.0 jackson-annotations-2.9.0 apache-2.0 jackson-core-2.9.9 apache-2.0 jackson-databind-2.9.9.3 apache-2.0 jackson-dataformat-yaml-2.9.8 apache-2.0 jackson-datatype-hibernate5-2.9.9 apache-2.0 jackson-datatype-hppc-2.9.9.jar apache-2.0 jackson-datatype-jsr310-2.9.9 apache-2.0 javax.activation-api gpl-2.0","title":"Opensource 2"},{"location":"opensource%202/#java-agent-licenses","text":"Software License jvmti agent apache-2.0 jackson-annotations-2.9.0 apache-2.0 jackson-core-2.9.8 apache-2.0 jackson-databind-2.9.8v apache-2.0 jackson.core.JsonFactory apache-2.0 athena_internals apache-2.0 cdbg_java_agent_internals apache-2.0 commons-logging apache-2.0 httpclient apache-2.0 httpcore apache-2.0 snakeyamll apache-2.0 asm bsd-new gflags-2.1.2 bsd-new glog-0.3.4 bsd-new open-source-parsers-jsoncpp mit","title":"Java agent licenses"},{"location":"opensource%202/#plugin-licenses","text":"Software License commons-lang3-3.9 apache-2.0 gson-fire-1.8.3 mit jsr305-3.0.2 apache-2.0 nv-websocket-client-2.9 apache-2.0 okhttp-3.14.2 apache-2.0 swagger-annotations-1.5.22 apache-2.0","title":"Plugin licenses"},{"location":"opensource%202/#server-licenses","text":"Software License activation-1.1 cddl-1.0 attoparser-2.0.5 apache-2.0 classmate-1.4.0 apache-2.0 commons-compress-1.18 apache-2.0 commons-io-2.6 apache-2.0 commons-lang3-3.8.1 apache-2.0 ehcache-3.6.3 apache-2.0 jackson-annotations-2.9.0 apache-2.0 jackson-core-2.9.9 apache-2.0 jackson-databind-2.9.9.3 apache-2.0 jackson-dataformat-yaml-2.9.8 apache-2.0 jackson-datatype-hibernate5-2.9.9 apache-2.0 jackson-datatype-hppc-2.9.9.jar apache-2.0 jackson-datatype-jsr310-2.9.9 apache-2.0 javax.activation-api gpl-2.0","title":"Server licenses"},{"location":"opensource/","text":"We love open source libraries and use many in our product, including these: Java agent Plugins Server-side Note Some libraries have multiple software licenses. In such cases, we have listed the license we've chosen to use. Java agent licenses \u00b6 Software License jvmti agent apache-2.0 jackson-annotations-2.9.0 apache-2.0 jackson-core-2.9.8 apache-2.0 jackson-databind-2.9.8v apache-2.0 jackson.core.JsonFactory apache-2.0 athena_internals apache-2.0 cdbg_java_agent_internals apache-2.0 commons-logging apache-2.0 httpclient apache-2.0 httpcore apache-2.0 snakeyamll apache-2.0 asm bsd-new gflags-2.1.2 bsd-new glog-0.3.4 bsd-new open-source-parsers-jsoncpp mit Plugin licenses \u00b6 Software License commons-lang3-3.9 apache-2.0 gson-fire-1.8.3 mit jsr305-3.0.2 apache-2.0 nv-websocket-client-2.9 apache-2.0 okhttp-3.14.2 apache-2.0 swagger-annotations-1.5.22 apache-2.0 Server licenses \u00b6 Software License activation-1.1 cddl-1.0 attoparser-2.0.5 apache-2.0 classmate-1.4.0 apache-2.0 commons-compress-1.18 apache-2.0 commons-io-2.6 apache-2.0 commons-lang3-3.8.1 apache-2.0 ehcache-3.6.3 apache-2.0 jackson-annotations-2.9.0 apache-2.0 jackson-core-2.9.9 apache-2.0 jackson-databind-2.9.9.3 apache-2.0 jackson-dataformat-yaml-2.9.8 apache-2.0 jackson-datatype-hibernate5-2.9.9 apache-2.0 jackson-datatype-hppc-2.9.9.jar apache-2.0 jackson-datatype-jsr310-2.9.9 apache-2.0 javax.activation-api gpl-2.0","title":"Opensource"},{"location":"opensource/#java-agent-licenses","text":"Software License jvmti agent apache-2.0 jackson-annotations-2.9.0 apache-2.0 jackson-core-2.9.8 apache-2.0 jackson-databind-2.9.8v apache-2.0 jackson.core.JsonFactory apache-2.0 athena_internals apache-2.0 cdbg_java_agent_internals apache-2.0 commons-logging apache-2.0 httpclient apache-2.0 httpcore apache-2.0 snakeyamll apache-2.0 asm bsd-new gflags-2.1.2 bsd-new glog-0.3.4 bsd-new open-source-parsers-jsoncpp mit","title":"Java agent licenses"},{"location":"opensource/#plugin-licenses","text":"Software License commons-lang3-3.9 apache-2.0 gson-fire-1.8.3 mit jsr305-3.0.2 apache-2.0 nv-websocket-client-2.9 apache-2.0 okhttp-3.14.2 apache-2.0 swagger-annotations-1.5.22 apache-2.0","title":"Plugin licenses"},{"location":"opensource/#server-licenses","text":"Software License activation-1.1 cddl-1.0 attoparser-2.0.5 apache-2.0 classmate-1.4.0 apache-2.0 commons-compress-1.18 apache-2.0 commons-io-2.6 apache-2.0 commons-lang3-3.8.1 apache-2.0 ehcache-3.6.3 apache-2.0 jackson-annotations-2.9.0 apache-2.0 jackson-core-2.9.9 apache-2.0 jackson-databind-2.9.9.3 apache-2.0 jackson-dataformat-yaml-2.9.8 apache-2.0 jackson-datatype-hibernate5-2.9.9 apache-2.0 jackson-datatype-hppc-2.9.9.jar apache-2.0 jackson-datatype-jsr310-2.9.9 apache-2.0 javax.activation-api gpl-2.0","title":"Server licenses"},{"location":"plugin%202/","text":"Getting around IntelliJ with Lightrun \u00b6 With Lightrun, you can add Lightrun actions (logs, metrics, snapshots) from the source code of your live app and view the relevant output both from your IDE, and from the CLI. To use the plugin, make sure: You've attached at least one agent to your app You install the plugin in your local IntelliJ instance) You authenticate IntelliJ with your Lightrun account The rest of this article describes: the layout of Lightrun in IntelliJ how to search and filter logs and metrics the Agents and Tags lists and their icons the Details window for additional action and agent details Lightrun in IntelliJ \u00b6 Lightrun is part of the IntelliJ right-hand sidebar, and appears similarly to the following: This sidebar displays all the running agents and their tags, as well as the actions that have been attached to them. Note If these lists are completely empty or if you can only see a list of tags but not agents, the agents might all be down. Contact your manager for assistance. This sidebar has two tabs: Agents - lists all running agents and the logs you've attached to them from IntelliJ; this part of the sidebar is divided by Tags and Agents Exceptions - lists exceptions logged on running agents Additionally, you can view logs in real time directly from the Lightrun Console , located as part of the bottom sidebar. Search (filter) \u00b6 You can search for logs and snapshots from within specific agents with the dynamic search field. As you start typing, the list of agents updates dynamically. Tip This can be particularly helpful in finding specific logs when working with multiple agents. Agents and Tags list \u00b6 The Tags list appears similar to the following: The layout of the Agents list appears similar to the following: Each list has a panel at the top that contains the following information: An arrow to expand and collapse the list per tag or per agent. The name of the agent or list In parenthesis, the total number of actions assigned to that tag or agent For Tags lists, the icon For Agents lists, the icons as described below Most of the icons are relevant for both the Agents and the Tags lists: The following table describes the actions you can leverage from both: Icon Component Description 1 Details Opens the information dialog box for the agent, the tag or for the action 2 View/hide logs Toggle this button to hide/show logs in the editor. This applies to the hierarchy and can be toggled globally on the login button. 3 Pipe logs From the Agents list only, by default Lightrun logs print into the same logger that is used by your application. Following are the three options: App Only (the default), Plugin Only and Both . When set to Plugin Only or Both logs added to this agent also appear in the Lightrun console of IntelliJ. 4 Delete action Delete any agent or tag actions. Only agent-activated actions can be deleted from the Agents list and tag-activated actions from the Tags list. 5 Go to line Jump to the source file and line number in the code that is associated with the action. 6 Toggle Toggle to disable or enable an action. Only agent-activated actions can be toggled from the Agents list and tag-activated actions from the Tags list. 7 Status indicator Displays the current state of the action. One checks indicates the action was submitted to the server. Two checks indicate that it was received by the agent. Highlighted checks indicate that the agent accepted the action. From the Agents list, the tag icon indicates the action was activated with tags and not agents, and its status can be viewed from the Tags list. 8 Log level indicator Indicates the the level that was configured for the log (on log rows only): Info, Debug, Warn, Error. View details for agents and actions \u00b6 To view details, click from the relevant row. The Details dialog window pops up. For actions, the window appears similar to the following, including creation and modification history, quota (the rate limit, if any is configured), and log and error message details: Note The quota controls use of CPU, Networking, Memory, excessively long strings, too many instructions printing out, protection from infinite loops and the like. Quota settings zcan be tuned in the agent.config file. For agents, it appears similar to the following including details about location, versioning, associated tags and the piping mode:","title":"Getting around IntelliJ with Lightrun"},{"location":"plugin%202/#getting-around-intellij-with-lightrun","text":"With Lightrun, you can add Lightrun actions (logs, metrics, snapshots) from the source code of your live app and view the relevant output both from your IDE, and from the CLI. To use the plugin, make sure: You've attached at least one agent to your app You install the plugin in your local IntelliJ instance) You authenticate IntelliJ with your Lightrun account The rest of this article describes: the layout of Lightrun in IntelliJ how to search and filter logs and metrics the Agents and Tags lists and their icons the Details window for additional action and agent details","title":"Getting around IntelliJ with Lightrun"},{"location":"plugin%202/#layout","text":"Lightrun is part of the IntelliJ right-hand sidebar, and appears similarly to the following: This sidebar displays all the running agents and their tags, as well as the actions that have been attached to them. Note If these lists are completely empty or if you can only see a list of tags but not agents, the agents might all be down. Contact your manager for assistance. This sidebar has two tabs: Agents - lists all running agents and the logs you've attached to them from IntelliJ; this part of the sidebar is divided by Tags and Agents Exceptions - lists exceptions logged on running agents Additionally, you can view logs in real time directly from the Lightrun Console , located as part of the bottom sidebar.","title":"Lightrun in IntelliJ"},{"location":"plugin%202/#search","text":"You can search for logs and snapshots from within specific agents with the dynamic search field. As you start typing, the list of agents updates dynamically. Tip This can be particularly helpful in finding specific logs when working with multiple agents.","title":"Search (filter)"},{"location":"plugin%202/#agents","text":"The Tags list appears similar to the following: The layout of the Agents list appears similar to the following: Each list has a panel at the top that contains the following information: An arrow to expand and collapse the list per tag or per agent. The name of the agent or list In parenthesis, the total number of actions assigned to that tag or agent For Tags lists, the icon For Agents lists, the icons as described below Most of the icons are relevant for both the Agents and the Tags lists: The following table describes the actions you can leverage from both: Icon Component Description 1 Details Opens the information dialog box for the agent, the tag or for the action 2 View/hide logs Toggle this button to hide/show logs in the editor. This applies to the hierarchy and can be toggled globally on the login button. 3 Pipe logs From the Agents list only, by default Lightrun logs print into the same logger that is used by your application. Following are the three options: App Only (the default), Plugin Only and Both . When set to Plugin Only or Both logs added to this agent also appear in the Lightrun console of IntelliJ. 4 Delete action Delete any agent or tag actions. Only agent-activated actions can be deleted from the Agents list and tag-activated actions from the Tags list. 5 Go to line Jump to the source file and line number in the code that is associated with the action. 6 Toggle Toggle to disable or enable an action. Only agent-activated actions can be toggled from the Agents list and tag-activated actions from the Tags list. 7 Status indicator Displays the current state of the action. One checks indicates the action was submitted to the server. Two checks indicate that it was received by the agent. Highlighted checks indicate that the agent accepted the action. From the Agents list, the tag icon indicates the action was activated with tags and not agents, and its status can be viewed from the Tags list. 8 Log level indicator Indicates the the level that was configured for the log (on log rows only): Info, Debug, Warn, Error.","title":"Agents and Tags list"},{"location":"plugin%202/#details","text":"To view details, click from the relevant row. The Details dialog window pops up. For actions, the window appears similar to the following, including creation and modification history, quota (the rate limit, if any is configured), and log and error message details: Note The quota controls use of CPU, Networking, Memory, excessively long strings, too many instructions printing out, protection from infinite loops and the like. Quota settings zcan be tuned in the agent.config file. For agents, it appears similar to the following including details about location, versioning, associated tags and the piping mode:","title":"View details for agents and actions"},{"location":"plugin/","text":"Getting around IntelliJ with Lightrun \u00b6 With Lightrun, you can add Lightrun actions (logs, metrics, snapshots) from the source code of your live app and view the relevant output both from your IDE, and from the CLI. To use the plugin, make sure: You've attached at least one agent to your app You install the plugin in your local IntelliJ instance) You authenticate IntelliJ with your Lightrun account The rest of this article describes: the layout of Lightrun in IntelliJ how to search and filter logs and metrics the Agents and Tags lists and their icons the Details window for additional action and agent details Lightrun in IntelliJ \u00b6 Lightrun is part of the IntelliJ right-hand sidebar, and appears similarly to the following: This sidebar displays all the running agents and their tags, as well as the actions that have been attached to them. Note If these lists are completely empty or if you can only see a list of tags but not agents, the agents might all be down. Contact your manager for assistance. This sidebar has two tabs: Agents - lists all running agents and the logs you've attached to them from IntelliJ; this part of the sidebar is divided by Tags and Agents Exceptions - lists exceptions logged on running agents Additionally, you can view logs in real time directly from the Lightrun Console , located as part of the bottom sidebar. Search (filter) \u00b6 You can search for logs and snapshots from within specific agents with the dynamic search field. As you start typing, the list of agents updates dynamically. Tip This can be particularly helpful in finding specific logs when working with multiple agents. Agents and Tags list \u00b6 The Tags list appears similar to the following: The layout of the Agents list appears similar to the following: Each list has a panel at the top that contains the following information: An arrow to expand and collapse the list per tag or per agent. The name of the agent or list In parenthesis, the total number of actions assigned to that tag or agent For Tags lists, the icon For Agents lists, the icons as described below Most of the icons are relevant for both the Agents and the Tags lists: The following table describes the actions you can leverage from both: Icon Component Description 1 Details Opens the information dialog box for the agent, the tag or for the action 2 View/hide logs Toggle this button to hide/show logs in the editor. This applies to the hierarchy and can be toggled globally on the login button. 3 Pipe logs From the Agents list only, by default Lightrun logs print into the same logger that is used by your application. Following are the three options: App Only (the default), Plugin Only and Both . When set to Plugin Only or Both logs added to this agent also appear in the Lightrun console of IntelliJ. 4 Delete action Delete any agent or tag actions. Only agent-activated actions can be deleted from the Agents list and tag-activated actions from the Tags list. 5 Go to line Jump to the source file and line number in the code that is associated with the action. 6 Toggle Toggle to disable or enable an action. Only agent-activated actions can be toggled from the Agents list and tag-activated actions from the Tags list. 7 Status indicator Displays the current state of the action. One checks indicates the action was submitted to the server. Two checks indicate that it was received by the agent. Highlighted checks indicate that the agent accepted the action. From the Agents list, the tag icon indicates the action was activated with tags and not agents, and its status can be viewed from the Tags list. 8 Log level indicator Indicates the the level that was configured for the log (on log rows only): Info, Debug, Warn, Error. View details for agents and actions \u00b6 To view details, click from the relevant row. The Details dialog window pops up. For actions, the window appears similar to the following, including creation and modification history, quota (the rate limit, if any is configured), and log and error message details: Note The quota controls use of CPU, Networking, Memory, excessively long strings, too many instructions printing out, protection from infinite loops and the like. Quota settings zcan be tuned in the agent.config file. For agents, it appears similar to the following including details about location, versioning, associated tags and the piping mode:","title":"Getting Started"},{"location":"plugin/#getting-around-intellij-with-lightrun","text":"With Lightrun, you can add Lightrun actions (logs, metrics, snapshots) from the source code of your live app and view the relevant output both from your IDE, and from the CLI. To use the plugin, make sure: You've attached at least one agent to your app You install the plugin in your local IntelliJ instance) You authenticate IntelliJ with your Lightrun account The rest of this article describes: the layout of Lightrun in IntelliJ how to search and filter logs and metrics the Agents and Tags lists and their icons the Details window for additional action and agent details","title":"Getting around IntelliJ with Lightrun"},{"location":"plugin/#layout","text":"Lightrun is part of the IntelliJ right-hand sidebar, and appears similarly to the following: This sidebar displays all the running agents and their tags, as well as the actions that have been attached to them. Note If these lists are completely empty or if you can only see a list of tags but not agents, the agents might all be down. Contact your manager for assistance. This sidebar has two tabs: Agents - lists all running agents and the logs you've attached to them from IntelliJ; this part of the sidebar is divided by Tags and Agents Exceptions - lists exceptions logged on running agents Additionally, you can view logs in real time directly from the Lightrun Console , located as part of the bottom sidebar.","title":"Lightrun in IntelliJ"},{"location":"plugin/#search","text":"You can search for logs and snapshots from within specific agents with the dynamic search field. As you start typing, the list of agents updates dynamically. Tip This can be particularly helpful in finding specific logs when working with multiple agents.","title":"Search (filter)"},{"location":"plugin/#agents","text":"The Tags list appears similar to the following: The layout of the Agents list appears similar to the following: Each list has a panel at the top that contains the following information: An arrow to expand and collapse the list per tag or per agent. The name of the agent or list In parenthesis, the total number of actions assigned to that tag or agent For Tags lists, the icon For Agents lists, the icons as described below Most of the icons are relevant for both the Agents and the Tags lists: The following table describes the actions you can leverage from both: Icon Component Description 1 Details Opens the information dialog box for the agent, the tag or for the action 2 View/hide logs Toggle this button to hide/show logs in the editor. This applies to the hierarchy and can be toggled globally on the login button. 3 Pipe logs From the Agents list only, by default Lightrun logs print into the same logger that is used by your application. Following are the three options: App Only (the default), Plugin Only and Both . When set to Plugin Only or Both logs added to this agent also appear in the Lightrun console of IntelliJ. 4 Delete action Delete any agent or tag actions. Only agent-activated actions can be deleted from the Agents list and tag-activated actions from the Tags list. 5 Go to line Jump to the source file and line number in the code that is associated with the action. 6 Toggle Toggle to disable or enable an action. Only agent-activated actions can be toggled from the Agents list and tag-activated actions from the Tags list. 7 Status indicator Displays the current state of the action. One checks indicates the action was submitted to the server. Two checks indicate that it was received by the agent. Highlighted checks indicate that the agent accepted the action. From the Agents list, the tag icon indicates the action was activated with tags and not agents, and its status can be viewed from the Tags list. 8 Log level indicator Indicates the the level that was configured for the log (on log rows only): Info, Debug, Warn, Error.","title":"Agents and Tags list"},{"location":"plugin/#details","text":"To view details, click from the relevant row. The Details dialog window pops up. For actions, the window appears similar to the following, including creation and modification history, quota (the rate limit, if any is configured), and log and error message details: Note The quota controls use of CPU, Networking, Memory, excessively long strings, too many instructions printing out, protection from infinite loops and the like. Quota settings zcan be tuned in the agent.config file. For agents, it appears similar to the following including details about location, versioning, associated tags and the piping mode:","title":"View details for agents and actions"},{"location":"prometheus%202/","text":"Integrate the application server with Prometheus \u00b6 Prometheus is an open source monitoring and alerting toolkit that scrapes and stores time series data from its configured targets (such as Lightrun), stores taht data locally and then runs rules over the data for aggregation, recording and alerting. and offers multiple modes for data visualization and alert configurations. Note Manager role is required to edit integrations. Prerequisites Install and configure Prometheus . Refer to the Prometheus FAQ as well for additional help. Ensure you've configured piping from the IDE. Connect to and disconnect from Prometheus \u00b6 Open a browser and log in to your Lightrun account. Go to the Manager menu and click System Integrations . The page loads with all available integrations: From the Integrations page, click Connect from the Prometheus card. The Prometheus Integration window pops up: Click Copy from under the scrape configuration. Paste the scrape_configs data to the existing scrape_configs section in your Prometheus YAML configuration file. From the Round Up dropdown list, select the rounding rule to be applied by Prometheus for your Lightrun data. Click Connect and wait for the approval toast message. To disable the configuration, click Disconnect .","title":"Integrate the application server with Prometheus"},{"location":"prometheus%202/#integrate-the-application-server-with-prometheus","text":"Prometheus is an open source monitoring and alerting toolkit that scrapes and stores time series data from its configured targets (such as Lightrun), stores taht data locally and then runs rules over the data for aggregation, recording and alerting. and offers multiple modes for data visualization and alert configurations. Note Manager role is required to edit integrations. Prerequisites Install and configure Prometheus . Refer to the Prometheus FAQ as well for additional help. Ensure you've configured piping from the IDE.","title":"Integrate the application server with Prometheus"},{"location":"prometheus%202/#connect-to-and-disconnect-from-prometheus","text":"Open a browser and log in to your Lightrun account. Go to the Manager menu and click System Integrations . The page loads with all available integrations: From the Integrations page, click Connect from the Prometheus card. The Prometheus Integration window pops up: Click Copy from under the scrape configuration. Paste the scrape_configs data to the existing scrape_configs section in your Prometheus YAML configuration file. From the Round Up dropdown list, select the rounding rule to be applied by Prometheus for your Lightrun data. Click Connect and wait for the approval toast message. To disable the configuration, click Disconnect .","title":"Connect to and disconnect from Prometheus"},{"location":"prometheus/","text":"Integrate the application server with Prometheus \u00b6 Prometheus is an open source monitoring and alerting toolkit that scrapes and stores time series data from its configured targets (such as Lightrun), stores taht data locally and then runs rules over the data for aggregation, recording and alerting. and offers multiple modes for data visualization and alert configurations. Note Manager role is required to edit integrations. Prerequisites Install and configure Prometheus . Refer to the Prometheus FAQ as well for additional help. Ensure you've configured piping from the IDE. Connect to and disconnect from Prometheus \u00b6 Open a browser and log in to your Lightrun account. Go to the Manager menu and click System Integrations . The page loads with all available integrations: From the Integrations page, click Connect from the Prometheus card. The Prometheus Integration window pops up: Click Copy from under the scrape configuration. Paste the scrape_configs data to the existing scrape_configs section in your Prometheus YAML configuration file. From the Round Up dropdown list, select the rounding rule to be applied by Prometheus for your Lightrun data. Click Connect and wait for the approval toast message. To disable the configuration, click Disconnect .","title":"Prometheus"},{"location":"prometheus/#integrate-the-application-server-with-prometheus","text":"Prometheus is an open source monitoring and alerting toolkit that scrapes and stores time series data from its configured targets (such as Lightrun), stores taht data locally and then runs rules over the data for aggregation, recording and alerting. and offers multiple modes for data visualization and alert configurations. Note Manager role is required to edit integrations. Prerequisites Install and configure Prometheus . Refer to the Prometheus FAQ as well for additional help. Ensure you've configured piping from the IDE.","title":"Integrate the application server with Prometheus"},{"location":"prometheus/#connect-to-and-disconnect-from-prometheus","text":"Open a browser and log in to your Lightrun account. Go to the Manager menu and click System Integrations . The page loads with all available integrations: From the Integrations page, click Connect from the Prometheus card. The Prometheus Integration window pops up: Click Copy from under the scrape configuration. Paste the scrape_configs data to the existing scrape_configs section in your Prometheus YAML configuration file. From the Round Up dropdown list, select the rounding rule to be applied by Prometheus for your Lightrun data. Click Connect and wait for the approval toast message. To disable the configuration, click Disconnect .","title":"Connect to and disconnect from Prometheus"},{"location":"server-integrations%202/","text":"Troubleshooting log and metric integrations \u00b6 If you experience any trouble in your integrations, check these settings: Ensure you've properly configured piping from the IDE and have set it to either App or Both. Once you send logs, wait a few minutes to give the platform time to index and make them available for search. This normally happens anywhere between seconds to one minute, but sometimes it can take longer. Check for network connectivity issues and firewall configurations.","title":"Troubleshooting log and metric integrations"},{"location":"server-integrations%202/#troubleshooting-log-and-metric-integrations","text":"If you experience any trouble in your integrations, check these settings: Ensure you've properly configured piping from the IDE and have set it to either App or Both. Once you send logs, wait a few minutes to give the platform time to index and make them available for search. This normally happens anywhere between seconds to one minute, but sometimes it can take longer. Check for network connectivity issues and firewall configurations.","title":"Troubleshooting log and metric integrations"},{"location":"server-integrations/","text":"Troubleshooting log and metric integrations \u00b6 If you experience any trouble in your integrations, check these settings: Ensure you've properly configured piping from the IDE and have set it to either App or Both. Once you send logs, wait a few minutes to give the platform time to index and make them available for search. This normally happens anywhere between seconds to one minute, but sometimes it can take longer. Check for network connectivity issues and firewall configurations.","title":"Troubleshooting log and metric integrations"},{"location":"server-integrations/#troubleshooting-log-and-metric-integrations","text":"If you experience any trouble in your integrations, check these settings: Ensure you've properly configured piping from the IDE and have set it to either App or Both. Once you send logs, wait a few minutes to give the platform time to index and make them available for search. This normally happens anywhere between seconds to one minute, but sometimes it can take longer. Check for network connectivity issues and firewall configurations.","title":"Troubleshooting log and metric integrations"},{"location":"server-setup%202/","text":"Once you've deployed the Lightrun agent, it's time to kickstart debugging for your team. Follow these steps: launch the Management server launch an agent start debugging and have team members install the plugin for IntelliJ Launch the Management server \u00b6 From the relevant application servers run the following command: service lightrund start Alternatively, you can run the Management server from a Docker file as follows: docker-compose up -d Launch an agent \u00b6 Run an application instance with the agent attached. Copy the following command: java -agentpath:<install_dir>/agent/lightrun_agent.so java-app Replace <install_dir> with the installation directory. Run the command. Start debugging \u00b6 So long as the application is running with the agent, you and your team can debug! Use the plugin or CLI to add actions and debug your app.","title":"Set up the Management server"},{"location":"server-setup%202/#launch-the-management-server","text":"From the relevant application servers run the following command: service lightrund start Alternatively, you can run the Management server from a Docker file as follows: docker-compose up -d","title":"Launch the Management server"},{"location":"server-setup%202/#launch-an-agent","text":"Run an application instance with the agent attached. Copy the following command: java -agentpath:<install_dir>/agent/lightrun_agent.so java-app Replace <install_dir> with the installation directory. Run the command.","title":"Launch an agent"},{"location":"server-setup%202/#start-debugging","text":"So long as the application is running with the agent, you and your team can debug! Use the plugin or CLI to add actions and debug your app.","title":"Start debugging"},{"location":"server-setup/","text":"Once you've deployed the Lightrun agent, it's time to kickstart debugging for your team. Follow these steps: launch the Management server launch an agent start debugging and have team members install the plugin for IntelliJ Launch the Management server \u00b6 From the relevant application servers run the following command: service lightrund start Alternatively, you can run the Management server from a Docker file as follows: docker-compose up -d Launch an agent \u00b6 Run an application instance with the agent attached. Copy the following command: java -agentpath:<install_dir>/agent/lightrun_agent.so java-app Replace <install_dir> with the installation directory. Run the command. Start debugging \u00b6 So long as the application is running with the agent, you and your team can debug! Use the plugin or CLI to add actions and debug your app.","title":"Set up the Management server"},{"location":"server-setup/#launch-the-management-server","text":"From the relevant application servers run the following command: service lightrund start Alternatively, you can run the Management server from a Docker file as follows: docker-compose up -d","title":"Launch the Management server"},{"location":"server-setup/#launch-an-agent","text":"Run an application instance with the agent attached. Copy the following command: java -agentpath:<install_dir>/agent/lightrun_agent.so java-app Replace <install_dir> with the installation directory. Run the command.","title":"Launch an agent"},{"location":"server-setup/#start-debugging","text":"So long as the application is running with the agent, you and your team can debug! Use the plugin or CLI to add actions and debug your app.","title":"Start debugging"},{"location":"snapshots%202/","text":"Snapshot data \u00b6 As your team works with Lightrun, they can dynamically insert snapshots to track information based on a variety of conditions. Once a snapshot is inserted into the application, the stacktrace can be viewed from the IDE and from the Lightrun app in your browser. To view snapshot data from the app Log in to the app and navigate to Entities->Snapshot Data . The screen loads, and appears similar to the following: The screen is divided into two tables as follows: A list of snapshots and their creation details appears at the top Stacktrace details The following table describes the data available in the first table: Column Description No The unique identifier assigned to the snapshot by the system Create time The time at which the snapshot was created Capture time The time at which the snapshot was actually taken. Agent The agent or tag to which the snapshot was attached. User The user who inserted the snapshot. Entry point The line of code at which the snapshot was inserted. Condition If relevant, displays the condition that was used for the snapshot. Click the relevant snapshot from that table to view the associated stacktrace data in the second table. Following are the details available in this table (the Stacktrace table): Column Description Frame Each frame represents a single snapshot. Variables Displays all related details for the selection in the Frame column. Note For more information about snapshots, see Lightrun Actions .","title":"Snapshot data"},{"location":"snapshots%202/#snapshot-data","text":"As your team works with Lightrun, they can dynamically insert snapshots to track information based on a variety of conditions. Once a snapshot is inserted into the application, the stacktrace can be viewed from the IDE and from the Lightrun app in your browser.","title":"Snapshot data"},{"location":"snapshots/","text":"Snapshot data \u00b6 As your team works with Lightrun, they can dynamically insert snapshots to track information based on a variety of conditions. Once a snapshot is inserted into the application, the stacktrace can be viewed from the IDE and from the Lightrun app in your browser. To view snapshot data from the app Log in to the app and navigate to Entities->Snapshot Data . The screen loads, and appears similar to the following: The screen is divided into two tables as follows: A list of snapshots and their creation details appears at the top Stacktrace details The following table describes the data available in the first table: Column Description No The unique identifier assigned to the snapshot by the system Create time The time at which the snapshot was created Capture time The time at which the snapshot was actually taken. Agent The agent or tag to which the snapshot was attached. User The user who inserted the snapshot. Entry point The line of code at which the snapshot was inserted. Condition If relevant, displays the condition that was used for the snapshot. Click the relevant snapshot from that table to view the associated stacktrace data in the second table. Following are the details available in this table (the Stacktrace table): Column Description Frame Each frame represents a single snapshot. Variables Displays all related details for the selection in the Frame column. Note For more information about snapshots, see Lightrun Actions .","title":"Snapshots Data"},{"location":"snapshots/#snapshot-data","text":"As your team works with Lightrun, they can dynamically insert snapshots to track information based on a variety of conditions. Once a snapshot is inserted into the application, the stacktrace can be viewed from the IDE and from the Lightrun app in your browser.","title":"Snapshot data"},{"location":"statsd%202/","text":"Integrate the application server with StatsD \u00b6 Note Manager role is required to edit integrations. Statsd is a network daemon that runs on the Node.js platform and listens for statistics, such as counters and timers, that are sent over UDP or TCP protocols. It then sends aggregates of the statistics to a backend services such as Graphite. There's a short script that performs online metric scraping from the agent log file (usually /tmp/lightrun_java_agent.INFO ). cd <install-dir>/agent/stats/ ./statsd_reporter.py --host <statsd-hostname> --port <statsd-port> --logfile <agent-log-file.txt> Prerequisites Install and configure StatsD . Ensure you've configured piping from the IDE. Connect to and disconnect from StatsD \u00b6 Open a browser and log in to your Lightrun account. Go to the Manager menu and click System Integrations . The page loads with all available integrations: From the Integrations page, click Connect from the StatsD card. The Statsd Integration window pops up: Complete the Server and UDP Port details, or if correct, leave the default values. Click Connect and make sure you see the approval toast message. To disable the configuration, click Disconnect .","title":"Integrate the application server with StatsD"},{"location":"statsd%202/#integrate-the-application-server-with-statsd","text":"Note Manager role is required to edit integrations. Statsd is a network daemon that runs on the Node.js platform and listens for statistics, such as counters and timers, that are sent over UDP or TCP protocols. It then sends aggregates of the statistics to a backend services such as Graphite. There's a short script that performs online metric scraping from the agent log file (usually /tmp/lightrun_java_agent.INFO ). cd <install-dir>/agent/stats/ ./statsd_reporter.py --host <statsd-hostname> --port <statsd-port> --logfile <agent-log-file.txt> Prerequisites Install and configure StatsD . Ensure you've configured piping from the IDE.","title":"Integrate the application server with StatsD"},{"location":"statsd%202/#connect-to-and-disconnect-from-statsd","text":"Open a browser and log in to your Lightrun account. Go to the Manager menu and click System Integrations . The page loads with all available integrations: From the Integrations page, click Connect from the StatsD card. The Statsd Integration window pops up: Complete the Server and UDP Port details, or if correct, leave the default values. Click Connect and make sure you see the approval toast message. To disable the configuration, click Disconnect .","title":"Connect to and disconnect from StatsD"},{"location":"statsd/","text":"Integrate the application server with StatsD \u00b6 Note Manager role is required to edit integrations. Statsd is a network daemon that runs on the Node.js platform and listens for statistics, such as counters and timers, that are sent over UDP or TCP protocols. It then sends aggregates of the statistics to a backend services such as Graphite. There's a short script that performs online metric scraping from the agent log file (usually /tmp/lightrun_java_agent.INFO ). cd <install-dir>/agent/stats/ ./statsd_reporter.py --host <statsd-hostname> --port <statsd-port> --logfile <agent-log-file.txt> Prerequisites Install and configure StatsD . Ensure you've configured piping from the IDE. Connect to and disconnect from StatsD \u00b6 Open a browser and log in to your Lightrun account. Go to the Manager menu and click System Integrations . The page loads with all available integrations: From the Integrations page, click Connect from the StatsD card. The Statsd Integration window pops up: Complete the Server and UDP Port details, or if correct, leave the default values. Click Connect and make sure you see the approval toast message. To disable the configuration, click Disconnect .","title":"Statsd"},{"location":"statsd/#integrate-the-application-server-with-statsd","text":"Note Manager role is required to edit integrations. Statsd is a network daemon that runs on the Node.js platform and listens for statistics, such as counters and timers, that are sent over UDP or TCP protocols. It then sends aggregates of the statistics to a backend services such as Graphite. There's a short script that performs online metric scraping from the agent log file (usually /tmp/lightrun_java_agent.INFO ). cd <install-dir>/agent/stats/ ./statsd_reporter.py --host <statsd-hostname> --port <statsd-port> --logfile <agent-log-file.txt> Prerequisites Install and configure StatsD . Ensure you've configured piping from the IDE.","title":"Integrate the application server with StatsD"},{"location":"statsd/#connect-to-and-disconnect-from-statsd","text":"Open a browser and log in to your Lightrun account. Go to the Manager menu and click System Integrations . The page loads with all available integrations: From the Integrations page, click Connect from the StatsD card. The Statsd Integration window pops up: Complete the Server and UDP Port details, or if correct, leave the default values. Click Connect and make sure you see the approval toast message. To disable the configuration, click Disconnect .","title":"Connect to and disconnect from StatsD"},{"location":"tomcat%202/","text":"Configure Tomcat for Lightrun \u00b6 Tomcat is an open source Java application server by Apache. Applications are installed on Tomcat with a compressed Java web application resource (WAR) file. To start using Lightrun, first add an additional parameter to the JAVA_OPTS configuration variable in the WAR file. To configure Tomcat for Lightrun Copy the following agent path configuration: -agentpath:<install_dir>/agent/lightrun_agent.so = --lightrun_extra_class_path = <tomcat-path>/webapps/<app-name.war> Paste the agent path as an additional parameter to the JAVA_OPTS variable in your WAR file. Restart the Tomcat server to apply the configuration: ./catalina.sh stop ./catalina.sh start Note This configuration enables the Lightrun agent to run every time the webserver restarts. Tomcat autodeploy (dynamic deployment) does not start a new agent. The agent should be restarted in order to apply new actions.","title":"Configure Tomcat for Lightrun"},{"location":"tomcat%202/#configure-tomcat-for-lightrun","text":"Tomcat is an open source Java application server by Apache. Applications are installed on Tomcat with a compressed Java web application resource (WAR) file. To start using Lightrun, first add an additional parameter to the JAVA_OPTS configuration variable in the WAR file.","title":"Configure Tomcat for Lightrun"},{"location":"tomcat/","text":"Configure Tomcat for Lightrun \u00b6 Tomcat is an open source Java application server by Apache. Applications are installed on Tomcat with a compressed Java web application resource (WAR) file. To start using Lightrun, first add an additional parameter to the JAVA_OPTS configuration variable in the WAR file. To configure Tomcat for Lightrun Copy the following agent path configuration: -agentpath:<install_dir>/agent/lightrun_agent.so = --lightrun_extra_class_path = <tomcat-path>/webapps/<app-name.war> Paste the agent path as an additional parameter to the JAVA_OPTS variable in your WAR file. Restart the Tomcat server to apply the configuration: ./catalina.sh stop ./catalina.sh start Note This configuration enables the Lightrun agent to run every time the webserver restarts. Tomcat autodeploy (dynamic deployment) does not start a new agent. The agent should be restarted in order to apply new actions.","title":"Tomcat"},{"location":"tomcat/#configure-tomcat-for-lightrun","text":"Tomcat is an open source Java application server by Apache. Applications are installed on Tomcat with a compressed Java web application resource (WAR) file. To start using Lightrun, first add an additional parameter to the JAVA_OPTS configuration variable in the WAR file.","title":"Configure Tomcat for Lightrun"},{"location":"troubleshooting%202/","text":"Troubleshooting \u00b6 Sometimes issues may arise that interfere with smooth running. We've done our best to gather a list of come more common issues and possible solutions. If you can't find solutions here, contact us and we'll be happy to help. Agents don't appear in IDE \u00b6 If agents don't appear in the IDE, it could be because they are not running on the application server. If you're sure the agent is running, it could be due to connection or authentication issues from the client. To resolve these, try: Restarting the IDE Logging in to Lightrun from the IDE again If the agents still don't appear, contact your administrator for assistance. Lightrun actions in this file were submitted against a different version...\u200b \u00b6 This notification warning pops up when one or more actions in the open file were set against different source code. This might happen if you set an action after making edits to the file, or if an action was set to the same file by another person whose source code differs from yours. This warning can be ignored, as it doesn't block the activation of the action. However, actions set on mismatching source code can cause unexpected behavior, so it is recommended to solve the issue. To solve the issue, make sure that the application you are debugging is the same as the code in your editor (or the editor of whoever set the action). If the problem persists, you can disable the warning by clicking=>\"Don't Show this Again\" in the notification panel. Disabling this notification will also affect the way other people view the actions that you have set. Self-signed certificate is blocked \u00b6 The troubleshooting may vary depending on browser, browser version or operating system. The following cover most of the popular browsers and operating systems: Getting Chrome to accept self-signed localhost certificate (per Chrome version) Ubuntu: Adding a self-signed certificate to the \"trusted list\" Creating and Trusting Self-Signed Certs on MacOS and Chrome/Safari How to trust a self-signed SSL certificate in IE11 and Edge How do you get Chrome to accept a self-signed certificate on Win10 Can't sign in from the plugin \u00b6 Possible issues: No connectivity to server (cloud) Check the Lightrun Server URL in the settings and make sure it's the same URL that appears in the browser page from which you're trying to authenticate Can't sign in from the browser \u00b6 No connectivity to server (cloud) Problem with embedded browser - try disabling Use Embedded Browser from Settings. Agent exits immediately after starting the application \u00b6 If you're running with classes (not jars), check that the class path has been configured. Check that the Java path is correct for the agent. Can't see logs in my IDE \u00b6 Check piping configuration to ensure it's set to Plugin or Both. Check all of the Lightrun Console filters to make sure you haven't filtered out the logs you're looking for Exceptions table is empty \u00b6 Your application is perfect! But if you're convinced otherwise, try these options: Exception monitoring isn't enabled on the agent. (see agent properties) The manager might have cleared exception history. The next time an exception occurs it will appear here. Metrics not reported in external tools (system integrations) \u00b6 Double check the configurations for your webhook, app settings and the credentials you've used to integrate. Check that additional integration settings are correct based on the third-party platform in order to ensure our server can send information to them. Ensure piping is enabled. Can't create a new action \u00b6 You're not logged in anymore. You're not standing on a line of code, or you're standing on an empty line. The agent is down. There are currently no tags for any of the agents. You're not connected to the correct source code version (the same version currently running with the agent) Your plugin might need to be upgraded to the newest version. Can't delete an existing action \u00b6 You're not logged in anymore. The agent isn't currently active. Can't see Lightrun's sidebar \u00b6 The IntelliJ default is set to Collapse. You've disabled or uninstalled the plugin or removed it from the sidebar. Check settings at View->Tool Windows->Lightrun) Can't configure Lightrun server settings \u00b6 You're not logged in anymore. The server can't be accessed. Can't switch user \u00b6 Log out of the currently active user first. Clear cookies and try again. If you're working from the browser, try a different browser and try incognito.","title":"Troubleshooting"},{"location":"troubleshooting%202/#troubleshooting","text":"Sometimes issues may arise that interfere with smooth running. We've done our best to gather a list of come more common issues and possible solutions. If you can't find solutions here, contact us and we'll be happy to help.","title":"Troubleshooting"},{"location":"troubleshooting%202/#agents-dont-appear-in-ide","text":"If agents don't appear in the IDE, it could be because they are not running on the application server. If you're sure the agent is running, it could be due to connection or authentication issues from the client. To resolve these, try: Restarting the IDE Logging in to Lightrun from the IDE again If the agents still don't appear, contact your administrator for assistance.","title":"Agents don't appear in IDE"},{"location":"troubleshooting%202/#lightrun-actions-in-this-file-were-submitted-against-a-different-version","text":"This notification warning pops up when one or more actions in the open file were set against different source code. This might happen if you set an action after making edits to the file, or if an action was set to the same file by another person whose source code differs from yours. This warning can be ignored, as it doesn't block the activation of the action. However, actions set on mismatching source code can cause unexpected behavior, so it is recommended to solve the issue. To solve the issue, make sure that the application you are debugging is the same as the code in your editor (or the editor of whoever set the action). If the problem persists, you can disable the warning by clicking=>\"Don't Show this Again\" in the notification panel. Disabling this notification will also affect the way other people view the actions that you have set.","title":"Lightrun actions in this file were submitted against a different version...\u200b"},{"location":"troubleshooting%202/#_self_signed_certificate_is_blocked","text":"The troubleshooting may vary depending on browser, browser version or operating system. The following cover most of the popular browsers and operating systems: Getting Chrome to accept self-signed localhost certificate (per Chrome version) Ubuntu: Adding a self-signed certificate to the \"trusted list\" Creating and Trusting Self-Signed Certs on MacOS and Chrome/Safari How to trust a self-signed SSL certificate in IE11 and Edge How do you get Chrome to accept a self-signed certificate on Win10","title":"Self-signed certificate is blocked"},{"location":"troubleshooting%202/#cant-sign-in-from-the-plugin","text":"Possible issues: No connectivity to server (cloud) Check the Lightrun Server URL in the settings and make sure it's the same URL that appears in the browser page from which you're trying to authenticate","title":"Can't sign in from the plugin"},{"location":"troubleshooting%202/#cant-sign-in-from-the-browser","text":"No connectivity to server (cloud) Problem with embedded browser - try disabling Use Embedded Browser from Settings.","title":"Can't sign in from the browser"},{"location":"troubleshooting%202/#agent-exits-immediately-after-starting-the-application","text":"If you're running with classes (not jars), check that the class path has been configured. Check that the Java path is correct for the agent.","title":"Agent exits immediately after starting the application"},{"location":"troubleshooting%202/#cant-see-logs-in-my-ide","text":"Check piping configuration to ensure it's set to Plugin or Both. Check all of the Lightrun Console filters to make sure you haven't filtered out the logs you're looking for","title":"Can't see logs in my IDE"},{"location":"troubleshooting%202/#exceptions-table-is-empty","text":"Your application is perfect! But if you're convinced otherwise, try these options: Exception monitoring isn't enabled on the agent. (see agent properties) The manager might have cleared exception history. The next time an exception occurs it will appear here.","title":"Exceptions table is empty"},{"location":"troubleshooting%202/#metrics-not-reported-in-external-tools-system-integrations","text":"Double check the configurations for your webhook, app settings and the credentials you've used to integrate. Check that additional integration settings are correct based on the third-party platform in order to ensure our server can send information to them. Ensure piping is enabled.","title":"Metrics not reported in external tools (system integrations)"},{"location":"troubleshooting%202/#cant-create-a-new-action","text":"You're not logged in anymore. You're not standing on a line of code, or you're standing on an empty line. The agent is down. There are currently no tags for any of the agents. You're not connected to the correct source code version (the same version currently running with the agent) Your plugin might need to be upgraded to the newest version.","title":"Can't create a new action"},{"location":"troubleshooting%202/#cant-delete-an-existing-action","text":"You're not logged in anymore. The agent isn't currently active.","title":"Can't delete an existing action"},{"location":"troubleshooting%202/#cant-see-lightruns-sidebar","text":"The IntelliJ default is set to Collapse. You've disabled or uninstalled the plugin or removed it from the sidebar. Check settings at View->Tool Windows->Lightrun)","title":"Can't see Lightrun's sidebar"},{"location":"troubleshooting%202/#cant-configure-lightrun-server-settings","text":"You're not logged in anymore. The server can't be accessed.","title":"Can't configure Lightrun server settings"},{"location":"troubleshooting%202/#cant-switch-user","text":"Log out of the currently active user first. Clear cookies and try again. If you're working from the browser, try a different browser and try incognito.","title":"Can't switch user"},{"location":"troubleshooting/","text":"Troubleshooting \u00b6 Sometimes issues may arise that interfere with smooth running. We've done our best to gather a list of come more common issues and possible solutions. If you can't find solutions here, contact us and we'll be happy to help. Agents don't appear in IDE \u00b6 If agents don't appear in the IDE, it could be because they are not running on the application server. If you're sure the agent is running, it could be due to connection or authentication issues from the client. To resolve these, try: Restarting the IDE Logging in to Lightrun from the IDE again If the agents still don't appear, contact your administrator for assistance. Lightrun actions in this file were submitted against a different version...\u200b \u00b6 This notification warning pops up when one or more actions in the open file were set against different source code. This might happen if you set an action after making edits to the file, or if an action was set to the same file by another person whose source code differs from yours. This warning can be ignored, as it doesn't block the activation of the action. However, actions set on mismatching source code can cause unexpected behavior, so it is recommended to solve the issue. To solve the issue, make sure that the application you are debugging is the same as the code in your editor (or the editor of whoever set the action). If the problem persists, you can disable the warning by clicking=>\"Don't Show this Again\" in the notification panel. Disabling this notification will also affect the way other people view the actions that you have set. Self-signed certificate is blocked \u00b6 The troubleshooting may vary depending on browser, browser version or operating system. The following cover most of the popular browsers and operating systems: Getting Chrome to accept self-signed localhost certificate (per Chrome version) Ubuntu: Adding a self-signed certificate to the \"trusted list\" Creating and Trusting Self-Signed Certs on MacOS and Chrome/Safari How to trust a self-signed SSL certificate in IE11 and Edge How do you get Chrome to accept a self-signed certificate on Win10 Can't sign in from the plugin \u00b6 Possible issues: No connectivity to server (cloud) Check the Lightrun Server URL in the settings and make sure it's the same URL that appears in the browser page from which you're trying to authenticate Can't sign in from the browser \u00b6 No connectivity to server (cloud) Problem with embedded browser - try disabling Use Embedded Browser from Settings. Agent exits immediately after starting the application \u00b6 If you're running with classes (not jars), check that the class path has been configured. Check that the Java path is correct for the agent. Can't see logs in my IDE \u00b6 Check piping configuration to ensure it's set to Plugin or Both. Check all of the Lightrun Console filters to make sure you haven't filtered out the logs you're looking for Exceptions table is empty \u00b6 Your application is perfect! But if you're convinced otherwise, try these options: Exception monitoring isn't enabled on the agent. (see agent properties) The manager might have cleared exception history. The next time an exception occurs it will appear here. Metrics not reported in external tools (system integrations) \u00b6 Double check the configurations for your webhook, app settings and the credentials you've used to integrate. Check that additional integration settings are correct based on the third-party platform in order to ensure our server can send information to them. Ensure piping is enabled. Can't create a new action \u00b6 You're not logged in anymore. You're not standing on a line of code, or you're standing on an empty line. The agent is down. There are currently no tags for any of the agents. You're not connected to the correct source code version (the same version currently running with the agent) Your plugin might need to be upgraded to the newest version. Can't delete an existing action \u00b6 You're not logged in anymore. The agent isn't currently active. Can't see Lightrun's sidebar \u00b6 The IntelliJ default is set to Collapse. You've disabled or uninstalled the plugin or removed it from the sidebar. Check settings at View->Tool Windows->Lightrun) Can't configure Lightrun server settings \u00b6 You're not logged in anymore. The server can't be accessed. Can't switch user \u00b6 Log out of the currently active user first. Clear cookies and try again. If you're working from the browser, try a different browser and try incognito.","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"Sometimes issues may arise that interfere with smooth running. We've done our best to gather a list of come more common issues and possible solutions. If you can't find solutions here, contact us and we'll be happy to help.","title":"Troubleshooting"},{"location":"troubleshooting/#agents-dont-appear-in-ide","text":"If agents don't appear in the IDE, it could be because they are not running on the application server. If you're sure the agent is running, it could be due to connection or authentication issues from the client. To resolve these, try: Restarting the IDE Logging in to Lightrun from the IDE again If the agents still don't appear, contact your administrator for assistance.","title":"Agents don't appear in IDE"},{"location":"troubleshooting/#lightrun-actions-in-this-file-were-submitted-against-a-different-version","text":"This notification warning pops up when one or more actions in the open file were set against different source code. This might happen if you set an action after making edits to the file, or if an action was set to the same file by another person whose source code differs from yours. This warning can be ignored, as it doesn't block the activation of the action. However, actions set on mismatching source code can cause unexpected behavior, so it is recommended to solve the issue. To solve the issue, make sure that the application you are debugging is the same as the code in your editor (or the editor of whoever set the action). If the problem persists, you can disable the warning by clicking=>\"Don't Show this Again\" in the notification panel. Disabling this notification will also affect the way other people view the actions that you have set.","title":"Lightrun actions in this file were submitted against a different version...\u200b"},{"location":"troubleshooting/#_self_signed_certificate_is_blocked","text":"The troubleshooting may vary depending on browser, browser version or operating system. The following cover most of the popular browsers and operating systems: Getting Chrome to accept self-signed localhost certificate (per Chrome version) Ubuntu: Adding a self-signed certificate to the \"trusted list\" Creating and Trusting Self-Signed Certs on MacOS and Chrome/Safari How to trust a self-signed SSL certificate in IE11 and Edge How do you get Chrome to accept a self-signed certificate on Win10","title":"Self-signed certificate is blocked"},{"location":"troubleshooting/#cant-sign-in-from-the-plugin","text":"Possible issues: No connectivity to server (cloud) Check the Lightrun Server URL in the settings and make sure it's the same URL that appears in the browser page from which you're trying to authenticate","title":"Can't sign in from the plugin"},{"location":"troubleshooting/#cant-sign-in-from-the-browser","text":"No connectivity to server (cloud) Problem with embedded browser - try disabling Use Embedded Browser from Settings.","title":"Can't sign in from the browser"},{"location":"troubleshooting/#agent-exits-immediately-after-starting-the-application","text":"If you're running with classes (not jars), check that the class path has been configured. Check that the Java path is correct for the agent.","title":"Agent exits immediately after starting the application"},{"location":"troubleshooting/#cant-see-logs-in-my-ide","text":"Check piping configuration to ensure it's set to Plugin or Both. Check all of the Lightrun Console filters to make sure you haven't filtered out the logs you're looking for","title":"Can't see logs in my IDE"},{"location":"troubleshooting/#exceptions-table-is-empty","text":"Your application is perfect! But if you're convinced otherwise, try these options: Exception monitoring isn't enabled on the agent. (see agent properties) The manager might have cleared exception history. The next time an exception occurs it will appear here.","title":"Exceptions table is empty"},{"location":"troubleshooting/#metrics-not-reported-in-external-tools-system-integrations","text":"Double check the configurations for your webhook, app settings and the credentials you've used to integrate. Check that additional integration settings are correct based on the third-party platform in order to ensure our server can send information to them. Ensure piping is enabled.","title":"Metrics not reported in external tools (system integrations)"},{"location":"troubleshooting/#cant-create-a-new-action","text":"You're not logged in anymore. You're not standing on a line of code, or you're standing on an empty line. The agent is down. There are currently no tags for any of the agents. You're not connected to the correct source code version (the same version currently running with the agent) Your plugin might need to be upgraded to the newest version.","title":"Can't create a new action"},{"location":"troubleshooting/#cant-delete-an-existing-action","text":"You're not logged in anymore. The agent isn't currently active.","title":"Can't delete an existing action"},{"location":"troubleshooting/#cant-see-lightruns-sidebar","text":"The IntelliJ default is set to Collapse. You've disabled or uninstalled the plugin or removed it from the sidebar. Check settings at View->Tool Windows->Lightrun)","title":"Can't see Lightrun's sidebar"},{"location":"troubleshooting/#cant-configure-lightrun-server-settings","text":"You're not logged in anymore. The server can't be accessed.","title":"Can't configure Lightrun server settings"},{"location":"troubleshooting/#cant-switch-user","text":"Log out of the currently active user first. Clear cookies and try again. If you're working from the browser, try a different browser and try incognito.","title":"Can't switch user"},{"location":"useradmin%202/","text":"Lightrun administrators are assigned the Manager role. When logged in as a manager, you can: Manage users Audit use of Lightrun Invite new users Add and manage server integrations Entities - from which you can gain insights about actions, currently connected agents, logs and tags (described in Data Management ) Manage agents and services Collect Lightrun logs for troubleshooting","title":"Useradmin 2"},{"location":"useradmin-roles%202/","text":"Manage users and roles \u00b6 Note Only Manager accounts have administrator permissions and can manage roles. Administrators can manage users and their permissions as follows: onboard new users and view pending invitations manage users Onboard new users to Lightrun \u00b6 In order to onboard new users to Lightrun, you need to invite them first. Once they join the organization's account, you can them give them the relevant permissions. Access Lightrun using your manager credentials. Navigate to the Manager menu and choose The following window loads: You can invite a single or multiple users as follows: Invite a single user on the fly: copy the invitation link and send it to the user in a secure manner of your choice Invite a single or multiple users by mail: insert email addresses separated by commas and then click Send Create a single user from the management screen as described in the next section, and then send credentials to that user View the list of invitations not yet accepted from the Pending Invites section. Once the user receives the invitation, by mail or on-the-fly, they click the link they receive and are re-directed to a registration page: The user should complete the registration information and click Register . Once the user registers, they can log in and access basic user screens. Additionally, they now appear in the Users Management list. You can now further refine their permissions . Add, edit and remove users and their permissions \u00b6 Administrators can create, edit and remove users and their permissions. As a manager (administrator), you can control the following permissions: Manager - additional capabilities enabling server and user management, such as creating and removing users, clearing exceptions and the like. Ignore quota - permissions to ignore the system quota; the quota controls use of CPU, Networking, Memory, excessively long strings, too many instructions printing out, protection from infinite loops and the like [//] # - Set value - permissions to insert actions with functions and other methods that might change values in the code User - standard permissions to insert actions and view resulting data To manage your users navigate to the User Management screen Go to the Manager menu. Click User management . The User Management screen loads: To create a new user from the User Management screen Navigate to the User Management screen. Click Create new user . The Edit User window pops up with empty fields. Complete the fields with relevant details. To enable the user immediately, toggle the Activated button to green. Add permissions from the User Roles window: click on the relevant role. To add multiple roles, press CTRL , and then click on the relevant roles. To view user details You can view the permissions and details that were entered for a user when created or modified, as well as the creation and modification details. Navigate to the User Management screen. From the row for the relevant user click . The User details window pops up. To edit existing users Navigate to the User Management screen. From the row for the relevant user click . The Edit User window pops up with empty fields. Complete the fields with relevant details. To activate or deactivate the user, toggle the Activated button to green. Add or remove permissions from the User Roles window: click on the relevant role to add or remove it. To add multiple roles, press CTRL , and then click on the relevant roles. To remove a user Navigate to the User Management screen. From the row for the relevant user, toggle the Active button to grey. The Delete icon now appears on the row. Click . The Confirm window pops up: When prompted, click Delete to remove the user.","title":"Manage users and roles"},{"location":"useradmin-roles%202/#manage-users-and-roles","text":"Note Only Manager accounts have administrator permissions and can manage roles. Administrators can manage users and their permissions as follows: onboard new users and view pending invitations manage users","title":"Manage users and roles"},{"location":"useradmin-roles%202/#onboard","text":"In order to onboard new users to Lightrun, you need to invite them first. Once they join the organization's account, you can them give them the relevant permissions. Access Lightrun using your manager credentials. Navigate to the Manager menu and choose The following window loads: You can invite a single or multiple users as follows: Invite a single user on the fly: copy the invitation link and send it to the user in a secure manner of your choice Invite a single or multiple users by mail: insert email addresses separated by commas and then click Send Create a single user from the management screen as described in the next section, and then send credentials to that user View the list of invitations not yet accepted from the Pending Invites section. Once the user receives the invitation, by mail or on-the-fly, they click the link they receive and are re-directed to a registration page: The user should complete the registration information and click Register . Once the user registers, they can log in and access basic user screens. Additionally, they now appear in the Users Management list. You can now further refine their permissions .","title":"Onboard new users to Lightrun"},{"location":"useradmin-roles%202/#permissions","text":"Administrators can create, edit and remove users and their permissions. As a manager (administrator), you can control the following permissions: Manager - additional capabilities enabling server and user management, such as creating and removing users, clearing exceptions and the like. Ignore quota - permissions to ignore the system quota; the quota controls use of CPU, Networking, Memory, excessively long strings, too many instructions printing out, protection from infinite loops and the like [//] # - Set value - permissions to insert actions with functions and other methods that might change values in the code User - standard permissions to insert actions and view resulting data","title":"Add, edit and remove users and their permissions"},{"location":"useradmin-roles/","text":"Manage users and roles \u00b6 Note Only Manager accounts have administrator permissions and can manage roles. Administrators can manage users and their permissions as follows: onboard new users and view pending invitations manage users Onboard new users to Lightrun \u00b6 In order to onboard new users to Lightrun, you need to invite them first. Once they join the organization's account, you can them give them the relevant permissions. Access Lightrun using your manager credentials. Navigate to the Manager menu and choose The following window loads: You can invite a single or multiple users as follows: Invite a single user on the fly: copy the invitation link and send it to the user in a secure manner of your choice Invite a single or multiple users by mail: insert email addresses separated by commas and then click Send Create a single user from the management screen as described in the next section, and then send credentials to that user View the list of invitations not yet accepted from the Pending Invites section. Once the user receives the invitation, by mail or on-the-fly, they click the link they receive and are re-directed to a registration page: The user should complete the registration information and click Register . Once the user registers, they can log in and access basic user screens. Additionally, they now appear in the Users Management list. You can now further refine their permissions . Add, edit and remove users and their permissions \u00b6 Administrators can create, edit and remove users and their permissions. As a manager (administrator), you can control the following permissions: Manager - additional capabilities enabling server and user management, such as creating and removing users, clearing exceptions and the like. Ignore quota - permissions to ignore the system quota; the quota controls use of CPU, Networking, Memory, excessively long strings, too many instructions printing out, protection from infinite loops and the like [//] # - Set value - permissions to insert actions with functions and other methods that might change values in the code User - standard permissions to insert actions and view resulting data To manage your users navigate to the User Management screen Go to the Manager menu. Click User management . The User Management screen loads: To create a new user from the User Management screen Navigate to the User Management screen. Click Create new user . The Edit User window pops up with empty fields. Complete the fields with relevant details. To enable the user immediately, toggle the Activated button to green. Add permissions from the User Roles window: click on the relevant role. To add multiple roles, press CTRL , and then click on the relevant roles. To view user details You can view the permissions and details that were entered for a user when created or modified, as well as the creation and modification details. Navigate to the User Management screen. From the row for the relevant user click . The User details window pops up. To edit existing users Navigate to the User Management screen. From the row for the relevant user click . The Edit User window pops up with empty fields. Complete the fields with relevant details. To activate or deactivate the user, toggle the Activated button to green. Add or remove permissions from the User Roles window: click on the relevant role to add or remove it. To add multiple roles, press CTRL , and then click on the relevant roles. To remove a user Navigate to the User Management screen. From the row for the relevant user, toggle the Active button to grey. The Delete icon now appears on the row. Click . The Confirm window pops up: When prompted, click Delete to remove the user.","title":"Manage Users and Roles"},{"location":"useradmin-roles/#manage-users-and-roles","text":"Note Only Manager accounts have administrator permissions and can manage roles. Administrators can manage users and their permissions as follows: onboard new users and view pending invitations manage users","title":"Manage users and roles"},{"location":"useradmin-roles/#onboard","text":"In order to onboard new users to Lightrun, you need to invite them first. Once they join the organization's account, you can them give them the relevant permissions. Access Lightrun using your manager credentials. Navigate to the Manager menu and choose The following window loads: You can invite a single or multiple users as follows: Invite a single user on the fly: copy the invitation link and send it to the user in a secure manner of your choice Invite a single or multiple users by mail: insert email addresses separated by commas and then click Send Create a single user from the management screen as described in the next section, and then send credentials to that user View the list of invitations not yet accepted from the Pending Invites section. Once the user receives the invitation, by mail or on-the-fly, they click the link they receive and are re-directed to a registration page: The user should complete the registration information and click Register . Once the user registers, they can log in and access basic user screens. Additionally, they now appear in the Users Management list. You can now further refine their permissions .","title":"Onboard new users to Lightrun"},{"location":"useradmin-roles/#permissions","text":"Administrators can create, edit and remove users and their permissions. As a manager (administrator), you can control the following permissions: Manager - additional capabilities enabling server and user management, such as creating and removing users, clearing exceptions and the like. Ignore quota - permissions to ignore the system quota; the quota controls use of CPU, Networking, Memory, excessively long strings, too many instructions printing out, protection from infinite loops and the like [//] # - Set value - permissions to insert actions with functions and other methods that might change values in the code User - standard permissions to insert actions and view resulting data","title":"Add, edit and remove users and their permissions"},{"location":"useradmin/","text":"Lightrun administrators are assigned the Manager role. When logged in as a manager, you can: Manage users Audit use of Lightrun Invite new users Add and manage server integrations Entities - from which you can gain insights about actions, currently connected agents, logs and tags (described in Data Management ) Manage agents and services Collect Lightrun logs for troubleshooting","title":"Overview"},{"location":"userexceptions%202/","text":"View exceptions from IntelliJ \u00b6 You can view exceptions that have been thrown over the last month, and for the current day, directly from your IDE. To view exceptions from IntelliJ click the Exceptions tab from the bottom of the Lightrun sidebar:","title":"View exceptions from IntelliJ"},{"location":"userexceptions%202/#view-exceptions-from-intellij","text":"You can view exceptions that have been thrown over the last month, and for the current day, directly from your IDE. To view exceptions from IntelliJ click the Exceptions tab from the bottom of the Lightrun sidebar:","title":"View exceptions from IntelliJ"},{"location":"userexceptions%203/","text":"View exceptions from IntelliJ \u00b6 You can view exceptions that have been thrown over the last month, and for the current day, directly from your IDE. To view exceptions from IntelliJ click the Exceptions tab from the bottom of the Lightrun sidebar:","title":"View exceptions from IntelliJ"},{"location":"userexceptions%203/#view-exceptions-from-intellij","text":"You can view exceptions that have been thrown over the last month, and for the current day, directly from your IDE. To view exceptions from IntelliJ click the Exceptions tab from the bottom of the Lightrun sidebar:","title":"View exceptions from IntelliJ"},{"location":"userexceptions%204/","text":"View exceptions from IntelliJ \u00b6 You can view exceptions that have been thrown over the last month, and for the current day, directly from your IDE. To view exceptions from IntelliJ click the Exceptions tab from the bottom of the Lightrun sidebar:","title":"View exceptions from IntelliJ"},{"location":"userexceptions%204/#view-exceptions-from-intellij","text":"You can view exceptions that have been thrown over the last month, and for the current day, directly from your IDE. To view exceptions from IntelliJ click the Exceptions tab from the bottom of the Lightrun sidebar:","title":"View exceptions from IntelliJ"},{"location":"userexceptions/","text":"View exceptions from IntelliJ \u00b6 You can view exceptions that have been thrown over the last month, and for the current day, directly from your IDE. To view exceptions from IntelliJ click the Exceptions tab from the bottom of the Lightrun sidebar:","title":"View Exceptions from the IDE"},{"location":"userexceptions/#view-exceptions-from-intellij","text":"You can view exceptions that have been thrown over the last month, and for the current day, directly from your IDE. To view exceptions from IntelliJ click the Exceptions tab from the bottom of the Lightrun sidebar:","title":"View exceptions from IntelliJ"},{"location":"viewdataide%202/","text":"Data views in the IDE \u00b6 The Console and Snapshot views enable you to view log, metric and snapshot data in real time directly from the IDE, depending on what you've added . To use the plugin, make sure: You've attached at least one agent to your app You install the plugin in your local IntelliJ instance) You authenticate IntelliJ with your Lightrun account From the IDE, you can: configure log piping to view data directly from the IDE view logs and metrics view the stacktrace based on the snapshots you added To configure piping Navigate to the Lightrun right-hand sidebar: From the relevant agent, click to open the Piping menu: Set the Plugin or the Both option to view logs from the IDE. There are three levels of log piping: - App - the logs appear only in the Java application as they do by default. They just go to the standard logger. - Plugin - that logs won't show in the app. Instead they will display within the Lightrun Console below. - Both - that logs wll appear both in the app and in the plugin. Note In order to pipe the logs they need to go from the agent to the Management server and to the plugin. This process is batched so logs appear in batches and with some delay View logs and metrics \u00b6 Lightrun logs and metrics are normally printed into the standard logging framework. This is quite valuable as logs can be seen in the context of pre-existing log statements, which might provide further clues towards solving issues. At the same time, a developer might want to see the log output and search and filter directly from the IDE as they work. To do this, first configure log piping per-agent. Once configured, all relevant information from any Lightrun actions that are added to the agents appears in the developers' consoles. To view log data from IntelliJ Once you configure piping for the plugin and add at least one log to the code , logs and metrics start updating in real time in the Lightrun Console at the bottom sidebar in IntelliJ: Use the filters at the top right of the Console data to filter for the logs relevant to your investigation. Use the search bar at the top left to start typing and search dynamically for logs by name. To free memory or remove items already viewed, click Clear to remove logs that have already been displayed. View snapshot data \u00b6 Every time you add a snapshot to the code, it appears in the bottom sidebar of IntelliJ in the Lightrun Snapshots tab. The layout of the data that prints out is similar to the debugger interface, designed to be familiar to you. The name that was assigned to the snapshot when it was added appears at the top of the sidebar. The left column lists all of the stack trace frames from the relevant snapshot. Click the row of a specific frame to view the variables related to the exception that was thrown.","title":"Viewdataide 2"},{"location":"viewdataide%202/#data-views-in-the-ide","text":"The Console and Snapshot views enable you to view log, metric and snapshot data in real time directly from the IDE, depending on what you've added . To use the plugin, make sure: You've attached at least one agent to your app You install the plugin in your local IntelliJ instance) You authenticate IntelliJ with your Lightrun account From the IDE, you can: configure log piping to view data directly from the IDE view logs and metrics view the stacktrace based on the snapshots you added","title":"Data views in the IDE"},{"location":"viewdataide%202/#view","text":"Lightrun logs and metrics are normally printed into the standard logging framework. This is quite valuable as logs can be seen in the context of pre-existing log statements, which might provide further clues towards solving issues. At the same time, a developer might want to see the log output and search and filter directly from the IDE as they work. To do this, first configure log piping per-agent. Once configured, all relevant information from any Lightrun actions that are added to the agents appears in the developers' consoles.","title":"View logs and metrics"},{"location":"viewdataide%202/#snapshot","text":"Every time you add a snapshot to the code, it appears in the bottom sidebar of IntelliJ in the Lightrun Snapshots tab. The layout of the data that prints out is similar to the debugger interface, designed to be familiar to you. The name that was assigned to the snapshot when it was added appears at the top of the sidebar. The left column lists all of the stack trace frames from the relevant snapshot. Click the row of a specific frame to view the variables related to the exception that was thrown.","title":"View snapshot data"},{"location":"viewdataide%203/","text":"Data views in the IDE \u00b6 The Console and Snapshot views enable you to view log, metric and snapshot data in real time directly from the IDE, depending on what you've added . To use the plugin, make sure: You've attached at least one agent to your app You install the plugin in your local IntelliJ instance) You authenticate IntelliJ with your Lightrun account From the IDE, you can: configure log piping to view data directly from the IDE view logs and metrics view the stacktrace based on the snapshots you added To configure piping Navigate to the Lightrun right-hand sidebar: From the relevant agent, click to open the Piping menu: Set the Plugin or the Both option to view logs from the IDE. There are three levels of log piping: - App - the logs appear only in the Java application as they do by default. They just go to the standard logger. - Plugin - that logs won't show in the app. Instead they will display within the Lightrun Console below. - Both - that logs wll appear both in the app and in the plugin. Note In order to pipe the logs they need to go from the agent to the Management server and to the plugin. This process is batched so logs appear in batches and with some delay View logs and metrics \u00b6 Lightrun logs and metrics are normally printed into the standard logging framework. This is quite valuable as logs can be seen in the context of pre-existing log statements, which might provide further clues towards solving issues. At the same time, a developer might want to see the log output and search and filter directly from the IDE as they work. To do this, first configure log piping per-agent. Once configured, all relevant information from any Lightrun actions that are added to the agents appears in the developers' consoles. To view log data from IntelliJ Once you configure piping for the plugin and add at least one log to the code , logs and metrics start updating in real time in the Lightrun Console at the bottom sidebar in IntelliJ: Use the filters at the top right of the Console data to filter for the logs relevant to your investigation. Use the search bar at the top left to start typing and search dynamically for logs by name. To free memory or remove items already viewed, click Clear to remove logs that have already been displayed. View snapshot data \u00b6 Every time you add a snapshot to the code, it appears in the bottom sidebar of IntelliJ in the Lightrun Snapshots tab. The layout of the data that prints out is similar to the debugger interface, designed to be familiar to you. The name that was assigned to the snapshot when it was added appears at the top of the sidebar. The left column lists all of the stack trace frames from the relevant snapshot. Click the row of a specific frame to view the variables related to the exception that was thrown.","title":"Viewdataide 3"},{"location":"viewdataide%203/#data-views-in-the-ide","text":"The Console and Snapshot views enable you to view log, metric and snapshot data in real time directly from the IDE, depending on what you've added . To use the plugin, make sure: You've attached at least one agent to your app You install the plugin in your local IntelliJ instance) You authenticate IntelliJ with your Lightrun account From the IDE, you can: configure log piping to view data directly from the IDE view logs and metrics view the stacktrace based on the snapshots you added","title":"Data views in the IDE"},{"location":"viewdataide%203/#view","text":"Lightrun logs and metrics are normally printed into the standard logging framework. This is quite valuable as logs can be seen in the context of pre-existing log statements, which might provide further clues towards solving issues. At the same time, a developer might want to see the log output and search and filter directly from the IDE as they work. To do this, first configure log piping per-agent. Once configured, all relevant information from any Lightrun actions that are added to the agents appears in the developers' consoles.","title":"View logs and metrics"},{"location":"viewdataide%203/#snapshot","text":"Every time you add a snapshot to the code, it appears in the bottom sidebar of IntelliJ in the Lightrun Snapshots tab. The layout of the data that prints out is similar to the debugger interface, designed to be familiar to you. The name that was assigned to the snapshot when it was added appears at the top of the sidebar. The left column lists all of the stack trace frames from the relevant snapshot. Click the row of a specific frame to view the variables related to the exception that was thrown.","title":"View snapshot data"},{"location":"viewdataide%204/","text":"Data views in the IDE \u00b6 The Console and Snapshot views enable you to view log, metric and snapshot data in real time directly from the IDE, depending on what you've added . To use the plugin, make sure: You've attached at least one agent to your app You install the plugin in your local IntelliJ instance) You authenticate IntelliJ with your Lightrun account From the IDE, you can: configure log piping to view data directly from the IDE view logs and metrics view the stacktrace based on the snapshots you added To configure piping Navigate to the Lightrun right-hand sidebar: From the relevant agent, click to open the Piping menu: Set the Plugin or the Both option to view logs from the IDE. There are three levels of log piping: - App - the logs appear only in the Java application as they do by default. They just go to the standard logger. - Plugin - that logs won't show in the app. Instead they will display within the Lightrun Console below. - Both - that logs wll appear both in the app and in the plugin. Note In order to pipe the logs they need to go from the agent to the Management server and to the plugin. This process is batched so logs appear in batches and with some delay View logs and metrics \u00b6 Lightrun logs and metrics are normally printed into the standard logging framework. This is quite valuable as logs can be seen in the context of pre-existing log statements, which might provide further clues towards solving issues. At the same time, a developer might want to see the log output and search and filter directly from the IDE as they work. To do this, first configure log piping per-agent. Once configured, all relevant information from any Lightrun actions that are added to the agents appears in the developers' consoles. To view log data from IntelliJ Once you configure piping for the plugin and add at least one log to the code , logs and metrics start updating in real time in the Lightrun Console at the bottom sidebar in IntelliJ: Use the filters at the top right of the Console data to filter for the logs relevant to your investigation. Use the search bar at the top left to start typing and search dynamically for logs by name. To free memory or remove items already viewed, click Clear to remove logs that have already been displayed. View snapshot data \u00b6 Every time you add a snapshot to the code, it appears in the bottom sidebar of IntelliJ in the Lightrun Snapshots tab. The layout of the data that prints out is similar to the debugger interface, designed to be familiar to you. The name that was assigned to the snapshot when it was added appears at the top of the sidebar. The left column lists all of the stack trace frames from the relevant snapshot. Click the row of a specific frame to view the variables related to the exception that was thrown.","title":"Viewdataide 4"},{"location":"viewdataide%204/#data-views-in-the-ide","text":"The Console and Snapshot views enable you to view log, metric and snapshot data in real time directly from the IDE, depending on what you've added . To use the plugin, make sure: You've attached at least one agent to your app You install the plugin in your local IntelliJ instance) You authenticate IntelliJ with your Lightrun account From the IDE, you can: configure log piping to view data directly from the IDE view logs and metrics view the stacktrace based on the snapshots you added","title":"Data views in the IDE"},{"location":"viewdataide%204/#view","text":"Lightrun logs and metrics are normally printed into the standard logging framework. This is quite valuable as logs can be seen in the context of pre-existing log statements, which might provide further clues towards solving issues. At the same time, a developer might want to see the log output and search and filter directly from the IDE as they work. To do this, first configure log piping per-agent. Once configured, all relevant information from any Lightrun actions that are added to the agents appears in the developers' consoles.","title":"View logs and metrics"},{"location":"viewdataide%204/#snapshot","text":"Every time you add a snapshot to the code, it appears in the bottom sidebar of IntelliJ in the Lightrun Snapshots tab. The layout of the data that prints out is similar to the debugger interface, designed to be familiar to you. The name that was assigned to the snapshot when it was added appears at the top of the sidebar. The left column lists all of the stack trace frames from the relevant snapshot. Click the row of a specific frame to view the variables related to the exception that was thrown.","title":"View snapshot data"},{"location":"viewdataide/","text":"Data views in the IDE \u00b6 The Console and Snapshot views enable you to view log, metric and snapshot data in real time directly from the IDE, depending on what you've added . To use the plugin, make sure: You've attached at least one agent to your app You install the plugin in your local IntelliJ instance) You authenticate IntelliJ with your Lightrun account From the IDE, you can: configure log piping to view data directly from the IDE view logs and metrics view the stacktrace based on the snapshots you added To configure piping Navigate to the Lightrun right-hand sidebar: From the relevant agent, click to open the Piping menu: Set the Plugin or the Both option to view logs from the IDE. There are three levels of log piping: - App - the logs appear only in the Java application as they do by default. They just go to the standard logger. - Plugin - that logs won't show in the app. Instead they will display within the Lightrun Console below. - Both - that logs wll appear both in the app and in the plugin. Note In order to pipe the logs they need to go from the agent to the Management server and to the plugin. This process is batched so logs appear in batches and with some delay View logs and metrics \u00b6 Lightrun logs and metrics are normally printed into the standard logging framework. This is quite valuable as logs can be seen in the context of pre-existing log statements, which might provide further clues towards solving issues. At the same time, a developer might want to see the log output and search and filter directly from the IDE as they work. To do this, first configure log piping per-agent. Once configured, all relevant information from any Lightrun actions that are added to the agents appears in the developers' consoles. To view log data from IntelliJ Once you configure piping for the plugin and add at least one log to the code , logs and metrics start updating in real time in the Lightrun Console at the bottom sidebar in IntelliJ: Use the filters at the top right of the Console data to filter for the logs relevant to your investigation. Use the search bar at the top left to start typing and search dynamically for logs by name. To free memory or remove items already viewed, click Clear to remove logs that have already been displayed. View snapshot data \u00b6 Every time you add a snapshot to the code, it appears in the bottom sidebar of IntelliJ in the Lightrun Snapshots tab. The layout of the data that prints out is similar to the debugger interface, designed to be familiar to you. The name that was assigned to the snapshot when it was added appears at the top of the sidebar. The left column lists all of the stack trace frames from the relevant snapshot. Click the row of a specific frame to view the variables related to the exception that was thrown.","title":"Viewdataide"},{"location":"viewdataide/#data-views-in-the-ide","text":"The Console and Snapshot views enable you to view log, metric and snapshot data in real time directly from the IDE, depending on what you've added . To use the plugin, make sure: You've attached at least one agent to your app You install the plugin in your local IntelliJ instance) You authenticate IntelliJ with your Lightrun account From the IDE, you can: configure log piping to view data directly from the IDE view logs and metrics view the stacktrace based on the snapshots you added","title":"Data views in the IDE"},{"location":"viewdataide/#view","text":"Lightrun logs and metrics are normally printed into the standard logging framework. This is quite valuable as logs can be seen in the context of pre-existing log statements, which might provide further clues towards solving issues. At the same time, a developer might want to see the log output and search and filter directly from the IDE as they work. To do this, first configure log piping per-agent. Once configured, all relevant information from any Lightrun actions that are added to the agents appears in the developers' consoles.","title":"View logs and metrics"},{"location":"viewdataide/#snapshot","text":"Every time you add a snapshot to the code, it appears in the bottom sidebar of IntelliJ in the Lightrun Snapshots tab. The layout of the data that prints out is similar to the debugger interface, designed to be familiar to you. The name that was assigned to the snapshot when it was added appears at the top of the sidebar. The left column lists all of the stack trace frames from the relevant snapshot. Click the row of a specific frame to view the variables related to the exception that was thrown.","title":"View snapshot data"},{"location":"weblogic%202/","text":"Configure WebLogic for Lightrun \u00b6 WebLogic is a Java application server by Oracle. The Enterprise Application (EAR) file contains the WebLogic Server configurations that need to be updated for Lightrun integration. To start using Lightrun with a WebLogic server, first add the agent path as an additional JAVA_OPTS parameter in the WebLogic EAR. To configure WebLogic for Lightrun Add the parameter with one of the following options: from the WebLogic Admin console: 1. Copy the agent path option. ``` -agentpath:<install_dir>/agent/lightrun_agent.so=--lightrun_extra_class_path=<glassfish-domain-path>/applications/<app-name>/WEB-INF/classes/ ``` 2. Navigate to the Admin panel (usually at http://localhost:7001/console ) 3. Press Lock & Edit . 4. Go to ** (environment) => Servers => (server) ** 5. Go to the Start/Stop tab and update the Arguments with the agent path. manually from the WebLogic sh file of the EAR 1. Copy the agent path and update it according to your configuration: ``` {.shell} -agentpath:<install_dir>/agent/lightrun_agent.so=--lightrun_extra_class_path=<weblogic-deploy-path>/<app-name.ear>. e.g. '--lightrun_extra_class_path=Oracle/Middleware/user_projects/domains/mydomain/deployments/myapp.ear' ``` 3. Add the path to Oracle/Middleware/user_projects/domains/<your-domain>/bin/setDomainEnv.sh as an additional parameter to the JAVA_OPTS (see WebLogic documentation for help ) Note This configuration enables the Lightrun agent to run every time the webserver restarts.","title":"Configure WebLogic for Lightrun"},{"location":"weblogic%202/#configure-weblogic-for-lightrun","text":"WebLogic is a Java application server by Oracle. The Enterprise Application (EAR) file contains the WebLogic Server configurations that need to be updated for Lightrun integration. To start using Lightrun with a WebLogic server, first add the agent path as an additional JAVA_OPTS parameter in the WebLogic EAR.","title":"Configure WebLogic for Lightrun"},{"location":"weblogic%203/","text":"Configure WebLogic for Lightrun \u00b6 WebLogic is a Java application server by Oracle. The Enterprise Application (EAR) file contains the WebLogic Server configurations that need to be updated for Lightrun integration. To start using Lightrun with a WebLogic server, first add the agent path as an additional JAVA_OPTS parameter in the WebLogic EAR. To configure WebLogic for Lightrun Add the parameter with one of the following options: from the WebLogic Admin console: 1. Copy the agent path option. -agentpath:<install_dir>/agent/lightrun_agent.so=--lightrun_extra_class_path=<glassfish-domain-path>/applications/<app-name>/WEB-INF/classes/ 2. Navigate to the Admin panel (usually at http://localhost:7001/console ) 3. Press Lock & Edit . 4. Go to (environment) => Servers => (server) 5. Go to the Start/Stop tab and update the Arguments with the agent path. manually from the WebLogic sh file of the EAR 1. Copy the agent path and update it according to your configuration: -agentpath:<install_dir>/agent/lightrun_agent.so=--lightrun_extra_class_path=<weblogic-deploy-path>/<app-name.ear>. e.g. '--lightrun_extra_class_path=Oracle/Middleware/user_projects/domains/mydomain/deployments/myapp.ear' 3. Add the path to Oracle/Middleware/user_projects/domains/<your-domain>/bin/setDomainEnv.sh as an additional parameter to the JAVA_OPTS (see WebLogic documentation for help ) Note This configuration enables the Lightrun agent to run every time the webserver restarts.","title":"Configure WebLogic for Lightrun"},{"location":"weblogic%203/#configure-weblogic-for-lightrun","text":"WebLogic is a Java application server by Oracle. The Enterprise Application (EAR) file contains the WebLogic Server configurations that need to be updated for Lightrun integration. To start using Lightrun with a WebLogic server, first add the agent path as an additional JAVA_OPTS parameter in the WebLogic EAR.","title":"Configure WebLogic for Lightrun"},{"location":"weblogic%204/","text":"Configure WebLogic for Lightrun \u00b6 WebLogic is a Java application server by Oracle. The Enterprise Application (EAR) file contains the WebLogic Server configurations that need to be updated for Lightrun integration. To start using Lightrun with a WebLogic server, first add the agent path as an additional JAVA_OPTS parameter in the WebLogic EAR. To configure WebLogic for Lightrun Add the parameter with one of the following options: from the WebLogic Admin console: 1. Copy the agent path option. ``` -agentpath:<install_dir>/agent/lightrun_agent.so=--lightrun_extra_class_path=<glassfish-domain-path>/applications/<app-name>/WEB-INF/classes/ ``` 2. Navigate to the Admin panel (usually at http://localhost:7001/console ) 3. Press Lock & Edit . 4. Go to ** (environment) => Servers => (server) ** 5. Go to the Start/Stop tab and update the Arguments with the agent path. manually from the WebLogic sh file of the EAR 1. Copy the agent path and update it according to your configuration: ``` {.shell} -agentpath:<install_dir>/agent/lightrun_agent.so=--lightrun_extra_class_path=<weblogic-deploy-path>/<app-name.ear>. e.g. '--lightrun_extra_class_path=Oracle/Middleware/user_projects/domains/mydomain/deployments/myapp.ear' ``` 3. Add the path to Oracle/Middleware/user_projects/domains/<your-domain>/bin/setDomainEnv.sh as an additional parameter to the JAVA_OPTS (see WebLogic documentation for help ) Note This configuration enables the Lightrun agent to run every time the webserver restarts.","title":"Configure WebLogic for Lightrun"},{"location":"weblogic%204/#configure-weblogic-for-lightrun","text":"WebLogic is a Java application server by Oracle. The Enterprise Application (EAR) file contains the WebLogic Server configurations that need to be updated for Lightrun integration. To start using Lightrun with a WebLogic server, first add the agent path as an additional JAVA_OPTS parameter in the WebLogic EAR.","title":"Configure WebLogic for Lightrun"},{"location":"weblogic/","text":"Configure WebLogic for Lightrun \u00b6 WebLogic is a Java application server by Oracle. The Enterprise Application (EAR) file contains the WebLogic Server configurations that need to be updated for Lightrun integration. To start using Lightrun with a WebLogic server, first add the agent path as an additional JAVA_OPTS parameter in the WebLogic EAR. To configure WebLogic for Lightrun Add the parameter with one of the following options: from the WebLogic Admin console: 1. Copy the agent path option. -agentpath:<install_dir>/agent/lightrun_agent.so=--lightrun_extra_class_path=<glassfish-domain-path>/applications/<app-name>/WEB-INF/classes/ 2. Navigate to the Admin panel (usually at http://localhost:7001/console ) 3. Press Lock & Edit . 4. Go to (environment) => Servers => (server) 5. Go to the Start/Stop tab and update the Arguments with the agent path. manually from the WebLogic sh file of the EAR 1. Copy the agent path and update it according to your configuration: -agentpath:<install_dir>/agent/lightrun_agent.so=--lightrun_extra_class_path=<weblogic-deploy-path>/<app-name.ear>. e.g. '--lightrun_extra_class_path=Oracle/Middleware/user_projects/domains/mydomain/deployments/myapp.ear' 3. Add the path to Oracle/Middleware/user_projects/domains/<your-domain>/bin/setDomainEnv.sh as an additional parameter to the JAVA_OPTS (see WebLogic documentation for help ) Note This configuration enables the Lightrun agent to run every time the webserver restarts.","title":"Weblogic"},{"location":"weblogic/#configure-weblogic-for-lightrun","text":"WebLogic is a Java application server by Oracle. The Enterprise Application (EAR) file contains the WebLogic Server configurations that need to be updated for Lightrun integration. To start using Lightrun with a WebLogic server, first add the agent path as an additional JAVA_OPTS parameter in the WebLogic EAR.","title":"Configure WebLogic for Lightrun"},{"location":"wildfly%202/","text":"Configure Wildfly for Lightrun \u00b6 Wildfly is a Java application server by RedHat. The WAR file contains the Wildfly Server configurations that need to be updated for Lightrun integration. To start using Lightrun with a Wildfly server, first add the agent path as an additional JAVA_OPTS parameter in the Wildfly WAR file. Note The Lightrun support for Wildfly has been verified on CentOS 7.6/WildFly 18 (the official WildFly Docker image). To configure Wildfly for Lightrun For a standalone JVM deployment, JVM settings can be added to the standalone.conf file in the EAP_HOME/bin folder. Accordingly, copy the agent path, update it according to your configuration and then add it to standalone.conf : -agentpath:<install_dir>/agent/lightrun_agent.so = --lightrun_extra_class_path = <widlfly-deploy-path>/<app-name.war>. e.g. '--lightrun_extra_class_path=/opt/jboss/wildfly/standalone/deployments/myapp.war' Tip The default server logs are in /opt/jboss/wildfly/standalone/log/server.log To deploy the app copy a .war file to the deployment dir /opt/jboss/wildfly/standalone/deployments/ To redeploy an app, copy a new file to the deployment dir and then run touch <app_name>.war in the same dir. Then see /opt/jboss/wildfly/standalone/log/server.log to verify; the server stops working following these updates. Restart WildFly - How to start/stop the WildFly server","title":"Configure Wildfly for Lightrun"},{"location":"wildfly%202/#configure-wildfly-for-lightrun","text":"Wildfly is a Java application server by RedHat. The WAR file contains the Wildfly Server configurations that need to be updated for Lightrun integration. To start using Lightrun with a Wildfly server, first add the agent path as an additional JAVA_OPTS parameter in the Wildfly WAR file. Note The Lightrun support for Wildfly has been verified on CentOS 7.6/WildFly 18 (the official WildFly Docker image).","title":"Configure Wildfly for Lightrun"},{"location":"wildfly%203/","text":"Configure Wildfly for Lightrun \u00b6 Wildfly is a Java application server by RedHat. The WAR file contains the Wildfly Server configurations that need to be updated for Lightrun integration. To start using Lightrun with a Wildfly server, first add the agent path as an additional JAVA_OPTS parameter in the Wildfly WAR file. Note The Lightrun support for Wildfly has been verified on CentOS 7.6/WildFly 18 (the official WildFly Docker image). To configure Wildfly for Lightrun For a standalone JVM deployment, JVM settings can be added to the standalone.conf file in the EAP_HOME/bin folder. Accordingly, copy the agent path, update it according to your configuration and then add it to standalone.conf : -agentpath:<install_dir>/agent/lightrun_agent.so = --lightrun_extra_class_path = <widlfly-deploy-path>/<app-name.war>. e.g. '--lightrun_extra_class_path=/opt/jboss/wildfly/standalone/deployments/myapp.war' Tip The default server logs are in /opt/jboss/wildfly/standalone/log/server.log To deploy the app copy a .war file to the deployment dir /opt/jboss/wildfly/standalone/deployments/ To redeploy an app, copy a new file to the deployment dir and then run touch <app_name>.war in the same dir. Then see /opt/jboss/wildfly/standalone/log/server.log to verify; the server stops working following these updates. Restart WildFly - How to start/stop the WildFly server","title":"Configure Wildfly for Lightrun"},{"location":"wildfly%203/#configure-wildfly-for-lightrun","text":"Wildfly is a Java application server by RedHat. The WAR file contains the Wildfly Server configurations that need to be updated for Lightrun integration. To start using Lightrun with a Wildfly server, first add the agent path as an additional JAVA_OPTS parameter in the Wildfly WAR file. Note The Lightrun support for Wildfly has been verified on CentOS 7.6/WildFly 18 (the official WildFly Docker image).","title":"Configure Wildfly for Lightrun"},{"location":"wildfly%204/","text":"Configure Wildfly for Lightrun \u00b6 Wildfly is a Java application server by RedHat. The WAR file contains the Wildfly Server configurations that need to be updated for Lightrun integration. To start using Lightrun with a Wildfly server, first add the agent path as an additional JAVA_OPTS parameter in the Wildfly WAR file. Note The Lightrun support for Wildfly has been verified on CentOS 7.6/WildFly 18 (the official WildFly Docker image). To configure Wildfly for Lightrun For a standalone JVM deployment, JVM settings can be added to the standalone.conf file in the EAP_HOME/bin folder. Accordingly, copy the agent path, update it according to your configuration and then add it to standalone.conf : Tip The default server logs are in /opt/jboss/wildfly/standalone/log/server.log To deploy the app copy a .war file to the deployment dir /opt/jboss/wildfly/standalone/deployments/ To redeploy an app, copy a new file to the deployment dir and then run touch <app_name>.war in the same dir. Then see /opt/jboss/wildfly/standalone/log/server.log to verify; the server stops working following these updates. Restart WildFly - How to start/stop the WildFly server","title":"Configure Wildfly for Lightrun"},{"location":"wildfly%204/#configure-wildfly-for-lightrun","text":"Wildfly is a Java application server by RedHat. The WAR file contains the Wildfly Server configurations that need to be updated for Lightrun integration. To start using Lightrun with a Wildfly server, first add the agent path as an additional JAVA_OPTS parameter in the Wildfly WAR file. Note The Lightrun support for Wildfly has been verified on CentOS 7.6/WildFly 18 (the official WildFly Docker image).","title":"Configure Wildfly for Lightrun"},{"location":"wildfly/","text":"Configure Wildfly for Lightrun \u00b6 Wildfly is a Java application server by RedHat. The WAR file contains the Wildfly Server configurations that need to be updated for Lightrun integration. To start using Lightrun with a Wildfly server, first add the agent path as an additional JAVA_OPTS parameter in the Wildfly WAR file. Note The Lightrun support for Wildfly has been verified on CentOS 7.6/WildFly 18 (the official WildFly Docker image). To configure Wildfly for Lightrun For a standalone JVM deployment, JVM settings can be added to the standalone.conf file in the EAP_HOME/bin folder. Accordingly, copy the agent path, update it according to your configuration and then add it to standalone.conf : Tip The default server logs are in /opt/jboss/wildfly/standalone/log/server.log To deploy the app copy a .war file to the deployment dir /opt/jboss/wildfly/standalone/deployments/ To redeploy an app, copy a new file to the deployment dir and then run touch <app_name>.war in the same dir. Then see /opt/jboss/wildfly/standalone/log/server.log to verify; the server stops working following these updates. Restart WildFly - How to start/stop the WildFly server","title":"Wildfly"},{"location":"wildfly/#configure-wildfly-for-lightrun","text":"Wildfly is a Java application server by RedHat. The WAR file contains the Wildfly Server configurations that need to be updated for Lightrun integration. To start using Lightrun with a Wildfly server, first add the agent path as an additional JAVA_OPTS parameter in the Wildfly WAR file. Note The Lightrun support for Wildfly has been verified on CentOS 7.6/WildFly 18 (the official WildFly Docker image).","title":"Configure Wildfly for Lightrun"}]}